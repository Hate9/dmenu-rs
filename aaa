#![feature(prelude_import)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
mod util {
    use x11::xlib::{
        CurrentTime, RevertToParent, XSetInputFocus, XGetInputFocus, Window, Display, GrabSuccess,
        GrabModeAsync, True, XDefaultRootWindow, XGrabKeyboard,
    };
    use crate::drw::Drw;
    use crate::item::Item;
    use std::mem::MaybeUninit;
    use std::time::Duration;
    use std::thread::sleep;
    use std::io::{self, BufRead};
    pub fn readstdin(drw: &mut Drw) -> Result<Vec<Item>, String> {
        let mut ret = Vec::new();
        for line in io::stdin().lock().lines() {
            let item = match Item::new(
                match line {
                    Ok(l) => l,
                    Err(e) => {
                        return Err({
                            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                &["Could not read from stdin: "],
                                &match (&e,) {
                                    (arg0,) => [::core::fmt::ArgumentV1::new(
                                        arg0,
                                        ::core::fmt::Display::fmt,
                                    )],
                                },
                            ));
                            res
                        })
                    }
                },
                false,
                drw,
            ) {
                Ok(i) => i,
                Err(err) => return Err(err),
            };
            if item.width as i32 > drw.pseudo_globals.inputw {
                drw.pseudo_globals.inputw = item.width as i32;
            }
            ret.push(item)
        }
        Ok(ret)
    }
    pub fn grabkeyboard(dpy: *mut Display, embed: Window) -> Result<(), String> {
        let ts = Duration::from_millis(1);
        if embed != 0 {
            return Ok(());
        }
        for _ in 0..1000 {
            if unsafe {
                XGrabKeyboard(
                    dpy,
                    XDefaultRootWindow(dpy),
                    True,
                    GrabModeAsync,
                    GrabModeAsync,
                    CurrentTime,
                ) == GrabSuccess
            } {
                return Ok(());
            }
            sleep(ts);
        }
        Err({
            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                &["cannot grab keyboard"],
                &match () {
                    () => [],
                },
            ));
            res
        })
    }
    pub fn grabfocus(drw: &Drw) -> Result<(), String> {
        unsafe {
            let ts = Duration::from_millis(1);
            let mut focuswin: Window = MaybeUninit::uninit().assume_init();
            let mut revertwin = MaybeUninit::uninit().assume_init();
            for _ in 0..100 {
                XGetInputFocus(drw.dpy, &mut focuswin, &mut revertwin);
                if focuswin == drw.pseudo_globals.win {
                    return Ok(());
                }
                XSetInputFocus(drw.dpy, drw.pseudo_globals.win, RevertToParent, CurrentTime);
                sleep(ts);
            }
            Err({
                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                    &["cannot grab focus"],
                    &match () {
                        () => [],
                    },
                ));
                res
            })
        }
    }
}
mod drw {
    use x11::xlib::{
        Display, Window, Drawable, GC, XWindowAttributes, XFreeGC, XUngrabKey, XDefaultColormap,
        XDefaultVisual, False, XFillRectangle, XSetForeground, AnyKey, XDrawRectangle, XCopyArea,
        XSync, AnyModifier, XCloseDisplay, XFreePixmap,
    };
    use x11::xft::{
        XftColor, FcPattern, XftDrawStringUtf8, XftDraw, XftDrawCreate, XftTextExtentsUtf8,
        XftCharExists, XftFontMatch, XftDrawDestroy,
    };
    use x11::xrender::XGlyphInfo;
    use fontconfig::fontconfig::{
        FcPatternAddBool, FcPatternDestroy, FcCharSetCreate, FcCharSetAddChar, FcPatternDuplicate,
        FcPatternAddCharSet, FcCharSetDestroy, FcDefaultSubstitute, FcMatchPattern,
        FcConfigSubstitute,
    };
    use crate::additional_bindings::fontconfig::{FC_SCALABLE, FC_CHARSET, FC_COLOR, FcTrue, FcFalse};
    use libc::{c_uchar, c_int, c_uint, c_void, free};
    use std::{mem::MaybeUninit, ptr};
    use crate::item::{Items, Direction::*};
    use crate::globals::*;
    use crate::config::*;
    use crate::fnt::*;
    use overrider::*;
    pub enum TextOption<'a> {
        Prompt,
        Input,
        Other(&'a String),
    }
    use TextOption::*;
    pub struct Drw {
        pub wa: XWindowAttributes,
        pub dpy: *mut Display,
        pub screen: c_int,
        pub root: Window,
        pub drawable: Drawable,
        pub gc: GC,
        pub scheme: [*mut XftColor; 2],
        pub fonts: Vec<Fnt>,
        pub pseudo_globals: PseudoGlobals,
        pub w: c_int,
        pub h: c_int,
        pub config: Config,
        pub input: String,
        pub items: Option<Items>,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Drw {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Drw {
                    wa: ref __self_0_0,
                    dpy: ref __self_0_1,
                    screen: ref __self_0_2,
                    root: ref __self_0_3,
                    drawable: ref __self_0_4,
                    gc: ref __self_0_5,
                    scheme: ref __self_0_6,
                    fonts: ref __self_0_7,
                    pseudo_globals: ref __self_0_8,
                    w: ref __self_0_9,
                    h: ref __self_0_10,
                    config: ref __self_0_11,
                    input: ref __self_0_12,
                    items: ref __self_0_13,
                } => {
                    let mut debug_trait_builder = f.debug_struct("Drw");
                    let _ = debug_trait_builder.field("wa", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("dpy", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("screen", &&(*__self_0_2));
                    let _ = debug_trait_builder.field("root", &&(*__self_0_3));
                    let _ = debug_trait_builder.field("drawable", &&(*__self_0_4));
                    let _ = debug_trait_builder.field("gc", &&(*__self_0_5));
                    let _ = debug_trait_builder.field("scheme", &&(*__self_0_6));
                    let _ = debug_trait_builder.field("fonts", &&(*__self_0_7));
                    let _ = debug_trait_builder.field("pseudo_globals", &&(*__self_0_8));
                    let _ = debug_trait_builder.field("w", &&(*__self_0_9));
                    let _ = debug_trait_builder.field("h", &&(*__self_0_10));
                    let _ = debug_trait_builder.field("config", &&(*__self_0_11));
                    let _ = debug_trait_builder.field("input", &&(*__self_0_12));
                    let _ = debug_trait_builder.field("items", &&(*__self_0_13));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    use crate::plugin_password::*;
    impl Drw {
        pub fn fontset_getwidth(&mut self, text: TextOption) -> Result<c_int, String> {
            if self.fonts.len() == 0 {
                Ok(0)
            } else {
                self.text(0, 0, 0, 0, 0, text, false)
            }
        }
        pub fn text(
            &mut self,
            mut x: c_int,
            y: c_int,
            mut w: c_uint,
            h: c_uint,
            lpad: c_uint,
            text_opt: TextOption,
            invert: bool,
        ) -> Result<c_int, String> {
            let text: String = {
                match text_opt {
                    Prompt => self.config.prompt.clone(),
                    Input => self.format_input(),
                    Other(string) => string.to_string(),
                }
            };
            unsafe {
                let render = x > 0 || y > 0 || w > 0 || h > 0;
                if text.len() == 0 || self.fonts.len() == 0 {
                    return Ok(0);
                }
                let mut d: *mut XftDraw = ptr::null_mut();
                if !render {
                    w = !0;
                } else {
                    XSetForeground(
                        self.dpy,
                        self.gc,
                        (*self.scheme[if invert { ColFg } else { ColBg } as usize]).pixel,
                    );
                    XFillRectangle(self.dpy, self.drawable, self.gc, x, y, w as u32, h);
                    d = XftDrawCreate(
                        self.dpy,
                        self.drawable,
                        XDefaultVisual(self.dpy, self.screen),
                        XDefaultColormap(self.dpy, self.screen),
                    );
                    x += lpad as c_int;
                    w -= lpad;
                }
                let mut slice_start = 0;
                let mut slice_end = 0;
                let mut cur_font: Option<usize> = None;
                for cur_char in text.chars() {
                    let mut found_font = self
                        .fonts
                        .iter()
                        .position(|font| XftCharExists(self.dpy, font.xfont, cur_char as u32) == 1);
                    if cur_font == found_font {
                        slice_end += cur_char.len_utf8();
                    }
                    if cur_font != found_font {
                        if found_font.is_none() {
                            let fccharset = FcCharSetCreate();
                            FcCharSetAddChar(fccharset, cur_char as u32);
                            if self.fonts[0].pattern_pointer == ptr::null_mut() {
                                return Err({
                                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                        &["fonts must be loaded from font strings"],
                                        &match () {
                                            () => [],
                                        },
                                    ));
                                    res
                                });
                            }
                            let fcpattern =
                                FcPatternDuplicate(self.fonts[0].pattern_pointer as *const c_void);
                            FcPatternAddCharSet(fcpattern as *mut c_void, FC_CHARSET, fccharset);
                            FcPatternAddBool(fcpattern as *mut c_void, FC_SCALABLE, FcTrue);
                            FcPatternAddBool(fcpattern as *mut c_void, FC_COLOR, FcFalse);
                            FcConfigSubstitute(
                                ptr::null_mut(),
                                fcpattern as *mut c_void,
                                FcMatchPattern,
                            );
                            FcDefaultSubstitute(fcpattern as *mut c_void);
                            let mut result = MaybeUninit::uninit().assume_init();
                            let font_match = XftFontMatch(
                                self.dpy,
                                self.screen,
                                fcpattern as *const FcPattern,
                                &mut result,
                            );
                            FcCharSetDestroy(fccharset);
                            FcPatternDestroy(fcpattern);
                            if font_match != ptr::null_mut() {
                                let usedfont_opt = Fnt::new(self, ptr::null_mut(), font_match);
                                if let Some(mut usedfont) = usedfont_opt {
                                    if XftCharExists(self.dpy, usedfont.xfont, cur_char as u32) != 0
                                    {
                                        found_font = Some(self.fonts.len());
                                        self.fonts.push(usedfont);
                                    } else {
                                        usedfont.free(self.dpy);
                                        found_font = Some(0);
                                    }
                                } else {
                                    found_font = Some(0);
                                }
                            }
                        }
                        self.render(
                            &mut x,
                            &y,
                            &mut w,
                            &h,
                            &text.as_bytes()[slice_start..slice_end],
                            &cur_font,
                            d,
                            render,
                            invert,
                        );
                        cur_font = found_font;
                        slice_start = slice_end;
                        slice_end += cur_char.len_utf8();
                    }
                }
                self.render(
                    &mut x,
                    &y,
                    &mut w,
                    &h,
                    &text.as_bytes()[slice_start..slice_end],
                    &cur_font,
                    d,
                    render,
                    invert,
                );
                if d != ptr::null_mut() {
                    XftDrawDestroy(d);
                }
                Ok(x + if render { w } else { 0 } as i32)
            }
        }
        fn render(
            &self,
            x: &mut i32,
            y: &i32,
            w: &mut u32,
            h: &u32,
            textslice: &[c_uchar],
            cur_font: &Option<usize>,
            d: *mut XftDraw,
            render: bool,
            invert: bool,
        ) {
            if textslice.len() == 0 {
                return;
            }
            unsafe {
                let mut text = String::from_utf8_unchecked(textslice.to_vec());
                let usedfont = cur_font.map(|i| &self.fonts[i]).unwrap();
                let font_ref = usedfont;
                let (mut substr_width, _) =
                    self.font_getexts(font_ref, text.as_ptr() as *mut c_uchar, text.len() as c_int);
                if substr_width > *w {
                    text.truncate(text.len() - 3);
                    text.push_str("...");
                    while {
                        substr_width = self
                            .font_getexts(
                                font_ref,
                                text.as_ptr() as *mut c_uchar,
                                text.len() as c_int,
                            )
                            .0;
                        substr_width > *w
                    } {
                        text.truncate(text.len() - 4);
                        text.push_str("...");
                    }
                }
                if render {
                    let ty =
                        *y + (*h as i32 - usedfont.height as i32) / 2 + (*usedfont.xfont).ascent;
                    XftDrawStringUtf8(
                        d,
                        self.scheme[if invert { ColBg } else { ColFg } as usize],
                        self.fonts[cur_font.unwrap()].xfont,
                        *x,
                        ty,
                        text.as_ptr() as *mut c_uchar,
                        text.len() as c_int,
                    );
                }
                *x += substr_width as i32;
                *w -= substr_width;
            }
        }
        pub fn font_getexts(
            &self,
            font: &Fnt,
            subtext: *const c_uchar,
            len: c_int,
        ) -> (c_uint, c_uint) {
            unsafe {
                let mut ext: XGlyphInfo = MaybeUninit::uninit().assume_init();
                XftTextExtentsUtf8(self.dpy, font.xfont, subtext, len, &mut ext);
                (ext.xOff as c_uint, font.height)
            }
        }
        pub fn draw(&mut self) -> Result<(), String> {
            self.setscheme(SchemeNorm);
            self.rect(0, 0, self.w as u32, self.h as u32, true, true);
            let mut x = 0;
            if self.config.prompt.len() > 0 {
                self.setscheme(SchemeSel);
                match self.text(
                    x,
                    0,
                    self.pseudo_globals.promptw as c_uint,
                    self.pseudo_globals.bh as u32,
                    self.pseudo_globals.lrpad as u32 / 2,
                    Prompt,
                    false,
                ) {
                    Ok(computed_width) => x = computed_width,
                    Err(err) => return Err(err),
                }
            }
            if let Err(err) = Items::gen_matches(
                self,
                if self.config.lines > 0 {
                    Vertical
                } else {
                    Horizontal
                },
            ) {
                return Err(err);
            }
            let w = if self.config.lines > 0 || self.items.as_mut().unwrap().match_len() == 0 {
                self.w - x
            } else {
                self.pseudo_globals.inputw
            };
            self.setscheme(SchemeNorm);
            if let Err(err) = self.text(
                x,
                0,
                w as c_uint,
                self.pseudo_globals.bh as c_uint,
                self.pseudo_globals.lrpad as c_uint / 2,
                Input,
                false,
            ) {
                return Err(err);
            }
            match self.textw(Input) {
                Ok(inputw) => {
                    match self.textw(Other(&self.input[self.pseudo_globals.cursor..].to_string())) {
                        Ok(otherw) => {
                            let curpos: c_int = inputw - otherw + self.pseudo_globals.lrpad / 2 - 1;
                            if curpos < w {
                                self.setscheme(SchemeNorm);
                                self.rect(
                                    x + curpos,
                                    2,
                                    2,
                                    self.pseudo_globals.bh as u32 - 4,
                                    true,
                                    false,
                                );
                            }
                            if let Err(err) = Items::draw(
                                self,
                                if self.config.lines > 0 {
                                    Vertical
                                } else {
                                    Horizontal
                                },
                            ) {
                                return Err(err);
                            }
                            self.map(self.pseudo_globals.win, 0, 0, self.w, self.h);
                            Ok(())
                        }
                        Err(err) => return Err(err),
                    }
                }
                Err(err) => return Err(err),
            }
        }
        pub fn map(&self, win: Window, x: c_int, y: c_int, w: c_int, h: c_int) {
            unsafe {
                XCopyArea(
                    self.dpy,
                    self.drawable,
                    win,
                    self.gc,
                    x,
                    y,
                    w as u32,
                    h as u32,
                    x,
                    y,
                );
                XSync(self.dpy, False);
            }
        }
        pub fn textw(&mut self, text: TextOption) -> Result<c_int, String> {
            self.fontset_getwidth(text)
                .map(|computed_width| computed_width + self.pseudo_globals.lrpad)
        }
        pub fn setscheme(&mut self, scm: Schemes) {
            self.scheme = self.pseudo_globals.schemeset[scm as usize];
        }
        fn rect(&self, x: c_int, y: c_int, w: c_uint, h: c_uint, filled: bool, invert: bool) {
            unsafe {
                XSetForeground(
                    self.dpy,
                    self.gc,
                    (*self.scheme[if invert { ColBg } else { ColFg } as usize]).pixel,
                );
                if filled {
                    XFillRectangle(self.dpy, self.drawable, self.gc, x, y, w, h);
                } else {
                    XDrawRectangle(self.dpy, self.drawable, self.gc, x, y, w - 1, h - 1);
                }
            }
        }
    }
    impl Drop for Drw {
        fn drop(&mut self) {
            unsafe {
                for font in &mut self.fonts {
                    font.free(self.dpy);
                }
                XUngrabKey(self.dpy, AnyKey, AnyModifier, self.root);
                for i in 0..SchemeLast as usize {
                    free(self.pseudo_globals.schemeset[i][0] as *mut c_void);
                    free(self.pseudo_globals.schemeset[i][1] as *mut c_void);
                }
                XFreePixmap(self.dpy, self.drawable);
                XFreeGC(self.dpy, self.gc);
                XSync(self.dpy, False);
                XCloseDisplay(self.dpy);
            }
        }
    }
}
mod globals {
    use x11::xlib::{Window, XIC};
    use x11::xft::XftColor;
    use libc::c_int;
    use crate::config::Schemes::*;
    use std::{mem::MaybeUninit, ptr};
    pub struct PseudoGlobals {
        pub promptw: c_int,
        pub inputw: c_int,
        pub lrpad: c_int,
        pub schemeset: [[*mut XftColor; 2]; SchemeLast as usize],
        pub bh: c_int,
        pub win: Window,
        pub cursor: usize,
        pub xic: XIC,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for PseudoGlobals {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                PseudoGlobals {
                    promptw: ref __self_0_0,
                    inputw: ref __self_0_1,
                    lrpad: ref __self_0_2,
                    schemeset: ref __self_0_3,
                    bh: ref __self_0_4,
                    win: ref __self_0_5,
                    cursor: ref __self_0_6,
                    xic: ref __self_0_7,
                } => {
                    let mut debug_trait_builder = f.debug_struct("PseudoGlobals");
                    let _ = debug_trait_builder.field("promptw", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("inputw", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("lrpad", &&(*__self_0_2));
                    let _ = debug_trait_builder.field("schemeset", &&(*__self_0_3));
                    let _ = debug_trait_builder.field("bh", &&(*__self_0_4));
                    let _ = debug_trait_builder.field("win", &&(*__self_0_5));
                    let _ = debug_trait_builder.field("cursor", &&(*__self_0_6));
                    let _ = debug_trait_builder.field("xic", &&(*__self_0_7));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl Default for PseudoGlobals {
        fn default() -> Self {
            unsafe {
                Self {
                    promptw: MaybeUninit::uninit().assume_init(),
                    inputw: 0,
                    schemeset: [[ptr::null_mut(); 2]; SchemeLast as usize],
                    lrpad: MaybeUninit::uninit().assume_init(),
                    bh: MaybeUninit::uninit().assume_init(),
                    win: MaybeUninit::uninit().assume_init(),
                    cursor: 0,
                    xic: MaybeUninit::uninit().assume_init(),
                }
            }
        }
    }
}
mod config {
    use x11::xlib::Window;
    use std::mem::MaybeUninit;
    use libc::{c_int, c_uint};
    pub enum Schemes {
        SchemeNorm,
        SchemeSel,
        SchemeOut,
        SchemeLast,
    }
    pub enum Clrs {
        ColFg,
        ColBg,
    }
    pub use Schemes::*;
    pub use Clrs::*;
    pub struct Config {
        pub lines: c_uint,
        pub topbar: bool,
        pub prompt: String,
        pub promptw: c_int,
        pub default_font: String,
        pub fast: bool,
        pub embed: Window,
        pub case_sensitive: bool,
        pub mon: c_int,
        pub colors: [[[u8; 8]; 2]; SchemeLast as usize],
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Config {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Config {
                    lines: ref __self_0_0,
                    topbar: ref __self_0_1,
                    prompt: ref __self_0_2,
                    promptw: ref __self_0_3,
                    default_font: ref __self_0_4,
                    fast: ref __self_0_5,
                    embed: ref __self_0_6,
                    case_sensitive: ref __self_0_7,
                    mon: ref __self_0_8,
                    colors: ref __self_0_9,
                } => {
                    let mut debug_trait_builder = f.debug_struct("Config");
                    let _ = debug_trait_builder.field("lines", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("topbar", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("prompt", &&(*__self_0_2));
                    let _ = debug_trait_builder.field("promptw", &&(*__self_0_3));
                    let _ = debug_trait_builder.field("default_font", &&(*__self_0_4));
                    let _ = debug_trait_builder.field("fast", &&(*__self_0_5));
                    let _ = debug_trait_builder.field("embed", &&(*__self_0_6));
                    let _ = debug_trait_builder.field("case_sensitive", &&(*__self_0_7));
                    let _ = debug_trait_builder.field("mon", &&(*__self_0_8));
                    let _ = debug_trait_builder.field("colors", &&(*__self_0_9));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl Default for Config {
        fn default() -> Self {
            unsafe {
                Self {
                    lines: 0,
                    topbar: true,
                    prompt: "".to_string(),
                    promptw: MaybeUninit::uninit().assume_init(),
                    default_font: "monospace:size=10\0".to_string(),
                    fast: false,
                    embed: 0,
                    case_sensitive: true,
                    mon: -1,
                    colors: {
                        let mut arr = [[[0; 8]; 2]; SchemeLast as usize];
                        arr[SchemeNorm as usize] = [*b"#bbbbbb\0", *b"#222222\0"];
                        arr[SchemeSel as usize] = [*b"#eeeeee\0", *b"#005577\0"];
                        arr[SchemeOut as usize] = [*b"#000000\0", *b"#00ffff\0"];
                        arr
                    },
                }
            }
        }
    }
}
mod additional_bindings {
    mod raw {
        pub mod main {
            #![allow(non_upper_case_globals)]
            #![allow(non_camel_case_types)]
            #![allow(non_snake_case)]
            #![allow(unused)]
            pub const _SYS_TYPES_H: u32 = 1;
            pub const _FEATURES_H: u32 = 1;
            pub const _DEFAULT_SOURCE: u32 = 1;
            pub const __GLIBC_USE_ISOC2X: u32 = 0;
            pub const __USE_ISOC11: u32 = 1;
            pub const __USE_ISOC99: u32 = 1;
            pub const __USE_ISOC95: u32 = 1;
            pub const __USE_POSIX_IMPLICITLY: u32 = 1;
            pub const _POSIX_SOURCE: u32 = 1;
            pub const _POSIX_C_SOURCE: u32 = 200809;
            pub const __USE_POSIX: u32 = 1;
            pub const __USE_POSIX2: u32 = 1;
            pub const __USE_POSIX199309: u32 = 1;
            pub const __USE_POSIX199506: u32 = 1;
            pub const __USE_XOPEN2K: u32 = 1;
            pub const __USE_XOPEN2K8: u32 = 1;
            pub const _ATFILE_SOURCE: u32 = 1;
            pub const __USE_MISC: u32 = 1;
            pub const __USE_ATFILE: u32 = 1;
            pub const __USE_FORTIFY_LEVEL: u32 = 0;
            pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
            pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
            pub const _STDC_PREDEF_H: u32 = 1;
            pub const __STDC_IEC_559__: u32 = 1;
            pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
            pub const __STDC_ISO_10646__: u32 = 201706;
            pub const __GNU_LIBRARY__: u32 = 6;
            pub const __GLIBC__: u32 = 2;
            pub const __GLIBC_MINOR__: u32 = 31;
            pub const _SYS_CDEFS_H: u32 = 1;
            pub const __glibc_c99_flexarr_available: u32 = 1;
            pub const __WORDSIZE: u32 = 64;
            pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
            pub const __SYSCALL_WORDSIZE: u32 = 64;
            pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
            pub const __HAVE_GENERIC_SELECTION: u32 = 1;
            pub const _BITS_TYPES_H: u32 = 1;
            pub const __TIMESIZE: u32 = 64;
            pub const _BITS_TYPESIZES_H: u32 = 1;
            pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
            pub const __INO_T_MATCHES_INO64_T: u32 = 1;
            pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
            pub const __STATFS_MATCHES_STATFS64: u32 = 1;
            pub const __FD_SETSIZE: u32 = 1024;
            pub const _BITS_TIME64_H: u32 = 1;
            pub const __clock_t_defined: u32 = 1;
            pub const __clockid_t_defined: u32 = 1;
            pub const __time_t_defined: u32 = 1;
            pub const __timer_t_defined: u32 = 1;
            pub const _BITS_STDINT_INTN_H: u32 = 1;
            pub const __BIT_TYPES_DEFINED__: u32 = 1;
            pub const _ENDIAN_H: u32 = 1;
            pub const _BITS_ENDIAN_H: u32 = 1;
            pub const __LITTLE_ENDIAN: u32 = 1234;
            pub const __BIG_ENDIAN: u32 = 4321;
            pub const __PDP_ENDIAN: u32 = 3412;
            pub const _BITS_ENDIANNESS_H: u32 = 1;
            pub const __BYTE_ORDER: u32 = 1234;
            pub const __FLOAT_WORD_ORDER: u32 = 1234;
            pub const LITTLE_ENDIAN: u32 = 1234;
            pub const BIG_ENDIAN: u32 = 4321;
            pub const PDP_ENDIAN: u32 = 3412;
            pub const BYTE_ORDER: u32 = 1234;
            pub const _BITS_BYTESWAP_H: u32 = 1;
            pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
            pub const _SYS_SELECT_H: u32 = 1;
            pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
            pub const __sigset_t_defined: u32 = 1;
            pub const __timeval_defined: u32 = 1;
            pub const _STRUCT_TIMESPEC: u32 = 1;
            pub const FD_SETSIZE: u32 = 1024;
            pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
            pub const _THREAD_SHARED_TYPES_H: u32 = 1;
            pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
            pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
            pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
            pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
            pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
            pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
            pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
            pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
            pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
            pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
            pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
            pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
            pub const __have_pthread_attr_t: u32 = 1;
            pub const _SYS_STAT_H: u32 = 1;
            pub const _BITS_STAT_H: u32 = 1;
            pub const _STAT_VER_KERNEL: u32 = 0;
            pub const _STAT_VER_LINUX: u32 = 1;
            pub const _MKNOD_VER_LINUX: u32 = 0;
            pub const _STAT_VER: u32 = 1;
            pub const __S_IFMT: u32 = 61440;
            pub const __S_IFDIR: u32 = 16384;
            pub const __S_IFCHR: u32 = 8192;
            pub const __S_IFBLK: u32 = 24576;
            pub const __S_IFREG: u32 = 32768;
            pub const __S_IFIFO: u32 = 4096;
            pub const __S_IFLNK: u32 = 40960;
            pub const __S_IFSOCK: u32 = 49152;
            pub const __S_ISUID: u32 = 2048;
            pub const __S_ISGID: u32 = 1024;
            pub const __S_ISVTX: u32 = 512;
            pub const __S_IREAD: u32 = 256;
            pub const __S_IWRITE: u32 = 128;
            pub const __S_IEXEC: u32 = 64;
            pub const UTIME_NOW: u32 = 1073741823;
            pub const UTIME_OMIT: u32 = 1073741822;
            pub const S_IFMT: u32 = 61440;
            pub const S_IFDIR: u32 = 16384;
            pub const S_IFCHR: u32 = 8192;
            pub const S_IFBLK: u32 = 24576;
            pub const S_IFREG: u32 = 32768;
            pub const S_IFIFO: u32 = 4096;
            pub const S_IFLNK: u32 = 40960;
            pub const S_IFSOCK: u32 = 49152;
            pub const S_ISUID: u32 = 2048;
            pub const S_ISGID: u32 = 1024;
            pub const S_ISVTX: u32 = 512;
            pub const S_IRUSR: u32 = 256;
            pub const S_IWUSR: u32 = 128;
            pub const S_IXUSR: u32 = 64;
            pub const S_IRWXU: u32 = 448;
            pub const S_IREAD: u32 = 256;
            pub const S_IWRITE: u32 = 128;
            pub const S_IEXEC: u32 = 64;
            pub const S_IRGRP: u32 = 32;
            pub const S_IWGRP: u32 = 16;
            pub const S_IXGRP: u32 = 8;
            pub const S_IRWXG: u32 = 56;
            pub const S_IROTH: u32 = 4;
            pub const S_IWOTH: u32 = 2;
            pub const S_IXOTH: u32 = 1;
            pub const S_IRWXO: u32 = 7;
            pub const ACCESSPERMS: u32 = 511;
            pub const ALLPERMS: u32 = 4095;
            pub const DEFFILEMODE: u32 = 438;
            pub const S_BLKSIZE: u32 = 512;
            pub const _MKNOD_VER: u32 = 0;
            pub const __GNUC_VA_LIST: u32 = 1;
            pub const _LIBC_LIMITS_H_: u32 = 1;
            pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
            pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
            pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
            pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
            pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
            pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
            pub const MB_LEN_MAX: u32 = 16;
            pub const _BITS_POSIX1_LIM_H: u32 = 1;
            pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
            pub const _POSIX_AIO_MAX: u32 = 1;
            pub const _POSIX_ARG_MAX: u32 = 4096;
            pub const _POSIX_CHILD_MAX: u32 = 25;
            pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
            pub const _POSIX_HOST_NAME_MAX: u32 = 255;
            pub const _POSIX_LINK_MAX: u32 = 8;
            pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
            pub const _POSIX_MAX_CANON: u32 = 255;
            pub const _POSIX_MAX_INPUT: u32 = 255;
            pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
            pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
            pub const _POSIX_NAME_MAX: u32 = 14;
            pub const _POSIX_NGROUPS_MAX: u32 = 8;
            pub const _POSIX_OPEN_MAX: u32 = 20;
            pub const _POSIX_PATH_MAX: u32 = 256;
            pub const _POSIX_PIPE_BUF: u32 = 512;
            pub const _POSIX_RE_DUP_MAX: u32 = 255;
            pub const _POSIX_RTSIG_MAX: u32 = 8;
            pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
            pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
            pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
            pub const _POSIX_SSIZE_MAX: u32 = 32767;
            pub const _POSIX_STREAM_MAX: u32 = 8;
            pub const _POSIX_SYMLINK_MAX: u32 = 255;
            pub const _POSIX_SYMLOOP_MAX: u32 = 8;
            pub const _POSIX_TIMER_MAX: u32 = 32;
            pub const _POSIX_TTY_NAME_MAX: u32 = 9;
            pub const _POSIX_TZNAME_MAX: u32 = 6;
            pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
            pub const NR_OPEN: u32 = 1024;
            pub const NGROUPS_MAX: u32 = 65536;
            pub const ARG_MAX: u32 = 131072;
            pub const LINK_MAX: u32 = 127;
            pub const MAX_CANON: u32 = 255;
            pub const MAX_INPUT: u32 = 255;
            pub const NAME_MAX: u32 = 255;
            pub const PATH_MAX: u32 = 4096;
            pub const PIPE_BUF: u32 = 4096;
            pub const XATTR_NAME_MAX: u32 = 255;
            pub const XATTR_SIZE_MAX: u32 = 65536;
            pub const XATTR_LIST_MAX: u32 = 65536;
            pub const RTSIG_MAX: u32 = 32;
            pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
            pub const PTHREAD_KEYS_MAX: u32 = 1024;
            pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
            pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
            pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
            pub const AIO_PRIO_DELTA_MAX: u32 = 20;
            pub const PTHREAD_STACK_MIN: u32 = 16384;
            pub const DELAYTIMER_MAX: u32 = 2147483647;
            pub const TTY_NAME_MAX: u32 = 32;
            pub const LOGIN_NAME_MAX: u32 = 256;
            pub const HOST_NAME_MAX: u32 = 64;
            pub const MQ_PRIO_MAX: u32 = 32768;
            pub const SEM_VALUE_MAX: u32 = 2147483647;
            pub const _BITS_POSIX2_LIM_H: u32 = 1;
            pub const _POSIX2_BC_BASE_MAX: u32 = 99;
            pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
            pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
            pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
            pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
            pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
            pub const _POSIX2_LINE_MAX: u32 = 2048;
            pub const _POSIX2_RE_DUP_MAX: u32 = 255;
            pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
            pub const BC_BASE_MAX: u32 = 99;
            pub const BC_DIM_MAX: u32 = 2048;
            pub const BC_SCALE_MAX: u32 = 99;
            pub const BC_STRING_MAX: u32 = 1000;
            pub const COLL_WEIGHTS_MAX: u32 = 255;
            pub const EXPR_NEST_MAX: u32 = 32;
            pub const LINE_MAX: u32 = 2048;
            pub const CHARCLASS_NAME_MAX: u32 = 2048;
            pub const RE_DUP_MAX: u32 = 32767;
            pub const FC_MAJOR: u32 = 2;
            pub const FC_MINOR: u32 = 13;
            pub const FC_REVISION: u32 = 91;
            pub const FC_VERSION: u32 = 21391;
            pub const FC_CACHE_VERSION_NUMBER: u32 = 7;
            pub const FcFalse: u32 = 0;
            pub const FcTrue: u32 = 1;
            pub const FcDontCare: u32 = 2;
            pub const FC_FAMILY: &'static [u8; 7usize] = b"family\0";
            pub const FC_STYLE: &'static [u8; 6usize] = b"style\0";
            pub const FC_SLANT: &'static [u8; 6usize] = b"slant\0";
            pub const FC_WEIGHT: &'static [u8; 7usize] = b"weight\0";
            pub const FC_SIZE: &'static [u8; 5usize] = b"size\0";
            pub const FC_ASPECT: &'static [u8; 7usize] = b"aspect\0";
            pub const FC_PIXEL_SIZE: &'static [u8; 10usize] = b"pixelsize\0";
            pub const FC_SPACING: &'static [u8; 8usize] = b"spacing\0";
            pub const FC_FOUNDRY: &'static [u8; 8usize] = b"foundry\0";
            pub const FC_ANTIALIAS: &'static [u8; 10usize] = b"antialias\0";
            pub const FC_HINTING: &'static [u8; 8usize] = b"hinting\0";
            pub const FC_HINT_STYLE: &'static [u8; 10usize] = b"hintstyle\0";
            pub const FC_VERTICAL_LAYOUT: &'static [u8; 15usize] = b"verticallayout\0";
            pub const FC_AUTOHINT: &'static [u8; 9usize] = b"autohint\0";
            pub const FC_GLOBAL_ADVANCE: &'static [u8; 14usize] = b"globaladvance\0";
            pub const FC_WIDTH: &'static [u8; 6usize] = b"width\0";
            pub const FC_FILE: &'static [u8; 5usize] = b"file\0";
            pub const FC_INDEX: &'static [u8; 6usize] = b"index\0";
            pub const FC_FT_FACE: &'static [u8; 7usize] = b"ftface\0";
            pub const FC_RASTERIZER: &'static [u8; 11usize] = b"rasterizer\0";
            pub const FC_OUTLINE: &'static [u8; 8usize] = b"outline\0";
            pub const FC_SCALABLE: &'static [u8; 9usize] = b"scalable\0";
            pub const FC_COLOR: &'static [u8; 6usize] = b"color\0";
            pub const FC_VARIABLE: &'static [u8; 9usize] = b"variable\0";
            pub const FC_SCALE: &'static [u8; 6usize] = b"scale\0";
            pub const FC_SYMBOL: &'static [u8; 7usize] = b"symbol\0";
            pub const FC_DPI: &'static [u8; 4usize] = b"dpi\0";
            pub const FC_RGBA: &'static [u8; 5usize] = b"rgba\0";
            pub const FC_MINSPACE: &'static [u8; 9usize] = b"minspace\0";
            pub const FC_SOURCE: &'static [u8; 7usize] = b"source\0";
            pub const FC_CHARSET: &'static [u8; 8usize] = b"charset\0";
            pub const FC_LANG: &'static [u8; 5usize] = b"lang\0";
            pub const FC_FONTVERSION: &'static [u8; 12usize] = b"fontversion\0";
            pub const FC_FULLNAME: &'static [u8; 9usize] = b"fullname\0";
            pub const FC_FAMILYLANG: &'static [u8; 11usize] = b"familylang\0";
            pub const FC_STYLELANG: &'static [u8; 10usize] = b"stylelang\0";
            pub const FC_FULLNAMELANG: &'static [u8; 13usize] = b"fullnamelang\0";
            pub const FC_CAPABILITY: &'static [u8; 11usize] = b"capability\0";
            pub const FC_FONTFORMAT: &'static [u8; 11usize] = b"fontformat\0";
            pub const FC_EMBOLDEN: &'static [u8; 9usize] = b"embolden\0";
            pub const FC_EMBEDDED_BITMAP: &'static [u8; 15usize] = b"embeddedbitmap\0";
            pub const FC_DECORATIVE: &'static [u8; 11usize] = b"decorative\0";
            pub const FC_LCD_FILTER: &'static [u8; 10usize] = b"lcdfilter\0";
            pub const FC_FONT_FEATURES: &'static [u8; 13usize] = b"fontfeatures\0";
            pub const FC_FONT_VARIATIONS: &'static [u8; 15usize] = b"fontvariations\0";
            pub const FC_NAMELANG: &'static [u8; 9usize] = b"namelang\0";
            pub const FC_PRGNAME: &'static [u8; 8usize] = b"prgname\0";
            pub const FC_HASH: &'static [u8; 5usize] = b"hash\0";
            pub const FC_POSTSCRIPT_NAME: &'static [u8; 15usize] = b"postscriptname\0";
            pub const FC_FONT_HAS_HINT: &'static [u8; 12usize] = b"fonthashint\0";
            pub const FC_CACHE_SUFFIX: &'static [u8; 8usize] = b".cache-\0";
            pub const FC_DIR_CACHE_FILE: &'static [u8; 13usize] = b"fonts.cache-\0";
            pub const FC_USER_CACHE_FILE: &'static [u8; 14usize] = b".fonts.cache-\0";
            pub const FC_CHARWIDTH: &'static [u8; 10usize] = b"charwidth\0";
            pub const FC_CHAR_WIDTH: &'static [u8; 10usize] = b"charwidth\0";
            pub const FC_CHAR_HEIGHT: &'static [u8; 11usize] = b"charheight\0";
            pub const FC_MATRIX: &'static [u8; 7usize] = b"matrix\0";
            pub const FC_WEIGHT_THIN: u32 = 0;
            pub const FC_WEIGHT_EXTRALIGHT: u32 = 40;
            pub const FC_WEIGHT_ULTRALIGHT: u32 = 40;
            pub const FC_WEIGHT_LIGHT: u32 = 50;
            pub const FC_WEIGHT_DEMILIGHT: u32 = 55;
            pub const FC_WEIGHT_SEMILIGHT: u32 = 55;
            pub const FC_WEIGHT_BOOK: u32 = 75;
            pub const FC_WEIGHT_REGULAR: u32 = 80;
            pub const FC_WEIGHT_NORMAL: u32 = 80;
            pub const FC_WEIGHT_MEDIUM: u32 = 100;
            pub const FC_WEIGHT_DEMIBOLD: u32 = 180;
            pub const FC_WEIGHT_SEMIBOLD: u32 = 180;
            pub const FC_WEIGHT_BOLD: u32 = 200;
            pub const FC_WEIGHT_EXTRABOLD: u32 = 205;
            pub const FC_WEIGHT_ULTRABOLD: u32 = 205;
            pub const FC_WEIGHT_BLACK: u32 = 210;
            pub const FC_WEIGHT_HEAVY: u32 = 210;
            pub const FC_WEIGHT_EXTRABLACK: u32 = 215;
            pub const FC_WEIGHT_ULTRABLACK: u32 = 215;
            pub const FC_SLANT_ROMAN: u32 = 0;
            pub const FC_SLANT_ITALIC: u32 = 100;
            pub const FC_SLANT_OBLIQUE: u32 = 110;
            pub const FC_WIDTH_ULTRACONDENSED: u32 = 50;
            pub const FC_WIDTH_EXTRACONDENSED: u32 = 63;
            pub const FC_WIDTH_CONDENSED: u32 = 75;
            pub const FC_WIDTH_SEMICONDENSED: u32 = 87;
            pub const FC_WIDTH_NORMAL: u32 = 100;
            pub const FC_WIDTH_SEMIEXPANDED: u32 = 113;
            pub const FC_WIDTH_EXPANDED: u32 = 125;
            pub const FC_WIDTH_EXTRAEXPANDED: u32 = 150;
            pub const FC_WIDTH_ULTRAEXPANDED: u32 = 200;
            pub const FC_PROPORTIONAL: u32 = 0;
            pub const FC_DUAL: u32 = 90;
            pub const FC_MONO: u32 = 100;
            pub const FC_CHARCELL: u32 = 110;
            pub const FC_RGBA_UNKNOWN: u32 = 0;
            pub const FC_RGBA_RGB: u32 = 1;
            pub const FC_RGBA_BGR: u32 = 2;
            pub const FC_RGBA_VRGB: u32 = 3;
            pub const FC_RGBA_VBGR: u32 = 4;
            pub const FC_RGBA_NONE: u32 = 5;
            pub const FC_HINT_NONE: u32 = 0;
            pub const FC_HINT_SLIGHT: u32 = 1;
            pub const FC_HINT_MEDIUM: u32 = 2;
            pub const FC_HINT_FULL: u32 = 3;
            pub const FC_LCD_NONE: u32 = 0;
            pub const FC_LCD_DEFAULT: u32 = 1;
            pub const FC_LCD_LIGHT: u32 = 2;
            pub const FC_LCD_LEGACY: u32 = 3;
            pub const FC_CHARSET_MAP_SIZE: u32 = 8;
            pub const FC_UTF8_MAX_LEN: u32 = 6;
            pub const XlibSpecificationRelease: u32 = 6;
            pub const X_PROTOCOL: u32 = 11;
            pub const X_PROTOCOL_REVISION: u32 = 0;
            pub const None: u32 = 0;
            pub const ParentRelative: u32 = 1;
            pub const CopyFromParent: u32 = 0;
            pub const PointerWindow: u32 = 0;
            pub const InputFocus: u32 = 1;
            pub const PointerRoot: u32 = 1;
            pub const AnyPropertyType: u32 = 0;
            pub const AnyKey: u32 = 0;
            pub const AnyButton: u32 = 0;
            pub const AllTemporary: u32 = 0;
            pub const CurrentTime: u32 = 0;
            pub const NoSymbol: u32 = 0;
            pub const NoEventMask: u32 = 0;
            pub const KeyPressMask: u32 = 1;
            pub const KeyReleaseMask: u32 = 2;
            pub const ButtonPressMask: u32 = 4;
            pub const ButtonReleaseMask: u32 = 8;
            pub const EnterWindowMask: u32 = 16;
            pub const LeaveWindowMask: u32 = 32;
            pub const PointerMotionMask: u32 = 64;
            pub const PointerMotionHintMask: u32 = 128;
            pub const Button1MotionMask: u32 = 256;
            pub const Button2MotionMask: u32 = 512;
            pub const Button3MotionMask: u32 = 1024;
            pub const Button4MotionMask: u32 = 2048;
            pub const Button5MotionMask: u32 = 4096;
            pub const ButtonMotionMask: u32 = 8192;
            pub const KeymapStateMask: u32 = 16384;
            pub const ExposureMask: u32 = 32768;
            pub const VisibilityChangeMask: u32 = 65536;
            pub const StructureNotifyMask: u32 = 131072;
            pub const ResizeRedirectMask: u32 = 262144;
            pub const SubstructureNotifyMask: u32 = 524288;
            pub const SubstructureRedirectMask: u32 = 1048576;
            pub const FocusChangeMask: u32 = 2097152;
            pub const PropertyChangeMask: u32 = 4194304;
            pub const ColormapChangeMask: u32 = 8388608;
            pub const OwnerGrabButtonMask: u32 = 16777216;
            pub const KeyPress: u32 = 2;
            pub const KeyRelease: u32 = 3;
            pub const ButtonPress: u32 = 4;
            pub const ButtonRelease: u32 = 5;
            pub const MotionNotify: u32 = 6;
            pub const EnterNotify: u32 = 7;
            pub const LeaveNotify: u32 = 8;
            pub const FocusIn: u32 = 9;
            pub const FocusOut: u32 = 10;
            pub const KeymapNotify: u32 = 11;
            pub const Expose: u32 = 12;
            pub const GraphicsExpose: u32 = 13;
            pub const NoExpose: u32 = 14;
            pub const VisibilityNotify: u32 = 15;
            pub const CreateNotify: u32 = 16;
            pub const DestroyNotify: u32 = 17;
            pub const UnmapNotify: u32 = 18;
            pub const MapNotify: u32 = 19;
            pub const MapRequest: u32 = 20;
            pub const ReparentNotify: u32 = 21;
            pub const ConfigureNotify: u32 = 22;
            pub const ConfigureRequest: u32 = 23;
            pub const GravityNotify: u32 = 24;
            pub const ResizeRequest: u32 = 25;
            pub const CirculateNotify: u32 = 26;
            pub const CirculateRequest: u32 = 27;
            pub const PropertyNotify: u32 = 28;
            pub const SelectionClear: u32 = 29;
            pub const SelectionRequest: u32 = 30;
            pub const SelectionNotify: u32 = 31;
            pub const ColormapNotify: u32 = 32;
            pub const ClientMessage: u32 = 33;
            pub const MappingNotify: u32 = 34;
            pub const GenericEvent: u32 = 35;
            pub const LASTEvent: u32 = 36;
            pub const ShiftMask: u32 = 1;
            pub const LockMask: u32 = 2;
            pub const ControlMask: u32 = 4;
            pub const Mod1Mask: u32 = 8;
            pub const Mod2Mask: u32 = 16;
            pub const Mod3Mask: u32 = 32;
            pub const Mod4Mask: u32 = 64;
            pub const Mod5Mask: u32 = 128;
            pub const ShiftMapIndex: u32 = 0;
            pub const LockMapIndex: u32 = 1;
            pub const ControlMapIndex: u32 = 2;
            pub const Mod1MapIndex: u32 = 3;
            pub const Mod2MapIndex: u32 = 4;
            pub const Mod3MapIndex: u32 = 5;
            pub const Mod4MapIndex: u32 = 6;
            pub const Mod5MapIndex: u32 = 7;
            pub const Button1Mask: u32 = 256;
            pub const Button2Mask: u32 = 512;
            pub const Button3Mask: u32 = 1024;
            pub const Button4Mask: u32 = 2048;
            pub const Button5Mask: u32 = 4096;
            pub const AnyModifier: u32 = 32768;
            pub const Button1: u32 = 1;
            pub const Button2: u32 = 2;
            pub const Button3: u32 = 3;
            pub const Button4: u32 = 4;
            pub const Button5: u32 = 5;
            pub const NotifyNormal: u32 = 0;
            pub const NotifyGrab: u32 = 1;
            pub const NotifyUngrab: u32 = 2;
            pub const NotifyWhileGrabbed: u32 = 3;
            pub const NotifyHint: u32 = 1;
            pub const NotifyAncestor: u32 = 0;
            pub const NotifyVirtual: u32 = 1;
            pub const NotifyInferior: u32 = 2;
            pub const NotifyNonlinear: u32 = 3;
            pub const NotifyNonlinearVirtual: u32 = 4;
            pub const NotifyPointer: u32 = 5;
            pub const NotifyPointerRoot: u32 = 6;
            pub const NotifyDetailNone: u32 = 7;
            pub const VisibilityUnobscured: u32 = 0;
            pub const VisibilityPartiallyObscured: u32 = 1;
            pub const VisibilityFullyObscured: u32 = 2;
            pub const PlaceOnTop: u32 = 0;
            pub const PlaceOnBottom: u32 = 1;
            pub const FamilyInternet: u32 = 0;
            pub const FamilyDECnet: u32 = 1;
            pub const FamilyChaos: u32 = 2;
            pub const FamilyInternet6: u32 = 6;
            pub const FamilyServerInterpreted: u32 = 5;
            pub const PropertyNewValue: u32 = 0;
            pub const PropertyDelete: u32 = 1;
            pub const ColormapUninstalled: u32 = 0;
            pub const ColormapInstalled: u32 = 1;
            pub const GrabModeSync: u32 = 0;
            pub const GrabModeAsync: u32 = 1;
            pub const GrabSuccess: u32 = 0;
            pub const AlreadyGrabbed: u32 = 1;
            pub const GrabInvalidTime: u32 = 2;
            pub const GrabNotViewable: u32 = 3;
            pub const GrabFrozen: u32 = 4;
            pub const AsyncPointer: u32 = 0;
            pub const SyncPointer: u32 = 1;
            pub const ReplayPointer: u32 = 2;
            pub const AsyncKeyboard: u32 = 3;
            pub const SyncKeyboard: u32 = 4;
            pub const ReplayKeyboard: u32 = 5;
            pub const AsyncBoth: u32 = 6;
            pub const SyncBoth: u32 = 7;
            pub const RevertToParent: u32 = 2;
            pub const Success: u32 = 0;
            pub const BadRequest: u32 = 1;
            pub const BadValue: u32 = 2;
            pub const BadWindow: u32 = 3;
            pub const BadPixmap: u32 = 4;
            pub const BadAtom: u32 = 5;
            pub const BadCursor: u32 = 6;
            pub const BadFont: u32 = 7;
            pub const BadMatch: u32 = 8;
            pub const BadDrawable: u32 = 9;
            pub const BadAccess: u32 = 10;
            pub const BadAlloc: u32 = 11;
            pub const BadColor: u32 = 12;
            pub const BadGC: u32 = 13;
            pub const BadIDChoice: u32 = 14;
            pub const BadName: u32 = 15;
            pub const BadLength: u32 = 16;
            pub const BadImplementation: u32 = 17;
            pub const FirstExtensionError: u32 = 128;
            pub const LastExtensionError: u32 = 255;
            pub const InputOutput: u32 = 1;
            pub const InputOnly: u32 = 2;
            pub const CWBackPixmap: u32 = 1;
            pub const CWBackPixel: u32 = 2;
            pub const CWBorderPixmap: u32 = 4;
            pub const CWBorderPixel: u32 = 8;
            pub const CWBitGravity: u32 = 16;
            pub const CWWinGravity: u32 = 32;
            pub const CWBackingStore: u32 = 64;
            pub const CWBackingPlanes: u32 = 128;
            pub const CWBackingPixel: u32 = 256;
            pub const CWOverrideRedirect: u32 = 512;
            pub const CWSaveUnder: u32 = 1024;
            pub const CWEventMask: u32 = 2048;
            pub const CWDontPropagate: u32 = 4096;
            pub const CWColormap: u32 = 8192;
            pub const CWCursor: u32 = 16384;
            pub const CWX: u32 = 1;
            pub const CWY: u32 = 2;
            pub const CWWidth: u32 = 4;
            pub const CWHeight: u32 = 8;
            pub const CWBorderWidth: u32 = 16;
            pub const CWSibling: u32 = 32;
            pub const CWStackMode: u32 = 64;
            pub const ForgetGravity: u32 = 0;
            pub const NorthWestGravity: u32 = 1;
            pub const NorthGravity: u32 = 2;
            pub const NorthEastGravity: u32 = 3;
            pub const WestGravity: u32 = 4;
            pub const CenterGravity: u32 = 5;
            pub const EastGravity: u32 = 6;
            pub const SouthWestGravity: u32 = 7;
            pub const SouthGravity: u32 = 8;
            pub const SouthEastGravity: u32 = 9;
            pub const StaticGravity: u32 = 10;
            pub const UnmapGravity: u32 = 0;
            pub const NotUseful: u32 = 0;
            pub const WhenMapped: u32 = 1;
            pub const Always: u32 = 2;
            pub const IsUnmapped: u32 = 0;
            pub const IsUnviewable: u32 = 1;
            pub const IsViewable: u32 = 2;
            pub const SetModeInsert: u32 = 0;
            pub const SetModeDelete: u32 = 1;
            pub const DestroyAll: u32 = 0;
            pub const RetainPermanent: u32 = 1;
            pub const RetainTemporary: u32 = 2;
            pub const Above: u32 = 0;
            pub const Below: u32 = 1;
            pub const TopIf: u32 = 2;
            pub const BottomIf: u32 = 3;
            pub const Opposite: u32 = 4;
            pub const RaiseLowest: u32 = 0;
            pub const LowerHighest: u32 = 1;
            pub const PropModeReplace: u32 = 0;
            pub const PropModePrepend: u32 = 1;
            pub const PropModeAppend: u32 = 2;
            pub const GXclear: u32 = 0;
            pub const GXand: u32 = 1;
            pub const GXandReverse: u32 = 2;
            pub const GXcopy: u32 = 3;
            pub const GXandInverted: u32 = 4;
            pub const GXnoop: u32 = 5;
            pub const GXxor: u32 = 6;
            pub const GXor: u32 = 7;
            pub const GXnor: u32 = 8;
            pub const GXequiv: u32 = 9;
            pub const GXinvert: u32 = 10;
            pub const GXorReverse: u32 = 11;
            pub const GXcopyInverted: u32 = 12;
            pub const GXorInverted: u32 = 13;
            pub const GXnand: u32 = 14;
            pub const GXset: u32 = 15;
            pub const LineSolid: u32 = 0;
            pub const LineOnOffDash: u32 = 1;
            pub const LineDoubleDash: u32 = 2;
            pub const CapNotLast: u32 = 0;
            pub const CapButt: u32 = 1;
            pub const CapRound: u32 = 2;
            pub const CapProjecting: u32 = 3;
            pub const JoinMiter: u32 = 0;
            pub const JoinRound: u32 = 1;
            pub const JoinBevel: u32 = 2;
            pub const FillSolid: u32 = 0;
            pub const FillTiled: u32 = 1;
            pub const FillStippled: u32 = 2;
            pub const FillOpaqueStippled: u32 = 3;
            pub const EvenOddRule: u32 = 0;
            pub const WindingRule: u32 = 1;
            pub const ClipByChildren: u32 = 0;
            pub const IncludeInferiors: u32 = 1;
            pub const Unsorted: u32 = 0;
            pub const YSorted: u32 = 1;
            pub const YXSorted: u32 = 2;
            pub const YXBanded: u32 = 3;
            pub const CoordModeOrigin: u32 = 0;
            pub const CoordModePrevious: u32 = 1;
            pub const Complex: u32 = 0;
            pub const Nonconvex: u32 = 1;
            pub const Convex: u32 = 2;
            pub const ArcChord: u32 = 0;
            pub const ArcPieSlice: u32 = 1;
            pub const GCFunction: u32 = 1;
            pub const GCPlaneMask: u32 = 2;
            pub const GCForeground: u32 = 4;
            pub const GCBackground: u32 = 8;
            pub const GCLineWidth: u32 = 16;
            pub const GCLineStyle: u32 = 32;
            pub const GCCapStyle: u32 = 64;
            pub const GCJoinStyle: u32 = 128;
            pub const GCFillStyle: u32 = 256;
            pub const GCFillRule: u32 = 512;
            pub const GCTile: u32 = 1024;
            pub const GCStipple: u32 = 2048;
            pub const GCTileStipXOrigin: u32 = 4096;
            pub const GCTileStipYOrigin: u32 = 8192;
            pub const GCFont: u32 = 16384;
            pub const GCSubwindowMode: u32 = 32768;
            pub const GCGraphicsExposures: u32 = 65536;
            pub const GCClipXOrigin: u32 = 131072;
            pub const GCClipYOrigin: u32 = 262144;
            pub const GCClipMask: u32 = 524288;
            pub const GCDashOffset: u32 = 1048576;
            pub const GCDashList: u32 = 2097152;
            pub const GCArcMode: u32 = 4194304;
            pub const GCLastBit: u32 = 22;
            pub const FontLeftToRight: u32 = 0;
            pub const FontRightToLeft: u32 = 1;
            pub const FontChange: u32 = 255;
            pub const XYBitmap: u32 = 0;
            pub const XYPixmap: u32 = 1;
            pub const ZPixmap: u32 = 2;
            pub const AllocNone: u32 = 0;
            pub const AllocAll: u32 = 1;
            pub const DoRed: u32 = 1;
            pub const DoGreen: u32 = 2;
            pub const DoBlue: u32 = 4;
            pub const CursorShape: u32 = 0;
            pub const TileShape: u32 = 1;
            pub const StippleShape: u32 = 2;
            pub const AutoRepeatModeOff: u32 = 0;
            pub const AutoRepeatModeOn: u32 = 1;
            pub const AutoRepeatModeDefault: u32 = 2;
            pub const LedModeOff: u32 = 0;
            pub const LedModeOn: u32 = 1;
            pub const KBKeyClickPercent: u32 = 1;
            pub const KBBellPercent: u32 = 2;
            pub const KBBellPitch: u32 = 4;
            pub const KBBellDuration: u32 = 8;
            pub const KBLed: u32 = 16;
            pub const KBLedMode: u32 = 32;
            pub const KBKey: u32 = 64;
            pub const KBAutoRepeatMode: u32 = 128;
            pub const MappingSuccess: u32 = 0;
            pub const MappingBusy: u32 = 1;
            pub const MappingFailed: u32 = 2;
            pub const MappingModifier: u32 = 0;
            pub const MappingKeyboard: u32 = 1;
            pub const MappingPointer: u32 = 2;
            pub const DontPreferBlanking: u32 = 0;
            pub const PreferBlanking: u32 = 1;
            pub const DefaultBlanking: u32 = 2;
            pub const DisableScreenSaver: u32 = 0;
            pub const DisableScreenInterval: u32 = 0;
            pub const DontAllowExposures: u32 = 0;
            pub const AllowExposures: u32 = 1;
            pub const DefaultExposures: u32 = 2;
            pub const ScreenSaverReset: u32 = 0;
            pub const ScreenSaverActive: u32 = 1;
            pub const HostInsert: u32 = 0;
            pub const HostDelete: u32 = 1;
            pub const EnableAccess: u32 = 1;
            pub const DisableAccess: u32 = 0;
            pub const StaticGray: u32 = 0;
            pub const GrayScale: u32 = 1;
            pub const StaticColor: u32 = 2;
            pub const PseudoColor: u32 = 3;
            pub const TrueColor: u32 = 4;
            pub const DirectColor: u32 = 5;
            pub const LSBFirst: u32 = 0;
            pub const MSBFirst: u32 = 1;
            pub const NeedFunctionPrototypes: u32 = 1;
            pub const NeedVarargsPrototypes: u32 = 1;
            pub const NeedNestedPrototypes: u32 = 1;
            pub const FUNCPROTO: u32 = 15;
            pub const NeedWidePrototypes: u32 = 0;
            pub const X_HAVE_UTF8_STRING: u32 = 1;
            pub const True: u32 = 1;
            pub const False: u32 = 0;
            pub const QueuedAlready: u32 = 0;
            pub const QueuedAfterReading: u32 = 1;
            pub const QueuedAfterFlush: u32 = 2;
            pub const XNRequiredCharSet: &'static [u8; 16usize] = b"requiredCharSet\0";
            pub const XNQueryOrientation: &'static [u8; 17usize] = b"queryOrientation\0";
            pub const XNBaseFontName: &'static [u8; 13usize] = b"baseFontName\0";
            pub const XNOMAutomatic: &'static [u8; 12usize] = b"omAutomatic\0";
            pub const XNMissingCharSet: &'static [u8; 15usize] = b"missingCharSet\0";
            pub const XNDefaultString: &'static [u8; 14usize] = b"defaultString\0";
            pub const XNOrientation: &'static [u8; 12usize] = b"orientation\0";
            pub const XNDirectionalDependentDrawing: &'static [u8; 28usize] =
                b"directionalDependentDrawing\0";
            pub const XNContextualDrawing: &'static [u8; 18usize] = b"contextualDrawing\0";
            pub const XNFontInfo: &'static [u8; 9usize] = b"fontInfo\0";
            pub const XIMPreeditArea: u32 = 1;
            pub const XIMPreeditCallbacks: u32 = 2;
            pub const XIMPreeditPosition: u32 = 4;
            pub const XIMPreeditNothing: u32 = 8;
            pub const XIMPreeditNone: u32 = 16;
            pub const XIMStatusArea: u32 = 256;
            pub const XIMStatusCallbacks: u32 = 512;
            pub const XIMStatusNothing: u32 = 1024;
            pub const XIMStatusNone: u32 = 2048;
            pub const XNVaNestedList: &'static [u8; 15usize] = b"XNVaNestedList\0";
            pub const XNQueryInputStyle: &'static [u8; 16usize] = b"queryInputStyle\0";
            pub const XNClientWindow: &'static [u8; 13usize] = b"clientWindow\0";
            pub const XNInputStyle: &'static [u8; 11usize] = b"inputStyle\0";
            pub const XNFocusWindow: &'static [u8; 12usize] = b"focusWindow\0";
            pub const XNResourceName: &'static [u8; 13usize] = b"resourceName\0";
            pub const XNResourceClass: &'static [u8; 14usize] = b"resourceClass\0";
            pub const XNGeometryCallback: &'static [u8; 17usize] = b"geometryCallback\0";
            pub const XNDestroyCallback: &'static [u8; 16usize] = b"destroyCallback\0";
            pub const XNFilterEvents: &'static [u8; 13usize] = b"filterEvents\0";
            pub const XNPreeditStartCallback: &'static [u8; 21usize] = b"preeditStartCallback\0";
            pub const XNPreeditDoneCallback: &'static [u8; 20usize] = b"preeditDoneCallback\0";
            pub const XNPreeditDrawCallback: &'static [u8; 20usize] = b"preeditDrawCallback\0";
            pub const XNPreeditCaretCallback: &'static [u8; 21usize] = b"preeditCaretCallback\0";
            pub const XNPreeditStateNotifyCallback: &'static [u8; 27usize] =
                b"preeditStateNotifyCallback\0";
            pub const XNPreeditAttributes: &'static [u8; 18usize] = b"preeditAttributes\0";
            pub const XNStatusStartCallback: &'static [u8; 20usize] = b"statusStartCallback\0";
            pub const XNStatusDoneCallback: &'static [u8; 19usize] = b"statusDoneCallback\0";
            pub const XNStatusDrawCallback: &'static [u8; 19usize] = b"statusDrawCallback\0";
            pub const XNStatusAttributes: &'static [u8; 17usize] = b"statusAttributes\0";
            pub const XNArea: &'static [u8; 5usize] = b"area\0";
            pub const XNAreaNeeded: &'static [u8; 11usize] = b"areaNeeded\0";
            pub const XNSpotLocation: &'static [u8; 13usize] = b"spotLocation\0";
            pub const XNColormap: &'static [u8; 9usize] = b"colorMap\0";
            pub const XNStdColormap: &'static [u8; 12usize] = b"stdColorMap\0";
            pub const XNForeground: &'static [u8; 11usize] = b"foreground\0";
            pub const XNBackground: &'static [u8; 11usize] = b"background\0";
            pub const XNBackgroundPixmap: &'static [u8; 17usize] = b"backgroundPixmap\0";
            pub const XNFontSet: &'static [u8; 8usize] = b"fontSet\0";
            pub const XNLineSpace: &'static [u8; 10usize] = b"lineSpace\0";
            pub const XNCursor: &'static [u8; 7usize] = b"cursor\0";
            pub const XNQueryIMValuesList: &'static [u8; 18usize] = b"queryIMValuesList\0";
            pub const XNQueryICValuesList: &'static [u8; 18usize] = b"queryICValuesList\0";
            pub const XNVisiblePosition: &'static [u8; 16usize] = b"visiblePosition\0";
            pub const XNR6PreeditCallback: &'static [u8; 18usize] = b"r6PreeditCallback\0";
            pub const XNStringConversionCallback: &'static [u8; 25usize] =
                b"stringConversionCallback\0";
            pub const XNStringConversion: &'static [u8; 17usize] = b"stringConversion\0";
            pub const XNResetState: &'static [u8; 11usize] = b"resetState\0";
            pub const XNHotKey: &'static [u8; 7usize] = b"hotKey\0";
            pub const XNHotKeyState: &'static [u8; 12usize] = b"hotKeyState\0";
            pub const XNPreeditState: &'static [u8; 13usize] = b"preeditState\0";
            pub const XNSeparatorofNestedList: &'static [u8; 22usize] = b"separatorofNestedList\0";
            pub const XBufferOverflow: i32 = -1;
            pub const XLookupNone: u32 = 1;
            pub const XLookupChars: u32 = 2;
            pub const XLookupKeySym: u32 = 3;
            pub const XLookupBoth: u32 = 4;
            pub const XIMReverse: u32 = 1;
            pub const XIMUnderline: u32 = 2;
            pub const XIMHighlight: u32 = 4;
            pub const XIMPrimary: u32 = 32;
            pub const XIMSecondary: u32 = 64;
            pub const XIMTertiary: u32 = 128;
            pub const XIMVisibleToForward: u32 = 256;
            pub const XIMVisibleToBackword: u32 = 512;
            pub const XIMVisibleToCenter: u32 = 1024;
            pub const XIMPreeditUnKnown: u32 = 0;
            pub const XIMPreeditEnable: u32 = 1;
            pub const XIMPreeditDisable: u32 = 2;
            pub const XIMInitialState: u32 = 1;
            pub const XIMPreserveState: u32 = 2;
            pub const XIMStringConversionLeftEdge: u32 = 1;
            pub const XIMStringConversionRightEdge: u32 = 2;
            pub const XIMStringConversionTopEdge: u32 = 4;
            pub const XIMStringConversionBottomEdge: u32 = 8;
            pub const XIMStringConversionConcealed: u32 = 16;
            pub const XIMStringConversionWrapped: u32 = 32;
            pub const XIMStringConversionBuffer: u32 = 1;
            pub const XIMStringConversionLine: u32 = 2;
            pub const XIMStringConversionWord: u32 = 3;
            pub const XIMStringConversionChar: u32 = 4;
            pub const XIMStringConversionSubstitution: u32 = 1;
            pub const XIMStringConversionRetrieval: u32 = 2;
            pub const XIMHotKeyStateON: u32 = 1;
            pub const XIMHotKeyStateOFF: u32 = 2;
            pub type __u_char = ::std::os::raw::c_uchar;
            pub type __u_short = ::std::os::raw::c_ushort;
            pub type __u_int = ::std::os::raw::c_uint;
            pub type __u_long = ::std::os::raw::c_ulong;
            pub type __int8_t = ::std::os::raw::c_schar;
            pub type __uint8_t = ::std::os::raw::c_uchar;
            pub type __int16_t = ::std::os::raw::c_short;
            pub type __uint16_t = ::std::os::raw::c_ushort;
            pub type __int32_t = ::std::os::raw::c_int;
            pub type __uint32_t = ::std::os::raw::c_uint;
            pub type __int64_t = ::std::os::raw::c_long;
            pub type __uint64_t = ::std::os::raw::c_ulong;
            pub type __int_least8_t = __int8_t;
            pub type __uint_least8_t = __uint8_t;
            pub type __int_least16_t = __int16_t;
            pub type __uint_least16_t = __uint16_t;
            pub type __int_least32_t = __int32_t;
            pub type __uint_least32_t = __uint32_t;
            pub type __int_least64_t = __int64_t;
            pub type __uint_least64_t = __uint64_t;
            pub type __quad_t = ::std::os::raw::c_long;
            pub type __u_quad_t = ::std::os::raw::c_ulong;
            pub type __intmax_t = ::std::os::raw::c_long;
            pub type __uintmax_t = ::std::os::raw::c_ulong;
            pub type __dev_t = ::std::os::raw::c_ulong;
            pub type __uid_t = ::std::os::raw::c_uint;
            pub type __gid_t = ::std::os::raw::c_uint;
            pub type __ino_t = ::std::os::raw::c_ulong;
            pub type __ino64_t = ::std::os::raw::c_ulong;
            pub type __mode_t = ::std::os::raw::c_uint;
            pub type __nlink_t = ::std::os::raw::c_ulong;
            pub type __off_t = ::std::os::raw::c_long;
            pub type __off64_t = ::std::os::raw::c_long;
            pub type __pid_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub struct __fsid_t {
                pub __val: [::std::os::raw::c_int; 2usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __fsid_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __fsid_t {
                            __val: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__fsid_t");
                            let _ = debug_trait_builder.field("__val", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __fsid_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __fsid_t {
                #[inline]
                fn clone(&self) -> __fsid_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_int; 2usize]>;
                        *self
                    }
                }
            }
            pub type __clock_t = ::std::os::raw::c_long;
            pub type __rlim_t = ::std::os::raw::c_ulong;
            pub type __rlim64_t = ::std::os::raw::c_ulong;
            pub type __id_t = ::std::os::raw::c_uint;
            pub type __time_t = ::std::os::raw::c_long;
            pub type __useconds_t = ::std::os::raw::c_uint;
            pub type __suseconds_t = ::std::os::raw::c_long;
            pub type __daddr_t = ::std::os::raw::c_int;
            pub type __key_t = ::std::os::raw::c_int;
            pub type __clockid_t = ::std::os::raw::c_int;
            pub type __timer_t = *mut ::std::os::raw::c_void;
            pub type __blksize_t = ::std::os::raw::c_long;
            pub type __blkcnt_t = ::std::os::raw::c_long;
            pub type __blkcnt64_t = ::std::os::raw::c_long;
            pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
            pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
            pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
            pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
            pub type __fsword_t = ::std::os::raw::c_long;
            pub type __ssize_t = ::std::os::raw::c_long;
            pub type __syscall_slong_t = ::std::os::raw::c_long;
            pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
            pub type __loff_t = __off64_t;
            pub type __caddr_t = *mut ::std::os::raw::c_char;
            pub type __intptr_t = ::std::os::raw::c_long;
            pub type __socklen_t = ::std::os::raw::c_uint;
            pub type __sig_atomic_t = ::std::os::raw::c_int;
            pub type u_char = __u_char;
            pub type u_short = __u_short;
            pub type u_int = __u_int;
            pub type u_long = __u_long;
            pub type quad_t = __quad_t;
            pub type u_quad_t = __u_quad_t;
            pub type fsid_t = __fsid_t;
            pub type loff_t = __loff_t;
            pub type ino_t = __ino_t;
            pub type dev_t = __dev_t;
            pub type gid_t = __gid_t;
            pub type mode_t = __mode_t;
            pub type nlink_t = __nlink_t;
            pub type uid_t = __uid_t;
            pub type off_t = __off_t;
            pub type pid_t = __pid_t;
            pub type id_t = __id_t;
            pub type ssize_t = __ssize_t;
            pub type daddr_t = __daddr_t;
            pub type caddr_t = __caddr_t;
            pub type key_t = __key_t;
            pub type clock_t = __clock_t;
            pub type clockid_t = __clockid_t;
            pub type time_t = __time_t;
            pub type timer_t = __timer_t;
            pub type size_t = ::std::os::raw::c_ulong;
            pub type ulong = ::std::os::raw::c_ulong;
            pub type ushort = ::std::os::raw::c_ushort;
            pub type uint = ::std::os::raw::c_uint;
            pub type u_int8_t = __uint8_t;
            pub type u_int16_t = __uint16_t;
            pub type u_int32_t = __uint32_t;
            pub type u_int64_t = __uint64_t;
            pub type register_t = ::std::os::raw::c_long;
            #[repr(C)]
            pub struct __sigset_t {
                pub __val: [::std::os::raw::c_ulong; 16usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __sigset_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __sigset_t {
                            __val: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__sigset_t");
                            let _ = debug_trait_builder.field("__val", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __sigset_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __sigset_t {
                #[inline]
                fn clone(&self) -> __sigset_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_ulong; 16usize],
                        >;
                        *self
                    }
                }
            }
            pub type sigset_t = __sigset_t;
            #[repr(C)]
            pub struct timeval {
                pub tv_sec: __time_t,
                pub tv_usec: __suseconds_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for timeval {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        timeval {
                            tv_sec: ref __self_0_0,
                            tv_usec: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("timeval");
                            let _ = debug_trait_builder.field("tv_sec", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("tv_usec", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for timeval {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for timeval {
                #[inline]
                fn clone(&self) -> timeval {
                    {
                        let _: ::core::clone::AssertParamIsClone<__time_t>;
                        let _: ::core::clone::AssertParamIsClone<__suseconds_t>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct timespec {
                pub tv_sec: __time_t,
                pub tv_nsec: __syscall_slong_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for timespec {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        timespec {
                            tv_sec: ref __self_0_0,
                            tv_nsec: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("timespec");
                            let _ = debug_trait_builder.field("tv_sec", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("tv_nsec", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for timespec {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for timespec {
                #[inline]
                fn clone(&self) -> timespec {
                    {
                        let _: ::core::clone::AssertParamIsClone<__time_t>;
                        let _: ::core::clone::AssertParamIsClone<__syscall_slong_t>;
                        *self
                    }
                }
            }
            pub type suseconds_t = __suseconds_t;
            pub type __fd_mask = ::std::os::raw::c_long;
            #[repr(C)]
            pub struct fd_set {
                pub __fds_bits: [__fd_mask; 16usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for fd_set {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        fd_set {
                            __fds_bits: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("fd_set");
                            let _ = debug_trait_builder.field("__fds_bits", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for fd_set {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for fd_set {
                #[inline]
                fn clone(&self) -> fd_set {
                    {
                        let _: ::core::clone::AssertParamIsClone<[__fd_mask; 16usize]>;
                        *self
                    }
                }
            }
            pub type fd_mask = __fd_mask;
            extern "C" {
                pub fn select(
                    __nfds: ::std::os::raw::c_int,
                    __readfds: *mut fd_set,
                    __writefds: *mut fd_set,
                    __exceptfds: *mut fd_set,
                    __timeout: *mut timeval,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn pselect(
                    __nfds: ::std::os::raw::c_int,
                    __readfds: *mut fd_set,
                    __writefds: *mut fd_set,
                    __exceptfds: *mut fd_set,
                    __timeout: *const timespec,
                    __sigmask: *const __sigset_t,
                ) -> ::std::os::raw::c_int;
            }
            pub type blksize_t = __blksize_t;
            pub type blkcnt_t = __blkcnt_t;
            pub type fsblkcnt_t = __fsblkcnt_t;
            pub type fsfilcnt_t = __fsfilcnt_t;
            #[repr(C)]
            pub struct __pthread_internal_list {
                pub __prev: *mut __pthread_internal_list,
                pub __next: *mut __pthread_internal_list,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_internal_list {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_internal_list {
                            __prev: ref __self_0_0,
                            __next: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_internal_list");
                            let _ = debug_trait_builder.field("__prev", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__next", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_internal_list {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_internal_list {
                #[inline]
                fn clone(&self) -> __pthread_internal_list {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_list>;
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_list>;
                        *self
                    }
                }
            }
            pub type __pthread_list_t = __pthread_internal_list;
            #[repr(C)]
            pub struct __pthread_internal_slist {
                pub __next: *mut __pthread_internal_slist,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_internal_slist {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_internal_slist {
                            __next: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_internal_slist");
                            let _ = debug_trait_builder.field("__next", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_internal_slist {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_internal_slist {
                #[inline]
                fn clone(&self) -> __pthread_internal_slist {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_slist>;
                        *self
                    }
                }
            }
            pub type __pthread_slist_t = __pthread_internal_slist;
            #[repr(C)]
            pub struct __pthread_mutex_s {
                pub __lock: ::std::os::raw::c_int,
                pub __count: ::std::os::raw::c_uint,
                pub __owner: ::std::os::raw::c_int,
                pub __nusers: ::std::os::raw::c_uint,
                pub __kind: ::std::os::raw::c_int,
                pub __spins: ::std::os::raw::c_short,
                pub __elision: ::std::os::raw::c_short,
                pub __list: __pthread_list_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_mutex_s {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_mutex_s {
                            __lock: ref __self_0_0,
                            __count: ref __self_0_1,
                            __owner: ref __self_0_2,
                            __nusers: ref __self_0_3,
                            __kind: ref __self_0_4,
                            __spins: ref __self_0_5,
                            __elision: ref __self_0_6,
                            __list: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_mutex_s");
                            let _ = debug_trait_builder.field("__lock", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__count", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("__owner", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("__nusers", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("__kind", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("__spins", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("__elision", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("__list", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_mutex_s {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_mutex_s {
                #[inline]
                fn clone(&self) -> __pthread_mutex_s {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<__pthread_list_t>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_rwlock_arch_t {
                pub __readers: ::std::os::raw::c_uint,
                pub __writers: ::std::os::raw::c_uint,
                pub __wrphase_futex: ::std::os::raw::c_uint,
                pub __writers_futex: ::std::os::raw::c_uint,
                pub __pad3: ::std::os::raw::c_uint,
                pub __pad4: ::std::os::raw::c_uint,
                pub __cur_writer: ::std::os::raw::c_int,
                pub __shared: ::std::os::raw::c_int,
                pub __rwelision: ::std::os::raw::c_schar,
                pub __pad1: [::std::os::raw::c_uchar; 7usize],
                pub __pad2: ::std::os::raw::c_ulong,
                pub __flags: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_rwlock_arch_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_rwlock_arch_t {
                            __readers: ref __self_0_0,
                            __writers: ref __self_0_1,
                            __wrphase_futex: ref __self_0_2,
                            __writers_futex: ref __self_0_3,
                            __pad3: ref __self_0_4,
                            __pad4: ref __self_0_5,
                            __cur_writer: ref __self_0_6,
                            __shared: ref __self_0_7,
                            __rwelision: ref __self_0_8,
                            __pad1: ref __self_0_9,
                            __pad2: ref __self_0_10,
                            __flags: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_rwlock_arch_t");
                            let _ = debug_trait_builder.field("__readers", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__writers", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("__wrphase_futex", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("__writers_futex", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("__pad3", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("__pad4", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("__cur_writer", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("__shared", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("__rwelision", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("__pad1", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("__pad2", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("__flags", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_rwlock_arch_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_rwlock_arch_t {
                #[inline]
                fn clone(&self) -> __pthread_rwlock_arch_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_schar>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_uchar; 7usize],
                        >;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s {
                pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
                pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
                pub __g_refs: [::std::os::raw::c_uint; 2usize],
                pub __g_size: [::std::os::raw::c_uint; 2usize],
                pub __g1_orig_size: ::std::os::raw::c_uint,
                pub __wrefs: ::std::os::raw::c_uint,
                pub __g_signals: [::std::os::raw::c_uint; 2usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s {
                #[inline]
                fn clone(&self) -> __pthread_cond_s {
                    {
                        let _: ::core::clone::AssertParamIsClone<__pthread_cond_s__bindgen_ty_1>;
                        let _: ::core::clone::AssertParamIsClone<__pthread_cond_s__bindgen_ty_2>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union __pthread_cond_s__bindgen_ty_1 {
                pub __wseq: ::std::os::raw::c_ulonglong,
                pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                pub __low: ::std::os::raw::c_uint,
                pub __high: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                            __low: ref __self_0_0,
                            __high: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_cond_s__bindgen_ty_1__bindgen_ty_1");
                            let _ = debug_trait_builder.field("__low", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__high", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union __pthread_cond_s__bindgen_ty_2 {
                pub __g1_start: ::std::os::raw::c_ulonglong,
                pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_2 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_2 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_2 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                pub __low: ::std::os::raw::c_uint,
                pub __high: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                            __low: ref __self_0_0,
                            __high: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_cond_s__bindgen_ty_2__bindgen_ty_1");
                            let _ = debug_trait_builder.field("__low", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__high", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            pub type pthread_t = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub union pthread_mutexattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_mutexattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_mutexattr_t {
                #[inline]
                fn clone(&self) -> pthread_mutexattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_condattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_condattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_condattr_t {
                #[inline]
                fn clone(&self) -> pthread_condattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type pthread_key_t = ::std::os::raw::c_uint;
            pub type pthread_once_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub union pthread_attr_t {
                pub __size: [::std::os::raw::c_char; 56usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 7usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_attr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_attr_t {
                #[inline]
                fn clone(&self) -> pthread_attr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_mutex_t {
                pub __data: __pthread_mutex_s,
                pub __size: [::std::os::raw::c_char; 40usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 5usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_mutex_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_mutex_t {
                #[inline]
                fn clone(&self) -> pthread_mutex_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_cond_t {
                pub __data: __pthread_cond_s,
                pub __size: [::std::os::raw::c_char; 48usize],
                pub __align: ::std::os::raw::c_longlong,
                _bindgen_union_align: [u64; 6usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_cond_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_cond_t {
                #[inline]
                fn clone(&self) -> pthread_cond_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_rwlock_t {
                pub __data: __pthread_rwlock_arch_t,
                pub __size: [::std::os::raw::c_char; 56usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 7usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_rwlock_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_rwlock_t {
                #[inline]
                fn clone(&self) -> pthread_rwlock_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_rwlockattr_t {
                pub __size: [::std::os::raw::c_char; 8usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_rwlockattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_rwlockattr_t {
                #[inline]
                fn clone(&self) -> pthread_rwlockattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type pthread_spinlock_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub union pthread_barrier_t {
                pub __size: [::std::os::raw::c_char; 32usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 4usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_barrier_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_barrier_t {
                #[inline]
                fn clone(&self) -> pthread_barrier_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_barrierattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_barrierattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_barrierattr_t {
                #[inline]
                fn clone(&self) -> pthread_barrierattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct stat {
                pub st_dev: __dev_t,
                pub st_ino: __ino_t,
                pub st_nlink: __nlink_t,
                pub st_mode: __mode_t,
                pub st_uid: __uid_t,
                pub st_gid: __gid_t,
                pub __pad0: ::std::os::raw::c_int,
                pub st_rdev: __dev_t,
                pub st_size: __off_t,
                pub st_blksize: __blksize_t,
                pub st_blocks: __blkcnt_t,
                pub st_atim: timespec,
                pub st_mtim: timespec,
                pub st_ctim: timespec,
                pub __glibc_reserved: [__syscall_slong_t; 3usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for stat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        stat {
                            st_dev: ref __self_0_0,
                            st_ino: ref __self_0_1,
                            st_nlink: ref __self_0_2,
                            st_mode: ref __self_0_3,
                            st_uid: ref __self_0_4,
                            st_gid: ref __self_0_5,
                            __pad0: ref __self_0_6,
                            st_rdev: ref __self_0_7,
                            st_size: ref __self_0_8,
                            st_blksize: ref __self_0_9,
                            st_blocks: ref __self_0_10,
                            st_atim: ref __self_0_11,
                            st_mtim: ref __self_0_12,
                            st_ctim: ref __self_0_13,
                            __glibc_reserved: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("stat");
                            let _ = debug_trait_builder.field("st_dev", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("st_ino", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("st_nlink", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("st_mode", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("st_uid", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("st_gid", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("__pad0", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("st_rdev", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("st_size", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("st_blksize", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("st_blocks", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("st_atim", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("st_mtim", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("st_ctim", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("__glibc_reserved", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for stat {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for stat {
                #[inline]
                fn clone(&self) -> stat {
                    {
                        let _: ::core::clone::AssertParamIsClone<__dev_t>;
                        let _: ::core::clone::AssertParamIsClone<__ino_t>;
                        let _: ::core::clone::AssertParamIsClone<__nlink_t>;
                        let _: ::core::clone::AssertParamIsClone<__mode_t>;
                        let _: ::core::clone::AssertParamIsClone<__uid_t>;
                        let _: ::core::clone::AssertParamIsClone<__gid_t>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<__dev_t>;
                        let _: ::core::clone::AssertParamIsClone<__off_t>;
                        let _: ::core::clone::AssertParamIsClone<__blksize_t>;
                        let _: ::core::clone::AssertParamIsClone<__blkcnt_t>;
                        let _: ::core::clone::AssertParamIsClone<timespec>;
                        let _: ::core::clone::AssertParamIsClone<timespec>;
                        let _: ::core::clone::AssertParamIsClone<timespec>;
                        let _: ::core::clone::AssertParamIsClone<[__syscall_slong_t; 3usize]>;
                        *self
                    }
                }
            }
            extern "C" {
                pub fn stat(
                    __file: *const ::std::os::raw::c_char,
                    __buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn fstat(
                    __fd: ::std::os::raw::c_int,
                    __buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn fstatat(
                    __fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char,
                    __buf: *mut stat,
                    __flag: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn lstat(
                    __file: *const ::std::os::raw::c_char,
                    __buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn chmod(
                    __file: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn lchmod(
                    __file: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn fchmod(
                    __fd: ::std::os::raw::c_int,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn fchmodat(
                    __fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                    __flag: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn umask(__mask: __mode_t) -> __mode_t;
            }
            extern "C" {
                pub fn mkdir(
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn mkdirat(
                    __fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn mknod(
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                    __dev: __dev_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn mknodat(
                    __fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                    __dev: __dev_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn mkfifo(
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn mkfifoat(
                    __fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn utimensat(
                    __fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __times: *const timespec,
                    __flags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn futimens(
                    __fd: ::std::os::raw::c_int,
                    __times: *const timespec,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __fxstat(
                    __ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int,
                    __stat_buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __xstat(
                    __ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __lxstat(
                    __ver: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __fxstatat(
                    __ver: ::std::os::raw::c_int,
                    __fildes: ::std::os::raw::c_int,
                    __filename: *const ::std::os::raw::c_char,
                    __stat_buf: *mut stat,
                    __flag: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __xmknod(
                    __ver: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                    __dev: *mut __dev_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn __xmknodat(
                    __ver: ::std::os::raw::c_int,
                    __fd: ::std::os::raw::c_int,
                    __path: *const ::std::os::raw::c_char,
                    __mode: __mode_t,
                    __dev: *mut __dev_t,
                ) -> ::std::os::raw::c_int;
            }
            pub type va_list = __builtin_va_list;
            pub type __gnuc_va_list = __builtin_va_list;
            pub type FcChar8 = ::std::os::raw::c_uchar;
            pub type FcChar16 = ::std::os::raw::c_ushort;
            pub type FcChar32 = ::std::os::raw::c_uint;
            pub type FcBool = ::std::os::raw::c_int;
            pub const _FcType_FcTypeUnknown: _FcType = -1;
            pub const _FcType_FcTypeVoid: _FcType = 0;
            pub const _FcType_FcTypeInteger: _FcType = 1;
            pub const _FcType_FcTypeDouble: _FcType = 2;
            pub const _FcType_FcTypeString: _FcType = 3;
            pub const _FcType_FcTypeBool: _FcType = 4;
            pub const _FcType_FcTypeMatrix: _FcType = 5;
            pub const _FcType_FcTypeCharSet: _FcType = 6;
            pub const _FcType_FcTypeFTFace: _FcType = 7;
            pub const _FcType_FcTypeLangSet: _FcType = 8;
            pub const _FcType_FcTypeRange: _FcType = 9;
            pub type _FcType = i32;
            pub use self::_FcType as FcType;
            #[repr(C)]
            pub struct _FcMatrix {
                pub xx: f64,
                pub xy: f64,
                pub yx: f64,
                pub yy: f64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcMatrix {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcMatrix {
                            xx: ref __self_0_0,
                            xy: ref __self_0_1,
                            yx: ref __self_0_2,
                            yy: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcMatrix");
                            let _ = debug_trait_builder.field("xx", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("xy", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("yx", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("yy", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcMatrix {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcMatrix {
                #[inline]
                fn clone(&self) -> _FcMatrix {
                    {
                        let _: ::core::clone::AssertParamIsClone<f64>;
                        let _: ::core::clone::AssertParamIsClone<f64>;
                        let _: ::core::clone::AssertParamIsClone<f64>;
                        let _: ::core::clone::AssertParamIsClone<f64>;
                        *self
                    }
                }
            }
            pub type FcMatrix = _FcMatrix;
            #[repr(C)]
            pub struct _FcCharSet {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcCharSet {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcCharSet {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcCharSet");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcCharSet {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcCharSet {
                #[inline]
                fn clone(&self) -> _FcCharSet {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcCharSet = _FcCharSet;
            #[repr(C)]
            pub struct _FcObjectType {
                pub object: *mut ::std::os::raw::c_char,
                pub type_: FcType,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcObjectType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcObjectType {
                            object: ref __self_0_0,
                            type_: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcObjectType");
                            let _ = debug_trait_builder.field("object", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcObjectType {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcObjectType {
                #[inline]
                fn clone(&self) -> _FcObjectType {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<FcType>;
                        *self
                    }
                }
            }
            pub type FcObjectType = _FcObjectType;
            #[repr(C)]
            pub struct _FcConstant {
                pub name: *const FcChar8,
                pub object: *const ::std::os::raw::c_char,
                pub value: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcConstant {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcConstant {
                            name: ref __self_0_0,
                            object: ref __self_0_1,
                            value: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcConstant");
                            let _ = debug_trait_builder.field("name", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("object", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("value", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcConstant {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcConstant {
                #[inline]
                fn clone(&self) -> _FcConstant {
                    {
                        let _: ::core::clone::AssertParamIsClone<*const FcChar8>;
                        let _: ::core::clone::AssertParamIsClone<*const ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type FcConstant = _FcConstant;
            pub const _FcResult_FcResultMatch: _FcResult = 0;
            pub const _FcResult_FcResultNoMatch: _FcResult = 1;
            pub const _FcResult_FcResultTypeMismatch: _FcResult = 2;
            pub const _FcResult_FcResultNoId: _FcResult = 3;
            pub const _FcResult_FcResultOutOfMemory: _FcResult = 4;
            pub type _FcResult = u32;
            pub use self::_FcResult as FcResult;
            pub const _FcValueBinding_FcValueBindingWeak: _FcValueBinding = 0;
            pub const _FcValueBinding_FcValueBindingStrong: _FcValueBinding = 1;
            pub const _FcValueBinding_FcValueBindingSame: _FcValueBinding = 2;
            pub const _FcValueBinding_FcValueBindingEnd: _FcValueBinding = 2147483647;
            pub type _FcValueBinding = u32;
            pub use self::_FcValueBinding as FcValueBinding;
            #[repr(C)]
            pub struct _FcPattern {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcPattern {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcPattern {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcPattern");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcPattern {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcPattern {
                #[inline]
                fn clone(&self) -> _FcPattern {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcPattern = _FcPattern;
            #[repr(C)]
            pub struct _FcPatternIter {
                pub dummy1: *mut ::std::os::raw::c_void,
                pub dummy2: *mut ::std::os::raw::c_void,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcPatternIter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcPatternIter {
                            dummy1: ref __self_0_0,
                            dummy2: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcPatternIter");
                            let _ = debug_trait_builder.field("dummy1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("dummy2", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcPatternIter {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcPatternIter {
                #[inline]
                fn clone(&self) -> _FcPatternIter {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        *self
                    }
                }
            }
            pub type FcPatternIter = _FcPatternIter;
            #[repr(C)]
            pub struct _FcLangSet {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcLangSet {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcLangSet {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcLangSet");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcLangSet {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcLangSet {
                #[inline]
                fn clone(&self) -> _FcLangSet {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcLangSet = _FcLangSet;
            #[repr(C)]
            pub struct _FcRange {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcRange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcRange {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcRange");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcRange {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcRange {
                #[inline]
                fn clone(&self) -> _FcRange {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcRange = _FcRange;
            #[repr(C)]
            pub struct _FcValue {
                pub type_: FcType,
                pub u: _FcValue__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcValue {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcValue {
                #[inline]
                fn clone(&self) -> _FcValue {
                    {
                        let _: ::core::clone::AssertParamIsClone<FcType>;
                        let _: ::core::clone::AssertParamIsClone<_FcValue__bindgen_ty_1>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _FcValue__bindgen_ty_1 {
                pub s: *const FcChar8,
                pub i: ::std::os::raw::c_int,
                pub b: FcBool,
                pub d: f64,
                pub m: *const FcMatrix,
                pub c: *const FcCharSet,
                pub f: *mut ::std::os::raw::c_void,
                pub l: *const FcLangSet,
                pub r: *const FcRange,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcValue__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcValue__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _FcValue__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type FcValue = _FcValue;
            #[repr(C)]
            pub struct _FcFontSet {
                pub nfont: ::std::os::raw::c_int,
                pub sfont: ::std::os::raw::c_int,
                pub fonts: *mut *mut FcPattern,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcFontSet {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcFontSet {
                            nfont: ref __self_0_0,
                            sfont: ref __self_0_1,
                            fonts: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcFontSet");
                            let _ = debug_trait_builder.field("nfont", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("sfont", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("fonts", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcFontSet {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcFontSet {
                #[inline]
                fn clone(&self) -> _FcFontSet {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut FcPattern>;
                        *self
                    }
                }
            }
            pub type FcFontSet = _FcFontSet;
            #[repr(C)]
            pub struct _FcObjectSet {
                pub nobject: ::std::os::raw::c_int,
                pub sobject: ::std::os::raw::c_int,
                pub objects: *mut *const ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcObjectSet {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcObjectSet {
                            nobject: ref __self_0_0,
                            sobject: ref __self_0_1,
                            objects: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcObjectSet");
                            let _ = debug_trait_builder.field("nobject", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("sobject", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("objects", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcObjectSet {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcObjectSet {
                #[inline]
                fn clone(&self) -> _FcObjectSet {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            *mut *const ::std::os::raw::c_char,
                        >;
                        *self
                    }
                }
            }
            pub type FcObjectSet = _FcObjectSet;
            pub const _FcMatchKind_FcMatchPattern: _FcMatchKind = 0;
            pub const _FcMatchKind_FcMatchFont: _FcMatchKind = 1;
            pub const _FcMatchKind_FcMatchScan: _FcMatchKind = 2;
            pub const _FcMatchKind_FcMatchKindEnd: _FcMatchKind = 3;
            pub const _FcMatchKind_FcMatchKindBegin: _FcMatchKind = 0;
            pub type _FcMatchKind = u32;
            pub use self::_FcMatchKind as FcMatchKind;
            pub const _FcLangResult_FcLangEqual: _FcLangResult = 0;
            pub const _FcLangResult_FcLangDifferentCountry: _FcLangResult = 1;
            pub const _FcLangResult_FcLangDifferentTerritory: _FcLangResult = 1;
            pub const _FcLangResult_FcLangDifferentLang: _FcLangResult = 2;
            pub type _FcLangResult = u32;
            pub use self::_FcLangResult as FcLangResult;
            pub const _FcSetName_FcSetSystem: _FcSetName = 0;
            pub const _FcSetName_FcSetApplication: _FcSetName = 1;
            pub type _FcSetName = u32;
            pub use self::_FcSetName as FcSetName;
            #[repr(C)]
            pub struct _FcConfigFileInfoIter {
                pub dummy1: *mut ::std::os::raw::c_void,
                pub dummy2: *mut ::std::os::raw::c_void,
                pub dummy3: *mut ::std::os::raw::c_void,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcConfigFileInfoIter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcConfigFileInfoIter {
                            dummy1: ref __self_0_0,
                            dummy2: ref __self_0_1,
                            dummy3: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcConfigFileInfoIter");
                            let _ = debug_trait_builder.field("dummy1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("dummy2", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("dummy3", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcConfigFileInfoIter {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcConfigFileInfoIter {
                #[inline]
                fn clone(&self) -> _FcConfigFileInfoIter {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        *self
                    }
                }
            }
            pub type FcConfigFileInfoIter = _FcConfigFileInfoIter;
            #[repr(C)]
            pub struct _FcAtomic {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcAtomic {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcAtomic {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcAtomic");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcAtomic {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcAtomic {
                #[inline]
                fn clone(&self) -> _FcAtomic {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcAtomic = _FcAtomic;
            pub const FcEndian_FcEndianBig: FcEndian = 0;
            pub const FcEndian_FcEndianLittle: FcEndian = 1;
            pub type FcEndian = u32;
            #[repr(C)]
            pub struct _FcConfig {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcConfig {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcConfig {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcConfig");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcConfig {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcConfig {
                #[inline]
                fn clone(&self) -> _FcConfig {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcConfig = _FcConfig;
            #[repr(C)]
            pub struct _FcGlobalCache {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcGlobalCache {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcGlobalCache {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcGlobalCache");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcGlobalCache {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcGlobalCache {
                #[inline]
                fn clone(&self) -> _FcGlobalCache {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcFileCache = _FcGlobalCache;
            #[repr(C)]
            pub struct _FcBlanks {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcBlanks {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcBlanks {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcBlanks");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcBlanks {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcBlanks {
                #[inline]
                fn clone(&self) -> _FcBlanks {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcBlanks = _FcBlanks;
            #[repr(C)]
            pub struct _FcStrList {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcStrList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcStrList {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcStrList");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcStrList {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcStrList {
                #[inline]
                fn clone(&self) -> _FcStrList {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcStrList = _FcStrList;
            #[repr(C)]
            pub struct _FcStrSet {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcStrSet {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcStrSet {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcStrSet");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcStrSet {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcStrSet {
                #[inline]
                fn clone(&self) -> _FcStrSet {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcStrSet = _FcStrSet;
            #[repr(C)]
            pub struct _FcCache {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _FcCache {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _FcCache {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_FcCache");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _FcCache {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _FcCache {
                #[inline]
                fn clone(&self) -> _FcCache {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type FcCache = _FcCache;
            extern "C" {
                pub fn FcBlanksCreate() -> *mut FcBlanks;
            }
            extern "C" {
                pub fn FcBlanksDestroy(b: *mut FcBlanks);
            }
            extern "C" {
                pub fn FcBlanksAdd(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
            }
            extern "C" {
                pub fn FcBlanksIsMember(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
            }
            extern "C" {
                pub fn FcCacheDir(c: *const FcCache) -> *const FcChar8;
            }
            extern "C" {
                pub fn FcCacheCopySet(c: *const FcCache) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcCacheSubdir(c: *const FcCache, i: ::std::os::raw::c_int)
                    -> *const FcChar8;
            }
            extern "C" {
                pub fn FcCacheNumSubdir(c: *const FcCache) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcCacheNumFont(c: *const FcCache) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcDirCacheUnlink(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
            }
            extern "C" {
                pub fn FcDirCacheValid(cache_file: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcDirCacheClean(cache_dir: *const FcChar8, verbose: FcBool) -> FcBool;
            }
            extern "C" {
                pub fn FcCacheCreateTagFile(config: *const FcConfig);
            }
            extern "C" {
                pub fn FcDirCacheCreateUUID(
                    dir: *mut FcChar8,
                    force: FcBool,
                    config: *mut FcConfig,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcDirCacheDeleteUUID(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigHome() -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcConfigEnableHome(enable: FcBool) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigFilename(url: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcConfigCreate() -> *mut FcConfig;
            }
            extern "C" {
                pub fn FcConfigReference(config: *mut FcConfig) -> *mut FcConfig;
            }
            extern "C" {
                pub fn FcConfigDestroy(config: *mut FcConfig);
            }
            extern "C" {
                pub fn FcConfigSetCurrent(config: *mut FcConfig) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigGetCurrent() -> *mut FcConfig;
            }
            extern "C" {
                pub fn FcConfigUptoDate(config: *mut FcConfig) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigBuildFonts(config: *mut FcConfig) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigGetFontDirs(config: *mut FcConfig) -> *mut FcStrList;
            }
            extern "C" {
                pub fn FcConfigGetConfigDirs(config: *mut FcConfig) -> *mut FcStrList;
            }
            extern "C" {
                pub fn FcConfigGetConfigFiles(config: *mut FcConfig) -> *mut FcStrList;
            }
            extern "C" {
                pub fn FcConfigGetCache(config: *mut FcConfig) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcConfigGetBlanks(config: *mut FcConfig) -> *mut FcBlanks;
            }
            extern "C" {
                pub fn FcConfigGetCacheDirs(config: *const FcConfig) -> *mut FcStrList;
            }
            extern "C" {
                pub fn FcConfigGetRescanInterval(config: *mut FcConfig) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcConfigSetRescanInterval(
                    config: *mut FcConfig,
                    rescanInterval: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigGetFonts(config: *mut FcConfig, set: FcSetName) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcConfigAppFontAddFile(
                    config: *mut FcConfig,
                    file: *const FcChar8,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigAppFontAddDir(config: *mut FcConfig, dir: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigAppFontClear(config: *mut FcConfig);
            }
            extern "C" {
                pub fn FcConfigSubstituteWithPat(
                    config: *mut FcConfig,
                    p: *mut FcPattern,
                    p_pat: *mut FcPattern,
                    kind: FcMatchKind,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigSubstitute(
                    config: *mut FcConfig,
                    p: *mut FcPattern,
                    kind: FcMatchKind,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigGetSysRoot(config: *const FcConfig) -> *const FcChar8;
            }
            extern "C" {
                pub fn FcConfigSetSysRoot(config: *mut FcConfig, sysroot: *const FcChar8);
            }
            extern "C" {
                pub fn FcConfigFileInfoIterInit(
                    config: *mut FcConfig,
                    iter: *mut FcConfigFileInfoIter,
                );
            }
            extern "C" {
                pub fn FcConfigFileInfoIterNext(
                    config: *mut FcConfig,
                    iter: *mut FcConfigFileInfoIter,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigFileInfoIterGet(
                    config: *mut FcConfig,
                    iter: *mut FcConfigFileInfoIter,
                    name: *mut *mut FcChar8,
                    description: *mut *mut FcChar8,
                    enabled: *mut FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetCreate() -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetNew() -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetDestroy(fcs: *mut FcCharSet);
            }
            extern "C" {
                pub fn FcCharSetAddChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetDelChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetCopy(src: *mut FcCharSet) -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetEqual(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetIntersect(
                    a: *const FcCharSet,
                    b: *const FcCharSet,
                ) -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetUnion(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetSubtract(
                    a: *const FcCharSet,
                    b: *const FcCharSet,
                ) -> *mut FcCharSet;
            }
            extern "C" {
                pub fn FcCharSetMerge(
                    a: *mut FcCharSet,
                    b: *const FcCharSet,
                    changed: *mut FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetHasChar(fcs: *const FcCharSet, ucs4: FcChar32) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetCount(a: *const FcCharSet) -> FcChar32;
            }
            extern "C" {
                pub fn FcCharSetIntersectCount(
                    a: *const FcCharSet,
                    b: *const FcCharSet,
                ) -> FcChar32;
            }
            extern "C" {
                pub fn FcCharSetSubtractCount(a: *const FcCharSet, b: *const FcCharSet)
                    -> FcChar32;
            }
            extern "C" {
                pub fn FcCharSetIsSubset(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
            }
            extern "C" {
                pub fn FcCharSetFirstPage(
                    a: *const FcCharSet,
                    map: *mut FcChar32,
                    next: *mut FcChar32,
                ) -> FcChar32;
            }
            extern "C" {
                pub fn FcCharSetNextPage(
                    a: *const FcCharSet,
                    map: *mut FcChar32,
                    next: *mut FcChar32,
                ) -> FcChar32;
            }
            extern "C" {
                pub fn FcCharSetCoverage(
                    a: *const FcCharSet,
                    page: FcChar32,
                    result: *mut FcChar32,
                ) -> FcChar32;
            }
            extern "C" {
                pub fn FcValuePrint(v: FcValue);
            }
            extern "C" {
                pub fn FcPatternPrint(p: *const FcPattern);
            }
            extern "C" {
                pub fn FcFontSetPrint(s: *const FcFontSet);
            }
            extern "C" {
                pub fn FcGetDefaultLangs() -> *mut FcStrSet;
            }
            extern "C" {
                pub fn FcDefaultSubstitute(pattern: *mut FcPattern);
            }
            extern "C" {
                pub fn FcFileIsDir(file: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcFileScan(
                    set: *mut FcFontSet,
                    dirs: *mut FcStrSet,
                    cache: *mut FcFileCache,
                    blanks: *mut FcBlanks,
                    file: *const FcChar8,
                    force: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcDirScan(
                    set: *mut FcFontSet,
                    dirs: *mut FcStrSet,
                    cache: *mut FcFileCache,
                    blanks: *mut FcBlanks,
                    dir: *const FcChar8,
                    force: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcDirSave(
                    set: *mut FcFontSet,
                    dirs: *mut FcStrSet,
                    dir: *const FcChar8,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcDirCacheLoad(
                    dir: *const FcChar8,
                    config: *mut FcConfig,
                    cache_file: *mut *mut FcChar8,
                ) -> *mut FcCache;
            }
            extern "C" {
                pub fn FcDirCacheRescan(dir: *const FcChar8, config: *mut FcConfig)
                    -> *mut FcCache;
            }
            extern "C" {
                pub fn FcDirCacheRead(
                    dir: *const FcChar8,
                    force: FcBool,
                    config: *mut FcConfig,
                ) -> *mut FcCache;
            }
            extern "C" {
                pub fn FcDirCacheLoadFile(
                    cache_file: *const FcChar8,
                    file_stat: *mut stat,
                ) -> *mut FcCache;
            }
            extern "C" {
                pub fn FcDirCacheUnload(cache: *mut FcCache);
            }
            extern "C" {
                pub fn FcFreeTypeQuery(
                    file: *const FcChar8,
                    id: ::std::os::raw::c_uint,
                    blanks: *mut FcBlanks,
                    count: *mut ::std::os::raw::c_int,
                ) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcFreeTypeQueryAll(
                    file: *const FcChar8,
                    id: ::std::os::raw::c_uint,
                    blanks: *mut FcBlanks,
                    count: *mut ::std::os::raw::c_int,
                    set: *mut FcFontSet,
                ) -> ::std::os::raw::c_uint;
            }
            extern "C" {
                pub fn FcFontSetCreate() -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcFontSetDestroy(s: *mut FcFontSet);
            }
            extern "C" {
                pub fn FcFontSetAdd(s: *mut FcFontSet, font: *mut FcPattern) -> FcBool;
            }
            extern "C" {
                pub fn FcInitLoadConfig() -> *mut FcConfig;
            }
            extern "C" {
                pub fn FcInitLoadConfigAndFonts() -> *mut FcConfig;
            }
            extern "C" {
                pub fn FcInit() -> FcBool;
            }
            extern "C" {
                pub fn FcFini();
            }
            extern "C" {
                pub fn FcGetVersion() -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcInitReinitialize() -> FcBool;
            }
            extern "C" {
                pub fn FcInitBringUptoDate() -> FcBool;
            }
            extern "C" {
                pub fn FcGetLangs() -> *mut FcStrSet;
            }
            extern "C" {
                pub fn FcLangNormalize(lang: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcLangGetCharSet(lang: *const FcChar8) -> *const FcCharSet;
            }
            extern "C" {
                pub fn FcLangSetCreate() -> *mut FcLangSet;
            }
            extern "C" {
                pub fn FcLangSetDestroy(ls: *mut FcLangSet);
            }
            extern "C" {
                pub fn FcLangSetCopy(ls: *const FcLangSet) -> *mut FcLangSet;
            }
            extern "C" {
                pub fn FcLangSetAdd(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcLangSetDel(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcLangSetHasLang(ls: *const FcLangSet, lang: *const FcChar8)
                    -> FcLangResult;
            }
            extern "C" {
                pub fn FcLangSetCompare(
                    lsa: *const FcLangSet,
                    lsb: *const FcLangSet,
                ) -> FcLangResult;
            }
            extern "C" {
                pub fn FcLangSetContains(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
            }
            extern "C" {
                pub fn FcLangSetEqual(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
            }
            extern "C" {
                pub fn FcLangSetHash(ls: *const FcLangSet) -> FcChar32;
            }
            extern "C" {
                pub fn FcLangSetGetLangs(ls: *const FcLangSet) -> *mut FcStrSet;
            }
            extern "C" {
                pub fn FcLangSetUnion(a: *const FcLangSet, b: *const FcLangSet) -> *mut FcLangSet;
            }
            extern "C" {
                pub fn FcLangSetSubtract(
                    a: *const FcLangSet,
                    b: *const FcLangSet,
                ) -> *mut FcLangSet;
            }
            extern "C" {
                pub fn FcObjectSetCreate() -> *mut FcObjectSet;
            }
            extern "C" {
                pub fn FcObjectSetAdd(
                    os: *mut FcObjectSet,
                    object: *const ::std::os::raw::c_char,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcObjectSetDestroy(os: *mut FcObjectSet);
            }
            extern "C" {
                pub fn FcObjectSetVaBuild(
                    first: *const ::std::os::raw::c_char,
                    va: *mut __va_list_tag,
                ) -> *mut FcObjectSet;
            }
            extern "C" {
                pub fn FcObjectSetBuild(
                    first: *const ::std::os::raw::c_char,
                    ...
                ) -> *mut FcObjectSet;
            }
            extern "C" {
                pub fn FcFontSetList(
                    config: *mut FcConfig,
                    sets: *mut *mut FcFontSet,
                    nsets: ::std::os::raw::c_int,
                    p: *mut FcPattern,
                    os: *mut FcObjectSet,
                ) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcFontList(
                    config: *mut FcConfig,
                    p: *mut FcPattern,
                    os: *mut FcObjectSet,
                ) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcAtomicCreate(file: *const FcChar8) -> *mut FcAtomic;
            }
            extern "C" {
                pub fn FcAtomicLock(atomic: *mut FcAtomic) -> FcBool;
            }
            extern "C" {
                pub fn FcAtomicNewFile(atomic: *mut FcAtomic) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcAtomicOrigFile(atomic: *mut FcAtomic) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcAtomicReplaceOrig(atomic: *mut FcAtomic) -> FcBool;
            }
            extern "C" {
                pub fn FcAtomicDeleteNew(atomic: *mut FcAtomic);
            }
            extern "C" {
                pub fn FcAtomicUnlock(atomic: *mut FcAtomic);
            }
            extern "C" {
                pub fn FcAtomicDestroy(atomic: *mut FcAtomic);
            }
            extern "C" {
                pub fn FcFontSetMatch(
                    config: *mut FcConfig,
                    sets: *mut *mut FcFontSet,
                    nsets: ::std::os::raw::c_int,
                    p: *mut FcPattern,
                    result: *mut FcResult,
                ) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcFontMatch(
                    config: *mut FcConfig,
                    p: *mut FcPattern,
                    result: *mut FcResult,
                ) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcFontRenderPrepare(
                    config: *mut FcConfig,
                    pat: *mut FcPattern,
                    font: *mut FcPattern,
                ) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcFontSetSort(
                    config: *mut FcConfig,
                    sets: *mut *mut FcFontSet,
                    nsets: ::std::os::raw::c_int,
                    p: *mut FcPattern,
                    trim: FcBool,
                    csp: *mut *mut FcCharSet,
                    result: *mut FcResult,
                ) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcFontSort(
                    config: *mut FcConfig,
                    p: *mut FcPattern,
                    trim: FcBool,
                    csp: *mut *mut FcCharSet,
                    result: *mut FcResult,
                ) -> *mut FcFontSet;
            }
            extern "C" {
                pub fn FcFontSetSortDestroy(fs: *mut FcFontSet);
            }
            extern "C" {
                pub fn FcMatrixCopy(mat: *const FcMatrix) -> *mut FcMatrix;
            }
            extern "C" {
                pub fn FcMatrixEqual(mat1: *const FcMatrix, mat2: *const FcMatrix) -> FcBool;
            }
            extern "C" {
                pub fn FcMatrixMultiply(
                    result: *mut FcMatrix,
                    a: *const FcMatrix,
                    b: *const FcMatrix,
                );
            }
            extern "C" {
                pub fn FcMatrixRotate(m: *mut FcMatrix, c: f64, s: f64);
            }
            extern "C" {
                pub fn FcMatrixScale(m: *mut FcMatrix, sx: f64, sy: f64);
            }
            extern "C" {
                pub fn FcMatrixShear(m: *mut FcMatrix, sh: f64, sv: f64);
            }
            extern "C" {
                pub fn FcNameRegisterObjectTypes(
                    types: *const FcObjectType,
                    ntype: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcNameUnregisterObjectTypes(
                    types: *const FcObjectType,
                    ntype: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcNameGetObjectType(
                    object: *const ::std::os::raw::c_char,
                ) -> *const FcObjectType;
            }
            extern "C" {
                pub fn FcNameRegisterConstants(
                    consts: *const FcConstant,
                    nconsts: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcNameUnregisterConstants(
                    consts: *const FcConstant,
                    nconsts: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcNameGetConstant(string: *const FcChar8) -> *const FcConstant;
            }
            extern "C" {
                pub fn FcNameConstant(
                    string: *const FcChar8,
                    result: *mut ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcNameParse(name: *const FcChar8) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcNameUnparse(pat: *mut FcPattern) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcPatternCreate() -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcPatternDuplicate(p: *const FcPattern) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcPatternReference(p: *mut FcPattern);
            }
            extern "C" {
                pub fn FcPatternFilter(p: *mut FcPattern, os: *const FcObjectSet)
                    -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcValueDestroy(v: FcValue);
            }
            extern "C" {
                pub fn FcValueEqual(va: FcValue, vb: FcValue) -> FcBool;
            }
            extern "C" {
                pub fn FcValueSave(v: FcValue) -> FcValue;
            }
            extern "C" {
                pub fn FcPatternDestroy(p: *mut FcPattern);
            }
            extern "C" {
                pub fn FcPatternObjectCount(pat: *const FcPattern) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcPatternEqual(pa: *const FcPattern, pb: *const FcPattern) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternEqualSubset(
                    pa: *const FcPattern,
                    pb: *const FcPattern,
                    os: *const FcObjectSet,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternHash(p: *const FcPattern) -> FcChar32;
            }
            extern "C" {
                pub fn FcPatternAdd(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    value: FcValue,
                    append: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddWeak(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    value: FcValue,
                    append: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternGet(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    id: ::std::os::raw::c_int,
                    v: *mut FcValue,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetWithBinding(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    id: ::std::os::raw::c_int,
                    v: *mut FcValue,
                    b: *mut FcValueBinding,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternDel(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternRemove(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    id: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddInteger(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    i: ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddDouble(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    d: f64,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddString(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    s: *const FcChar8,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddMatrix(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    s: *const FcMatrix,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddCharSet(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    c: *const FcCharSet,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddBool(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    b: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddLangSet(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    ls: *const FcLangSet,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternAddRange(
                    p: *mut FcPattern,
                    object: *const ::std::os::raw::c_char,
                    r: *const FcRange,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternGetInteger(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    i: *mut ::std::os::raw::c_int,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetDouble(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    d: *mut f64,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetString(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    s: *mut *mut FcChar8,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetMatrix(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    s: *mut *mut FcMatrix,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetCharSet(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    c: *mut *mut FcCharSet,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetBool(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    b: *mut FcBool,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetLangSet(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    n: ::std::os::raw::c_int,
                    ls: *mut *mut FcLangSet,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternGetRange(
                    p: *const FcPattern,
                    object: *const ::std::os::raw::c_char,
                    id: ::std::os::raw::c_int,
                    r: *mut *mut FcRange,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcPatternVaBuild(
                    p: *mut FcPattern,
                    va: *mut __va_list_tag,
                ) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcPatternBuild(p: *mut FcPattern, ...) -> *mut FcPattern;
            }
            extern "C" {
                pub fn FcPatternFormat(pat: *mut FcPattern, format: *const FcChar8)
                    -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcRangeCreateDouble(begin: f64, end: f64) -> *mut FcRange;
            }
            extern "C" {
                pub fn FcRangeCreateInteger(begin: FcChar32, end: FcChar32) -> *mut FcRange;
            }
            extern "C" {
                pub fn FcRangeDestroy(range: *mut FcRange);
            }
            extern "C" {
                pub fn FcRangeCopy(r: *const FcRange) -> *mut FcRange;
            }
            extern "C" {
                pub fn FcRangeGetDouble(
                    range: *const FcRange,
                    begin: *mut f64,
                    end: *mut f64,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternIterStart(pat: *const FcPattern, iter: *mut FcPatternIter);
            }
            extern "C" {
                pub fn FcPatternIterNext(pat: *const FcPattern, iter: *mut FcPatternIter)
                    -> FcBool;
            }
            extern "C" {
                pub fn FcPatternIterEqual(
                    p1: *const FcPattern,
                    i1: *mut FcPatternIter,
                    p2: *const FcPattern,
                    i2: *mut FcPatternIter,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternFindIter(
                    pat: *const FcPattern,
                    iter: *mut FcPatternIter,
                    object: *const ::std::os::raw::c_char,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternIterIsValid(
                    pat: *const FcPattern,
                    iter: *mut FcPatternIter,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcPatternIterGetObject(
                    pat: *const FcPattern,
                    iter: *mut FcPatternIter,
                ) -> *const ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn FcPatternIterValueCount(
                    pat: *const FcPattern,
                    iter: *mut FcPatternIter,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcPatternIterGetValue(
                    pat: *const FcPattern,
                    iter: *mut FcPatternIter,
                    id: ::std::os::raw::c_int,
                    v: *mut FcValue,
                    b: *mut FcValueBinding,
                ) -> FcResult;
            }
            extern "C" {
                pub fn FcWeightFromOpenType(
                    ot_weight: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcWeightFromOpenTypeDouble(ot_weight: f64) -> f64;
            }
            extern "C" {
                pub fn FcWeightToOpenType(
                    fc_weight: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcWeightToOpenTypeDouble(fc_weight: f64) -> f64;
            }
            extern "C" {
                pub fn FcStrCopy(s: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrCopyFilename(s: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrPlus(s1: *const FcChar8, s2: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrFree(s: *mut FcChar8);
            }
            extern "C" {
                pub fn FcStrDowncase(s: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrCmpIgnoreCase(
                    s1: *const FcChar8,
                    s2: *const FcChar8,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcStrCmp(s1: *const FcChar8, s2: *const FcChar8) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcStrStrIgnoreCase(s1: *const FcChar8, s2: *const FcChar8)
                    -> *const FcChar8;
            }
            extern "C" {
                pub fn FcStrStr(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
            }
            extern "C" {
                pub fn FcUtf8ToUcs4(
                    src_orig: *const FcChar8,
                    dst: *mut FcChar32,
                    len: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcUtf8Len(
                    string: *const FcChar8,
                    len: ::std::os::raw::c_int,
                    nchar: *mut ::std::os::raw::c_int,
                    wchar: *mut ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcUcs4ToUtf8(ucs4: FcChar32, dest: *mut FcChar8) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcUtf16ToUcs4(
                    src_orig: *const FcChar8,
                    endian: FcEndian,
                    dst: *mut FcChar32,
                    len: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn FcUtf16Len(
                    string: *const FcChar8,
                    endian: FcEndian,
                    len: ::std::os::raw::c_int,
                    nchar: *mut ::std::os::raw::c_int,
                    wchar: *mut ::std::os::raw::c_int,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcStrBuildFilename(path: *const FcChar8, ...) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrDirname(file: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrBasename(file: *const FcChar8) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrSetCreate() -> *mut FcStrSet;
            }
            extern "C" {
                pub fn FcStrSetMember(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcStrSetEqual(sa: *mut FcStrSet, sb: *mut FcStrSet) -> FcBool;
            }
            extern "C" {
                pub fn FcStrSetAdd(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcStrSetAddFilename(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcStrSetDel(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
            }
            extern "C" {
                pub fn FcStrSetDestroy(set: *mut FcStrSet);
            }
            extern "C" {
                pub fn FcStrListCreate(set: *mut FcStrSet) -> *mut FcStrList;
            }
            extern "C" {
                pub fn FcStrListFirst(list: *mut FcStrList);
            }
            extern "C" {
                pub fn FcStrListNext(list: *mut FcStrList) -> *mut FcChar8;
            }
            extern "C" {
                pub fn FcStrListDone(list: *mut FcStrList);
            }
            extern "C" {
                pub fn FcConfigParseAndLoad(
                    config: *mut FcConfig,
                    file: *const FcChar8,
                    complain: FcBool,
                ) -> FcBool;
            }
            extern "C" {
                pub fn FcConfigParseAndLoadFromMemory(
                    config: *mut FcConfig,
                    buffer: *const FcChar8,
                    complain: FcBool,
                ) -> FcBool;
            }
            pub type XID = ::std::os::raw::c_ulong;
            pub type Mask = ::std::os::raw::c_ulong;
            pub type Atom = ::std::os::raw::c_ulong;
            pub type VisualID = ::std::os::raw::c_ulong;
            pub type Time = ::std::os::raw::c_ulong;
            pub type Window = XID;
            pub type Drawable = XID;
            pub type Font = XID;
            pub type Pixmap = XID;
            pub type Cursor = XID;
            pub type Colormap = XID;
            pub type GContext = XID;
            pub type KeySym = XID;
            pub type KeyCode = ::std::os::raw::c_uchar;
            pub type wchar_t = ::std::os::raw::c_int;
            #[repr(C)]
            #[repr(align(16))]
            pub struct max_align_t {
                pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
                pub __bindgen_padding_0: u64,
                pub __clang_max_align_nonce2: u128,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for max_align_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        max_align_t {
                            __clang_max_align_nonce1: ref __self_0_0,
                            __bindgen_padding_0: ref __self_0_1,
                            __clang_max_align_nonce2: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("max_align_t");
                            let _ = debug_trait_builder
                                .field("__clang_max_align_nonce1", &&(*__self_0_0));
                            let _ =
                                debug_trait_builder.field("__bindgen_padding_0", &&(*__self_0_1));
                            let _ = debug_trait_builder
                                .field("__clang_max_align_nonce2", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for max_align_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for max_align_t {
                #[inline]
                fn clone(&self) -> max_align_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_longlong>;
                        let _: ::core::clone::AssertParamIsClone<u64>;
                        let _: ::core::clone::AssertParamIsClone<u128>;
                        *self
                    }
                }
            }
            extern "C" {
                pub fn _Xmblen(
                    str: *mut ::std::os::raw::c_char,
                    len: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            pub type XPointer = *mut ::std::os::raw::c_char;
            #[repr(C)]
            pub struct _XExtData {
                pub number: ::std::os::raw::c_int,
                pub next: *mut _XExtData,
                pub free_private: ::std::option::Option<
                    unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
                >,
                pub private_data: XPointer,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XExtData {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XExtData {
                            number: ref __self_0_0,
                            next: ref __self_0_1,
                            free_private: ref __self_0_2,
                            private_data: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XExtData");
                            let _ = debug_trait_builder.field("number", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("next", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("free_private", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("private_data", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XExtData {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XExtData {
                #[inline]
                fn clone(&self) -> _XExtData {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XExtData>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    extension: *mut _XExtData,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        *self
                    }
                }
            }
            pub type XExtData = _XExtData;
            #[repr(C)]
            pub struct XExtCodes {
                pub extension: ::std::os::raw::c_int,
                pub major_opcode: ::std::os::raw::c_int,
                pub first_event: ::std::os::raw::c_int,
                pub first_error: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XExtCodes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XExtCodes {
                            extension: ref __self_0_0,
                            major_opcode: ref __self_0_1,
                            first_event: ref __self_0_2,
                            first_error: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XExtCodes");
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("major_opcode", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("first_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("first_error", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XExtCodes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XExtCodes {
                #[inline]
                fn clone(&self) -> XExtCodes {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPixmapFormatValues {
                pub depth: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub scanline_pad: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPixmapFormatValues {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPixmapFormatValues {
                            depth: ref __self_0_0,
                            bits_per_pixel: ref __self_0_1,
                            scanline_pad: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPixmapFormatValues");
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("scanline_pad", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPixmapFormatValues {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPixmapFormatValues {
                #[inline]
                fn clone(&self) -> XPixmapFormatValues {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGCValues {
                pub function: ::std::os::raw::c_int,
                pub plane_mask: ::std::os::raw::c_ulong,
                pub foreground: ::std::os::raw::c_ulong,
                pub background: ::std::os::raw::c_ulong,
                pub line_width: ::std::os::raw::c_int,
                pub line_style: ::std::os::raw::c_int,
                pub cap_style: ::std::os::raw::c_int,
                pub join_style: ::std::os::raw::c_int,
                pub fill_style: ::std::os::raw::c_int,
                pub fill_rule: ::std::os::raw::c_int,
                pub arc_mode: ::std::os::raw::c_int,
                pub tile: Pixmap,
                pub stipple: Pixmap,
                pub ts_x_origin: ::std::os::raw::c_int,
                pub ts_y_origin: ::std::os::raw::c_int,
                pub font: Font,
                pub subwindow_mode: ::std::os::raw::c_int,
                pub graphics_exposures: ::std::os::raw::c_int,
                pub clip_x_origin: ::std::os::raw::c_int,
                pub clip_y_origin: ::std::os::raw::c_int,
                pub clip_mask: Pixmap,
                pub dash_offset: ::std::os::raw::c_int,
                pub dashes: ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGCValues {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGCValues {
                            function: ref __self_0_0,
                            plane_mask: ref __self_0_1,
                            foreground: ref __self_0_2,
                            background: ref __self_0_3,
                            line_width: ref __self_0_4,
                            line_style: ref __self_0_5,
                            cap_style: ref __self_0_6,
                            join_style: ref __self_0_7,
                            fill_style: ref __self_0_8,
                            fill_rule: ref __self_0_9,
                            arc_mode: ref __self_0_10,
                            tile: ref __self_0_11,
                            stipple: ref __self_0_12,
                            ts_x_origin: ref __self_0_13,
                            ts_y_origin: ref __self_0_14,
                            font: ref __self_0_15,
                            subwindow_mode: ref __self_0_16,
                            graphics_exposures: ref __self_0_17,
                            clip_x_origin: ref __self_0_18,
                            clip_y_origin: ref __self_0_19,
                            clip_mask: ref __self_0_20,
                            dash_offset: ref __self_0_21,
                            dashes: ref __self_0_22,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGCValues");
                            let _ = debug_trait_builder.field("function", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("plane_mask", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("foreground", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("background", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("line_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("line_style", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("cap_style", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("join_style", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("fill_style", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("fill_rule", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("arc_mode", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("tile", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("stipple", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("ts_x_origin", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("ts_y_origin", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("subwindow_mode", &&(*__self_0_16));
                            let _ =
                                debug_trait_builder.field("graphics_exposures", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("clip_x_origin", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("clip_y_origin", &&(*__self_0_19));
                            let _ = debug_trait_builder.field("clip_mask", &&(*__self_0_20));
                            let _ = debug_trait_builder.field("dash_offset", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("dashes", &&(*__self_0_22));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGCValues {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGCValues {
                #[inline]
                fn clone(&self) -> XGCValues {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XGC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XGC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XGC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XGC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XGC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XGC {
                #[inline]
                fn clone(&self) -> _XGC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type GC = *mut _XGC;
            #[repr(C)]
            pub struct Visual {
                pub ext_data: *mut XExtData,
                pub visualid: VisualID,
                pub class: ::std::os::raw::c_int,
                pub red_mask: ::std::os::raw::c_ulong,
                pub green_mask: ::std::os::raw::c_ulong,
                pub blue_mask: ::std::os::raw::c_ulong,
                pub bits_per_rgb: ::std::os::raw::c_int,
                pub map_entries: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Visual {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Visual {
                            ext_data: ref __self_0_0,
                            visualid: ref __self_0_1,
                            class: ref __self_0_2,
                            red_mask: ref __self_0_3,
                            green_mask: ref __self_0_4,
                            blue_mask: ref __self_0_5,
                            bits_per_rgb: ref __self_0_6,
                            map_entries: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Visual");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("visualid", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("class", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("red_mask", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("green_mask", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("blue_mask", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("bits_per_rgb", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("map_entries", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Visual {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Visual {
                #[inline]
                fn clone(&self) -> Visual {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<VisualID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct Depth {
                pub depth: ::std::os::raw::c_int,
                pub nvisuals: ::std::os::raw::c_int,
                pub visuals: *mut Visual,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Depth {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Depth {
                            depth: ref __self_0_0,
                            nvisuals: ref __self_0_1,
                            visuals: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Depth");
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nvisuals", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("visuals", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Depth {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Depth {
                #[inline]
                fn clone(&self) -> Depth {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XDisplay {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XDisplay {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XDisplay {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XDisplay");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XDisplay {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XDisplay {
                #[inline]
                fn clone(&self) -> _XDisplay {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct Screen {
                pub ext_data: *mut XExtData,
                pub display: *mut _XDisplay,
                pub root: Window,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub mwidth: ::std::os::raw::c_int,
                pub mheight: ::std::os::raw::c_int,
                pub ndepths: ::std::os::raw::c_int,
                pub depths: *mut Depth,
                pub root_depth: ::std::os::raw::c_int,
                pub root_visual: *mut Visual,
                pub default_gc: GC,
                pub cmap: Colormap,
                pub white_pixel: ::std::os::raw::c_ulong,
                pub black_pixel: ::std::os::raw::c_ulong,
                pub max_maps: ::std::os::raw::c_int,
                pub min_maps: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub save_unders: ::std::os::raw::c_int,
                pub root_input_mask: ::std::os::raw::c_long,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Screen {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Screen {
                            ext_data: ref __self_0_0,
                            display: ref __self_0_1,
                            root: ref __self_0_2,
                            width: ref __self_0_3,
                            height: ref __self_0_4,
                            mwidth: ref __self_0_5,
                            mheight: ref __self_0_6,
                            ndepths: ref __self_0_7,
                            depths: ref __self_0_8,
                            root_depth: ref __self_0_9,
                            root_visual: ref __self_0_10,
                            default_gc: ref __self_0_11,
                            cmap: ref __self_0_12,
                            white_pixel: ref __self_0_13,
                            black_pixel: ref __self_0_14,
                            max_maps: ref __self_0_15,
                            min_maps: ref __self_0_16,
                            backing_store: ref __self_0_17,
                            save_unders: ref __self_0_18,
                            root_input_mask: ref __self_0_19,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Screen");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("mwidth", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("mheight", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("ndepths", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("depths", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("root_depth", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("root_visual", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("default_gc", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("cmap", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("white_pixel", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("black_pixel", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("max_maps", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("min_maps", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("save_unders", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("root_input_mask", &&(*__self_0_19));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Screen {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Screen {
                #[inline]
                fn clone(&self) -> Screen {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XDisplay>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Depth>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        let _: ::core::clone::AssertParamIsClone<GC>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct ScreenFormat {
                pub ext_data: *mut XExtData,
                pub depth: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub scanline_pad: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ScreenFormat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ScreenFormat {
                            ext_data: ref __self_0_0,
                            depth: ref __self_0_1,
                            bits_per_pixel: ref __self_0_2,
                            scanline_pad: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ScreenFormat");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("scanline_pad", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for ScreenFormat {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for ScreenFormat {
                #[inline]
                fn clone(&self) -> ScreenFormat {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSetWindowAttributes {
                pub background_pixmap: Pixmap,
                pub background_pixel: ::std::os::raw::c_ulong,
                pub border_pixmap: Pixmap,
                pub border_pixel: ::std::os::raw::c_ulong,
                pub bit_gravity: ::std::os::raw::c_int,
                pub win_gravity: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub backing_planes: ::std::os::raw::c_ulong,
                pub backing_pixel: ::std::os::raw::c_ulong,
                pub save_under: ::std::os::raw::c_int,
                pub event_mask: ::std::os::raw::c_long,
                pub do_not_propagate_mask: ::std::os::raw::c_long,
                pub override_redirect: ::std::os::raw::c_int,
                pub colormap: Colormap,
                pub cursor: Cursor,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSetWindowAttributes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSetWindowAttributes {
                            background_pixmap: ref __self_0_0,
                            background_pixel: ref __self_0_1,
                            border_pixmap: ref __self_0_2,
                            border_pixel: ref __self_0_3,
                            bit_gravity: ref __self_0_4,
                            win_gravity: ref __self_0_5,
                            backing_store: ref __self_0_6,
                            backing_planes: ref __self_0_7,
                            backing_pixel: ref __self_0_8,
                            save_under: ref __self_0_9,
                            event_mask: ref __self_0_10,
                            do_not_propagate_mask: ref __self_0_11,
                            override_redirect: ref __self_0_12,
                            colormap: ref __self_0_13,
                            cursor: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSetWindowAttributes");
                            let _ = debug_trait_builder.field("background_pixmap", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("background_pixel", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("border_pixmap", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("border_pixel", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("bit_gravity", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("win_gravity", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("backing_planes", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("backing_pixel", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("save_under", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("event_mask", &&(*__self_0_10));
                            let _ = debug_trait_builder
                                .field("do_not_propagate_mask", &&(*__self_0_11));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("cursor", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSetWindowAttributes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSetWindowAttributes {
                #[inline]
                fn clone(&self) -> XSetWindowAttributes {
                    {
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<Cursor>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XWindowAttributes {
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub depth: ::std::os::raw::c_int,
                pub visual: *mut Visual,
                pub root: Window,
                pub class: ::std::os::raw::c_int,
                pub bit_gravity: ::std::os::raw::c_int,
                pub win_gravity: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub backing_planes: ::std::os::raw::c_ulong,
                pub backing_pixel: ::std::os::raw::c_ulong,
                pub save_under: ::std::os::raw::c_int,
                pub colormap: Colormap,
                pub map_installed: ::std::os::raw::c_int,
                pub map_state: ::std::os::raw::c_int,
                pub all_event_masks: ::std::os::raw::c_long,
                pub your_event_mask: ::std::os::raw::c_long,
                pub do_not_propagate_mask: ::std::os::raw::c_long,
                pub override_redirect: ::std::os::raw::c_int,
                pub screen: *mut Screen,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XWindowAttributes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XWindowAttributes {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            border_width: ref __self_0_4,
                            depth: ref __self_0_5,
                            visual: ref __self_0_6,
                            root: ref __self_0_7,
                            class: ref __self_0_8,
                            bit_gravity: ref __self_0_9,
                            win_gravity: ref __self_0_10,
                            backing_store: ref __self_0_11,
                            backing_planes: ref __self_0_12,
                            backing_pixel: ref __self_0_13,
                            save_under: ref __self_0_14,
                            colormap: ref __self_0_15,
                            map_installed: ref __self_0_16,
                            map_state: ref __self_0_17,
                            all_event_masks: ref __self_0_18,
                            your_event_mask: ref __self_0_19,
                            do_not_propagate_mask: ref __self_0_20,
                            override_redirect: ref __self_0_21,
                            screen: ref __self_0_22,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XWindowAttributes");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("visual", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("class", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("bit_gravity", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("win_gravity", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("backing_planes", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("backing_pixel", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("save_under", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("map_installed", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("map_state", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("all_event_masks", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("your_event_mask", &&(*__self_0_19));
                            let _ = debug_trait_builder
                                .field("do_not_propagate_mask", &&(*__self_0_20));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("screen", &&(*__self_0_22));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XWindowAttributes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XWindowAttributes {
                #[inline]
                fn clone(&self) -> XWindowAttributes {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Screen>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XHostAddress {
                pub family: ::std::os::raw::c_int,
                pub length: ::std::os::raw::c_int,
                pub address: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XHostAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XHostAddress {
                            family: ref __self_0_0,
                            length: ref __self_0_1,
                            address: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XHostAddress");
                            let _ = debug_trait_builder.field("family", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("length", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("address", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XHostAddress {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XHostAddress {
                #[inline]
                fn clone(&self) -> XHostAddress {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XServerInterpretedAddress {
                pub typelength: ::std::os::raw::c_int,
                pub valuelength: ::std::os::raw::c_int,
                pub type_: *mut ::std::os::raw::c_char,
                pub value: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XServerInterpretedAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XServerInterpretedAddress {
                            typelength: ref __self_0_0,
                            valuelength: ref __self_0_1,
                            type_: ref __self_0_2,
                            value: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("XServerInterpretedAddress");
                            let _ = debug_trait_builder.field("typelength", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("valuelength", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("value", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XServerInterpretedAddress {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XServerInterpretedAddress {
                #[inline]
                fn clone(&self) -> XServerInterpretedAddress {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XImage {
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub xoffset: ::std::os::raw::c_int,
                pub format: ::std::os::raw::c_int,
                pub data: *mut ::std::os::raw::c_char,
                pub byte_order: ::std::os::raw::c_int,
                pub bitmap_unit: ::std::os::raw::c_int,
                pub bitmap_bit_order: ::std::os::raw::c_int,
                pub bitmap_pad: ::std::os::raw::c_int,
                pub depth: ::std::os::raw::c_int,
                pub bytes_per_line: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub red_mask: ::std::os::raw::c_ulong,
                pub green_mask: ::std::os::raw::c_ulong,
                pub blue_mask: ::std::os::raw::c_ulong,
                pub obdata: XPointer,
                pub f: _XImage_funcs,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XImage {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XImage {
                            width: ref __self_0_0,
                            height: ref __self_0_1,
                            xoffset: ref __self_0_2,
                            format: ref __self_0_3,
                            data: ref __self_0_4,
                            byte_order: ref __self_0_5,
                            bitmap_unit: ref __self_0_6,
                            bitmap_bit_order: ref __self_0_7,
                            bitmap_pad: ref __self_0_8,
                            depth: ref __self_0_9,
                            bytes_per_line: ref __self_0_10,
                            bits_per_pixel: ref __self_0_11,
                            red_mask: ref __self_0_12,
                            green_mask: ref __self_0_13,
                            blue_mask: ref __self_0_14,
                            obdata: ref __self_0_15,
                            f: ref __self_0_16,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XImage");
                            let _ = debug_trait_builder.field("width", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("xoffset", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("format", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("data", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("byte_order", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("bitmap_unit", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("bitmap_bit_order", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("bitmap_pad", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("bytes_per_line", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("red_mask", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("green_mask", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("blue_mask", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("obdata", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("f", &&(*__self_0_16));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XImage {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XImage {
                #[inline]
                fn clone(&self) -> _XImage {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<_XImage_funcs>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XImage_funcs {
                pub create_image: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XDisplay,
                        arg2: *mut Visual,
                        arg3: ::std::os::raw::c_uint,
                        arg4: ::std::os::raw::c_int,
                        arg5: ::std::os::raw::c_int,
                        arg6: *mut ::std::os::raw::c_char,
                        arg7: ::std::os::raw::c_uint,
                        arg8: ::std::os::raw::c_uint,
                        arg9: ::std::os::raw::c_int,
                        arg10: ::std::os::raw::c_int,
                    ) -> *mut _XImage,
                >,
                pub destroy_image: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int,
                >,
                pub get_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                    ) -> ::std::os::raw::c_ulong,
                >,
                pub put_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_ulong,
                    ) -> ::std::os::raw::c_int,
                >,
                pub sub_image: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_uint,
                        arg5: ::std::os::raw::c_uint,
                    ) -> *mut _XImage,
                >,
                pub add_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_long,
                    ) -> ::std::os::raw::c_int,
                >,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XImage_funcs {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XImage_funcs {
                            create_image: ref __self_0_0,
                            destroy_image: ref __self_0_1,
                            get_pixel: ref __self_0_2,
                            put_pixel: ref __self_0_3,
                            sub_image: ref __self_0_4,
                            add_pixel: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XImage_funcs");
                            let _ = debug_trait_builder.field("create_image", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("destroy_image", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("get_pixel", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("put_pixel", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("sub_image", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("add_pixel", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XImage_funcs {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XImage_funcs {
                #[inline]
                fn clone(&self) -> _XImage_funcs {
                    {
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XDisplay,
                                    arg2: *mut Visual,
                                    arg3: ::std::os::raw::c_uint,
                                    arg4: ::std::os::raw::c_int,
                                    arg5: ::std::os::raw::c_int,
                                    arg6: *mut ::std::os::raw::c_char,
                                    arg7: ::std::os::raw::c_uint,
                                    arg8: ::std::os::raw::c_uint,
                                    arg9: ::std::os::raw::c_int,
                                    arg10: ::std::os::raw::c_int,
                                )
                                    -> *mut _XImage,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                )
                                    -> ::std::os::raw::c_ulong,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                    arg4: ::std::os::raw::c_ulong,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                    arg4: ::std::os::raw::c_uint,
                                    arg5: ::std::os::raw::c_uint,
                                )
                                    -> *mut _XImage,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_long,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        *self
                    }
                }
            }
            pub type XImage = _XImage;
            #[repr(C)]
            pub struct XWindowChanges {
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub sibling: Window,
                pub stack_mode: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XWindowChanges {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XWindowChanges {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            border_width: ref __self_0_4,
                            sibling: ref __self_0_5,
                            stack_mode: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XWindowChanges");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("sibling", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("stack_mode", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XWindowChanges {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XWindowChanges {
                #[inline]
                fn clone(&self) -> XWindowChanges {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XColor {
                pub pixel: ::std::os::raw::c_ulong,
                pub red: ::std::os::raw::c_ushort,
                pub green: ::std::os::raw::c_ushort,
                pub blue: ::std::os::raw::c_ushort,
                pub flags: ::std::os::raw::c_char,
                pub pad: ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XColor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XColor {
                            pixel: ref __self_0_0,
                            red: ref __self_0_1,
                            green: ref __self_0_2,
                            blue: ref __self_0_3,
                            flags: ref __self_0_4,
                            pad: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XColor");
                            let _ = debug_trait_builder.field("pixel", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("red", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("green", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("blue", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("flags", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("pad", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XColor {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XColor {
                #[inline]
                fn clone(&self) -> XColor {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSegment {
                pub x1: ::std::os::raw::c_short,
                pub y1: ::std::os::raw::c_short,
                pub x2: ::std::os::raw::c_short,
                pub y2: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSegment {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSegment {
                            x1: ref __self_0_0,
                            y1: ref __self_0_1,
                            x2: ref __self_0_2,
                            y2: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSegment");
                            let _ = debug_trait_builder.field("x1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y1", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("x2", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("y2", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSegment {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSegment {
                #[inline]
                fn clone(&self) -> XSegment {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPoint {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPoint {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPoint");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPoint {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPoint {
                #[inline]
                fn clone(&self) -> XPoint {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XRectangle {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_ushort,
                pub height: ::std::os::raw::c_ushort,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XRectangle {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XRectangle {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XRectangle");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XRectangle {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XRectangle {
                #[inline]
                fn clone(&self) -> XRectangle {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XArc {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_ushort,
                pub height: ::std::os::raw::c_ushort,
                pub angle1: ::std::os::raw::c_short,
                pub angle2: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XArc {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XArc {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            angle1: ref __self_0_4,
                            angle2: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XArc");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("angle1", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("angle2", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XArc {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XArc {
                #[inline]
                fn clone(&self) -> XArc {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XKeyboardControl {
                pub key_click_percent: ::std::os::raw::c_int,
                pub bell_percent: ::std::os::raw::c_int,
                pub bell_pitch: ::std::os::raw::c_int,
                pub bell_duration: ::std::os::raw::c_int,
                pub led: ::std::os::raw::c_int,
                pub led_mode: ::std::os::raw::c_int,
                pub key: ::std::os::raw::c_int,
                pub auto_repeat_mode: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyboardControl {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyboardControl {
                            key_click_percent: ref __self_0_0,
                            bell_percent: ref __self_0_1,
                            bell_pitch: ref __self_0_2,
                            bell_duration: ref __self_0_3,
                            led: ref __self_0_4,
                            led_mode: ref __self_0_5,
                            key: ref __self_0_6,
                            auto_repeat_mode: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyboardControl");
                            let _ = debug_trait_builder.field("key_click_percent", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bell_percent", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bell_pitch", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("bell_duration", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("led", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("led_mode", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("key", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("auto_repeat_mode", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyboardControl {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyboardControl {
                #[inline]
                fn clone(&self) -> XKeyboardControl {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XKeyboardState {
                pub key_click_percent: ::std::os::raw::c_int,
                pub bell_percent: ::std::os::raw::c_int,
                pub bell_pitch: ::std::os::raw::c_uint,
                pub bell_duration: ::std::os::raw::c_uint,
                pub led_mask: ::std::os::raw::c_ulong,
                pub global_auto_repeat: ::std::os::raw::c_int,
                pub auto_repeats: [::std::os::raw::c_char; 32usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyboardState {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyboardState {
                            key_click_percent: ref __self_0_0,
                            bell_percent: ref __self_0_1,
                            bell_pitch: ref __self_0_2,
                            bell_duration: ref __self_0_3,
                            led_mask: ref __self_0_4,
                            global_auto_repeat: ref __self_0_5,
                            auto_repeats: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyboardState");
                            let _ = debug_trait_builder.field("key_click_percent", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bell_percent", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bell_pitch", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("bell_duration", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("led_mask", &&(*__self_0_4));
                            let _ =
                                debug_trait_builder.field("global_auto_repeat", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("auto_repeats", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyboardState {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyboardState {
                #[inline]
                fn clone(&self) -> XKeyboardState {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_char; 32usize],
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTimeCoord {
                pub time: Time,
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTimeCoord {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTimeCoord {
                            time: ref __self_0_0,
                            x: ref __self_0_1,
                            y: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTimeCoord");
                            let _ = debug_trait_builder.field("time", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTimeCoord {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTimeCoord {
                #[inline]
                fn clone(&self) -> XTimeCoord {
                    {
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XModifierKeymap {
                pub max_keypermod: ::std::os::raw::c_int,
                pub modifiermap: *mut KeyCode,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XModifierKeymap {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XModifierKeymap {
                            max_keypermod: ref __self_0_0,
                            modifiermap: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XModifierKeymap");
                            let _ = debug_trait_builder.field("max_keypermod", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("modifiermap", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XModifierKeymap {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XModifierKeymap {
                #[inline]
                fn clone(&self) -> XModifierKeymap {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut KeyCode>;
                        *self
                    }
                }
            }
            pub type Display = _XDisplay;
            #[repr(C)]
            pub struct _XPrivate {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XPrivate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XPrivate {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XPrivate");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XPrivate {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XPrivate {
                #[inline]
                fn clone(&self) -> _XPrivate {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XrmHashBucketRec {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XrmHashBucketRec {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XrmHashBucketRec {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XrmHashBucketRec");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XrmHashBucketRec {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XrmHashBucketRec {
                #[inline]
                fn clone(&self) -> _XrmHashBucketRec {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _bindgen_ty_1 {
                pub ext_data: *mut XExtData,
                pub private1: *mut _XPrivate,
                pub fd: ::std::os::raw::c_int,
                pub private2: ::std::os::raw::c_int,
                pub proto_major_version: ::std::os::raw::c_int,
                pub proto_minor_version: ::std::os::raw::c_int,
                pub vendor: *mut ::std::os::raw::c_char,
                pub private3: XID,
                pub private4: XID,
                pub private5: XID,
                pub private6: ::std::os::raw::c_int,
                pub resource_alloc:
                    ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID>,
                pub byte_order: ::std::os::raw::c_int,
                pub bitmap_unit: ::std::os::raw::c_int,
                pub bitmap_pad: ::std::os::raw::c_int,
                pub bitmap_bit_order: ::std::os::raw::c_int,
                pub nformats: ::std::os::raw::c_int,
                pub pixmap_format: *mut ScreenFormat,
                pub private8: ::std::os::raw::c_int,
                pub release: ::std::os::raw::c_int,
                pub private9: *mut _XPrivate,
                pub private10: *mut _XPrivate,
                pub qlen: ::std::os::raw::c_int,
                pub last_request_read: ::std::os::raw::c_ulong,
                pub request: ::std::os::raw::c_ulong,
                pub private11: XPointer,
                pub private12: XPointer,
                pub private13: XPointer,
                pub private14: XPointer,
                pub max_request_size: ::std::os::raw::c_uint,
                pub db: *mut _XrmHashBucketRec,
                pub private15: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int,
                >,
                pub display_name: *mut ::std::os::raw::c_char,
                pub default_screen: ::std::os::raw::c_int,
                pub nscreens: ::std::os::raw::c_int,
                pub screens: *mut Screen,
                pub motion_buffer: ::std::os::raw::c_ulong,
                pub private16: ::std::os::raw::c_ulong,
                pub min_keycode: ::std::os::raw::c_int,
                pub max_keycode: ::std::os::raw::c_int,
                pub private17: XPointer,
                pub private18: XPointer,
                pub private19: ::std::os::raw::c_int,
                pub xdefaults: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _bindgen_ty_1 {
                            ext_data: ref __self_0_0,
                            private1: ref __self_0_1,
                            fd: ref __self_0_2,
                            private2: ref __self_0_3,
                            proto_major_version: ref __self_0_4,
                            proto_minor_version: ref __self_0_5,
                            vendor: ref __self_0_6,
                            private3: ref __self_0_7,
                            private4: ref __self_0_8,
                            private5: ref __self_0_9,
                            private6: ref __self_0_10,
                            resource_alloc: ref __self_0_11,
                            byte_order: ref __self_0_12,
                            bitmap_unit: ref __self_0_13,
                            bitmap_pad: ref __self_0_14,
                            bitmap_bit_order: ref __self_0_15,
                            nformats: ref __self_0_16,
                            pixmap_format: ref __self_0_17,
                            private8: ref __self_0_18,
                            release: ref __self_0_19,
                            private9: ref __self_0_20,
                            private10: ref __self_0_21,
                            qlen: ref __self_0_22,
                            last_request_read: ref __self_0_23,
                            request: ref __self_0_24,
                            private11: ref __self_0_25,
                            private12: ref __self_0_26,
                            private13: ref __self_0_27,
                            private14: ref __self_0_28,
                            max_request_size: ref __self_0_29,
                            db: ref __self_0_30,
                            private15: ref __self_0_31,
                            display_name: ref __self_0_32,
                            default_screen: ref __self_0_33,
                            nscreens: ref __self_0_34,
                            screens: ref __self_0_35,
                            motion_buffer: ref __self_0_36,
                            private16: ref __self_0_37,
                            min_keycode: ref __self_0_38,
                            max_keycode: ref __self_0_39,
                            private17: ref __self_0_40,
                            private18: ref __self_0_41,
                            private19: ref __self_0_42,
                            xdefaults: ref __self_0_43,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_bindgen_ty_1");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("private1", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("fd", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("private2", &&(*__self_0_3));
                            let _ =
                                debug_trait_builder.field("proto_major_version", &&(*__self_0_4));
                            let _ =
                                debug_trait_builder.field("proto_minor_version", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("vendor", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("private3", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("private4", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("private5", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("private6", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("resource_alloc", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("byte_order", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("bitmap_unit", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("bitmap_pad", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("bitmap_bit_order", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("nformats", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("pixmap_format", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("private8", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("release", &&(*__self_0_19));
                            let _ = debug_trait_builder.field("private9", &&(*__self_0_20));
                            let _ = debug_trait_builder.field("private10", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("qlen", &&(*__self_0_22));
                            let _ =
                                debug_trait_builder.field("last_request_read", &&(*__self_0_23));
                            let _ = debug_trait_builder.field("request", &&(*__self_0_24));
                            let _ = debug_trait_builder.field("private11", &&(*__self_0_25));
                            let _ = debug_trait_builder.field("private12", &&(*__self_0_26));
                            let _ = debug_trait_builder.field("private13", &&(*__self_0_27));
                            let _ = debug_trait_builder.field("private14", &&(*__self_0_28));
                            let _ = debug_trait_builder.field("max_request_size", &&(*__self_0_29));
                            let _ = debug_trait_builder.field("db", &&(*__self_0_30));
                            let _ = debug_trait_builder.field("private15", &&(*__self_0_31));
                            let _ = debug_trait_builder.field("display_name", &&(*__self_0_32));
                            let _ = debug_trait_builder.field("default_screen", &&(*__self_0_33));
                            let _ = debug_trait_builder.field("nscreens", &&(*__self_0_34));
                            let _ = debug_trait_builder.field("screens", &&(*__self_0_35));
                            let _ = debug_trait_builder.field("motion_buffer", &&(*__self_0_36));
                            let _ = debug_trait_builder.field("private16", &&(*__self_0_37));
                            let _ = debug_trait_builder.field("min_keycode", &&(*__self_0_38));
                            let _ = debug_trait_builder.field("max_keycode", &&(*__self_0_39));
                            let _ = debug_trait_builder.field("private17", &&(*__self_0_40));
                            let _ = debug_trait_builder.field("private18", &&(*__self_0_41));
                            let _ = debug_trait_builder.field("private19", &&(*__self_0_42));
                            let _ = debug_trait_builder.field("xdefaults", &&(*__self_0_43));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ScreenFormat>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XrmHashBucketRec>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Screen>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            pub type _XPrivDisplay = *mut _bindgen_ty_1;
            #[repr(C)]
            pub struct XKeyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub keycode: ::std::os::raw::c_uint,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            keycode: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("keycode", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyEvent {
                #[inline]
                fn clone(&self) -> XKeyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XKeyPressedEvent = XKeyEvent;
            pub type XKeyReleasedEvent = XKeyEvent;
            #[repr(C)]
            pub struct XButtonEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub button: ::std::os::raw::c_uint,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XButtonEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XButtonEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            button: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XButtonEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("button", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XButtonEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XButtonEvent {
                #[inline]
                fn clone(&self) -> XButtonEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XButtonPressedEvent = XButtonEvent;
            pub type XButtonReleasedEvent = XButtonEvent;
            #[repr(C)]
            pub struct XMotionEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub is_hint: ::std::os::raw::c_char,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMotionEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMotionEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            is_hint: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMotionEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("is_hint", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMotionEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMotionEvent {
                #[inline]
                fn clone(&self) -> XMotionEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XPointerMovedEvent = XMotionEvent;
            #[repr(C)]
            pub struct XCrossingEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub mode: ::std::os::raw::c_int,
                pub detail: ::std::os::raw::c_int,
                pub same_screen: ::std::os::raw::c_int,
                pub focus: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCrossingEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCrossingEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            mode: ref __self_0_12,
                            detail: ref __self_0_13,
                            same_screen: ref __self_0_14,
                            focus: ref __self_0_15,
                            state: ref __self_0_16,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCrossingEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("mode", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("focus", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_16));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCrossingEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCrossingEvent {
                #[inline]
                fn clone(&self) -> XCrossingEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            pub type XEnterWindowEvent = XCrossingEvent;
            pub type XLeaveWindowEvent = XCrossingEvent;
            #[repr(C)]
            pub struct XFocusChangeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub mode: ::std::os::raw::c_int,
                pub detail: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFocusChangeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFocusChangeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            mode: ref __self_0_5,
                            detail: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFocusChangeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("mode", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFocusChangeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFocusChangeEvent {
                #[inline]
                fn clone(&self) -> XFocusChangeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XFocusInEvent = XFocusChangeEvent;
            pub type XFocusOutEvent = XFocusChangeEvent;
            #[repr(C)]
            pub struct XKeymapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub key_vector: [::std::os::raw::c_char; 32usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeymapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeymapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            key_vector: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeymapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("key_vector", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeymapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeymapEvent {
                #[inline]
                fn clone(&self) -> XKeymapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_char; 32usize],
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            x: ref __self_0_5,
                            y: ref __self_0_6,
                            width: ref __self_0_7,
                            height: ref __self_0_8,
                            count: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XExposeEvent {
                #[inline]
                fn clone(&self) -> XExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGraphicsExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub drawable: Drawable,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
                pub major_code: ::std::os::raw::c_int,
                pub minor_code: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGraphicsExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGraphicsExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            drawable: ref __self_0_4,
                            x: ref __self_0_5,
                            y: ref __self_0_6,
                            width: ref __self_0_7,
                            height: ref __self_0_8,
                            count: ref __self_0_9,
                            major_code: ref __self_0_10,
                            minor_code: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGraphicsExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("drawable", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("major_code", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGraphicsExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGraphicsExposeEvent {
                #[inline]
                fn clone(&self) -> XGraphicsExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Drawable>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XNoExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub drawable: Drawable,
                pub major_code: ::std::os::raw::c_int,
                pub minor_code: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XNoExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XNoExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            drawable: ref __self_0_4,
                            major_code: ref __self_0_5,
                            minor_code: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XNoExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("drawable", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("major_code", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XNoExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XNoExposeEvent {
                #[inline]
                fn clone(&self) -> XNoExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Drawable>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XVisibilityEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XVisibilityEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XVisibilityEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            state: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XVisibilityEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XVisibilityEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XVisibilityEvent {
                #[inline]
                fn clone(&self) -> XVisibilityEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCreateWindowEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCreateWindowEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCreateWindowEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            override_redirect: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCreateWindowEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCreateWindowEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCreateWindowEvent {
                #[inline]
                fn clone(&self) -> XCreateWindowEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XDestroyWindowEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XDestroyWindowEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XDestroyWindowEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XDestroyWindowEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XDestroyWindowEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XDestroyWindowEvent {
                #[inline]
                fn clone(&self) -> XDestroyWindowEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XUnmapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub from_configure: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XUnmapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XUnmapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            from_configure: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XUnmapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("from_configure", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XUnmapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XUnmapEvent {
                #[inline]
                fn clone(&self) -> XUnmapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            override_redirect: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("override_redirect", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMapEvent {
                #[inline]
                fn clone(&self) -> XMapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMapRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMapRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMapRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMapRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMapRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMapRequestEvent {
                #[inline]
                fn clone(&self) -> XMapRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XReparentEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub parent: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XReparentEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XReparentEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            parent: ref __self_0_6,
                            x: ref __self_0_7,
                            y: ref __self_0_8,
                            override_redirect: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XReparentEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("override_redirect", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XReparentEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XReparentEvent {
                #[inline]
                fn clone(&self) -> XReparentEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XConfigureEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub above: Window,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XConfigureEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XConfigureEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            above: ref __self_0_11,
                            override_redirect: ref __self_0_12,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XConfigureEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("above", &&(*__self_0_11));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_12));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XConfigureEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XConfigureEvent {
                #[inline]
                fn clone(&self) -> XConfigureEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGravityEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGravityEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGravityEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGravityEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGravityEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGravityEvent {
                #[inline]
                fn clone(&self) -> XGravityEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XResizeRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XResizeRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XResizeRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            width: ref __self_0_5,
                            height: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XResizeRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XResizeRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XResizeRequestEvent {
                #[inline]
                fn clone(&self) -> XResizeRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XConfigureRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub above: Window,
                pub detail: ::std::os::raw::c_int,
                pub value_mask: ::std::os::raw::c_ulong,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XConfigureRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XConfigureRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            above: ref __self_0_11,
                            detail: ref __self_0_12,
                            value_mask: ref __self_0_13,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XConfigureRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("above", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("value_mask", &&(*__self_0_13));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XConfigureRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XConfigureRequestEvent {
                #[inline]
                fn clone(&self) -> XConfigureRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCirculateEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub place: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCirculateEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCirculateEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            place: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCirculateEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("place", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCirculateEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCirculateEvent {
                #[inline]
                fn clone(&self) -> XCirculateEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCirculateRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub place: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCirculateRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCirculateRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            place: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCirculateRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("place", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCirculateRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCirculateRequestEvent {
                #[inline]
                fn clone(&self) -> XCirculateRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPropertyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub atom: Atom,
                pub time: Time,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPropertyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPropertyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            atom: ref __self_0_5,
                            time: ref __self_0_6,
                            state: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPropertyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("atom", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPropertyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPropertyEvent {
                #[inline]
                fn clone(&self) -> XPropertyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionClearEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub selection: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionClearEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionClearEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            selection: ref __self_0_5,
                            time: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionClearEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionClearEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionClearEvent {
                #[inline]
                fn clone(&self) -> XSelectionClearEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub owner: Window,
                pub requestor: Window,
                pub selection: Atom,
                pub target: Atom,
                pub property: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            owner: ref __self_0_4,
                            requestor: ref __self_0_5,
                            selection: ref __self_0_6,
                            target: ref __self_0_7,
                            property: ref __self_0_8,
                            time: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("owner", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("requestor", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("target", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("property", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionRequestEvent {
                #[inline]
                fn clone(&self) -> XSelectionRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub requestor: Window,
                pub selection: Atom,
                pub target: Atom,
                pub property: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            requestor: ref __self_0_4,
                            selection: ref __self_0_5,
                            target: ref __self_0_6,
                            property: ref __self_0_7,
                            time: ref __self_0_8,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("requestor", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("target", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("property", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_8));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionEvent {
                #[inline]
                fn clone(&self) -> XSelectionEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XColormapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub colormap: Colormap,
                pub new: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XColormapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XColormapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            colormap: ref __self_0_5,
                            new: ref __self_0_6,
                            state: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XColormapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("new", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XColormapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XColormapEvent {
                #[inline]
                fn clone(&self) -> XColormapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XClientMessageEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub message_type: Atom,
                pub format: ::std::os::raw::c_int,
                pub data: XClientMessageEvent__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XClientMessageEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XClientMessageEvent {
                #[inline]
                fn clone(&self) -> XClientMessageEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            XClientMessageEvent__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union XClientMessageEvent__bindgen_ty_1 {
                pub b: [::std::os::raw::c_char; 20usize],
                pub s: [::std::os::raw::c_short; 10usize],
                pub l: [::std::os::raw::c_long; 5usize],
                _bindgen_union_align: [u64; 5usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XClientMessageEvent__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XClientMessageEvent__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> XClientMessageEvent__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMappingEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub request: ::std::os::raw::c_int,
                pub first_keycode: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMappingEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMappingEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            request: ref __self_0_5,
                            first_keycode: ref __self_0_6,
                            count: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMappingEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("request", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("first_keycode", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMappingEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMappingEvent {
                #[inline]
                fn clone(&self) -> XMappingEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XErrorEvent {
                pub type_: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub resourceid: XID,
                pub serial: ::std::os::raw::c_ulong,
                pub error_code: ::std::os::raw::c_uchar,
                pub request_code: ::std::os::raw::c_uchar,
                pub minor_code: ::std::os::raw::c_uchar,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XErrorEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XErrorEvent {
                            type_: ref __self_0_0,
                            display: ref __self_0_1,
                            resourceid: ref __self_0_2,
                            serial: ref __self_0_3,
                            error_code: ref __self_0_4,
                            request_code: ref __self_0_5,
                            minor_code: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XErrorEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("resourceid", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("error_code", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("request_code", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XErrorEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XErrorEvent {
                #[inline]
                fn clone(&self) -> XErrorEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XAnyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XAnyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XAnyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XAnyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XAnyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XAnyEvent {
                #[inline]
                fn clone(&self) -> XAnyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGenericEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub extension: ::std::os::raw::c_int,
                pub evtype: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGenericEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGenericEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            extension: ref __self_0_4,
                            evtype: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGenericEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("evtype", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGenericEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGenericEvent {
                #[inline]
                fn clone(&self) -> XGenericEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGenericEventCookie {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub extension: ::std::os::raw::c_int,
                pub evtype: ::std::os::raw::c_int,
                pub cookie: ::std::os::raw::c_uint,
                pub data: *mut ::std::os::raw::c_void,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGenericEventCookie {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGenericEventCookie {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            extension: ref __self_0_4,
                            evtype: ref __self_0_5,
                            cookie: ref __self_0_6,
                            data: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGenericEventCookie");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("evtype", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("cookie", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("data", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGenericEventCookie {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGenericEventCookie {
                #[inline]
                fn clone(&self) -> XGenericEventCookie {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XEvent {
                pub type_: ::std::os::raw::c_int,
                pub xany: XAnyEvent,
                pub xkey: XKeyEvent,
                pub xbutton: XButtonEvent,
                pub xmotion: XMotionEvent,
                pub xcrossing: XCrossingEvent,
                pub xfocus: XFocusChangeEvent,
                pub xexpose: XExposeEvent,
                pub xgraphicsexpose: XGraphicsExposeEvent,
                pub xnoexpose: XNoExposeEvent,
                pub xvisibility: XVisibilityEvent,
                pub xcreatewindow: XCreateWindowEvent,
                pub xdestroywindow: XDestroyWindowEvent,
                pub xunmap: XUnmapEvent,
                pub xmap: XMapEvent,
                pub xmaprequest: XMapRequestEvent,
                pub xreparent: XReparentEvent,
                pub xconfigure: XConfigureEvent,
                pub xgravity: XGravityEvent,
                pub xresizerequest: XResizeRequestEvent,
                pub xconfigurerequest: XConfigureRequestEvent,
                pub xcirculate: XCirculateEvent,
                pub xcirculaterequest: XCirculateRequestEvent,
                pub xproperty: XPropertyEvent,
                pub xselectionclear: XSelectionClearEvent,
                pub xselectionrequest: XSelectionRequestEvent,
                pub xselection: XSelectionEvent,
                pub xcolormap: XColormapEvent,
                pub xclient: XClientMessageEvent,
                pub xmapping: XMappingEvent,
                pub xerror: XErrorEvent,
                pub xkeymap: XKeymapEvent,
                pub xgeneric: XGenericEvent,
                pub xcookie: XGenericEventCookie,
                pub pad: [::std::os::raw::c_long; 24usize],
                _bindgen_union_align: [u64; 24usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XEvent {
                #[inline]
                fn clone(&self) -> _XEvent {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XEvent = _XEvent;
            #[repr(C)]
            pub struct XCharStruct {
                pub lbearing: ::std::os::raw::c_short,
                pub rbearing: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_short,
                pub ascent: ::std::os::raw::c_short,
                pub descent: ::std::os::raw::c_short,
                pub attributes: ::std::os::raw::c_ushort,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCharStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCharStruct {
                            lbearing: ref __self_0_0,
                            rbearing: ref __self_0_1,
                            width: ref __self_0_2,
                            ascent: ref __self_0_3,
                            descent: ref __self_0_4,
                            attributes: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCharStruct");
                            let _ = debug_trait_builder.field("lbearing", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("rbearing", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("ascent", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("descent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("attributes", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCharStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCharStruct {
                #[inline]
                fn clone(&self) -> XCharStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontProp {
                pub name: Atom,
                pub card32: ::std::os::raw::c_ulong,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontProp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontProp {
                            name: ref __self_0_0,
                            card32: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontProp");
                            let _ = debug_trait_builder.field("name", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("card32", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontProp {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontProp {
                #[inline]
                fn clone(&self) -> XFontProp {
                    {
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontStruct {
                pub ext_data: *mut XExtData,
                pub fid: Font,
                pub direction: ::std::os::raw::c_uint,
                pub min_char_or_byte2: ::std::os::raw::c_uint,
                pub max_char_or_byte2: ::std::os::raw::c_uint,
                pub min_byte1: ::std::os::raw::c_uint,
                pub max_byte1: ::std::os::raw::c_uint,
                pub all_chars_exist: ::std::os::raw::c_int,
                pub default_char: ::std::os::raw::c_uint,
                pub n_properties: ::std::os::raw::c_int,
                pub properties: *mut XFontProp,
                pub min_bounds: XCharStruct,
                pub max_bounds: XCharStruct,
                pub per_char: *mut XCharStruct,
                pub ascent: ::std::os::raw::c_int,
                pub descent: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontStruct {
                            ext_data: ref __self_0_0,
                            fid: ref __self_0_1,
                            direction: ref __self_0_2,
                            min_char_or_byte2: ref __self_0_3,
                            max_char_or_byte2: ref __self_0_4,
                            min_byte1: ref __self_0_5,
                            max_byte1: ref __self_0_6,
                            all_chars_exist: ref __self_0_7,
                            default_char: ref __self_0_8,
                            n_properties: ref __self_0_9,
                            properties: ref __self_0_10,
                            min_bounds: ref __self_0_11,
                            max_bounds: ref __self_0_12,
                            per_char: ref __self_0_13,
                            ascent: ref __self_0_14,
                            descent: ref __self_0_15,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontStruct");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("fid", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("min_char_or_byte2", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("max_char_or_byte2", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("min_byte1", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("max_byte1", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("all_chars_exist", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("default_char", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("n_properties", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("properties", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("min_bounds", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("max_bounds", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("per_char", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("ascent", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("descent", &&(*__self_0_15));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontStruct {
                #[inline]
                fn clone(&self) -> XFontStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XFontProp>;
                        let _: ::core::clone::AssertParamIsClone<XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<*mut XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTextItem {
                pub chars: *mut ::std::os::raw::c_char,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font: Font,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTextItem {
                #[inline]
                fn clone(&self) -> XTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XChar2b {
                pub byte1: ::std::os::raw::c_uchar,
                pub byte2: ::std::os::raw::c_uchar,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XChar2b {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XChar2b {
                            byte1: ref __self_0_0,
                            byte2: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XChar2b");
                            let _ = debug_trait_builder.field("byte1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("byte2", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XChar2b {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XChar2b {
                #[inline]
                fn clone(&self) -> XChar2b {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTextItem16 {
                pub chars: *mut XChar2b,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font: Font,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTextItem16 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTextItem16 {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTextItem16");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTextItem16 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTextItem16 {
                #[inline]
                fn clone(&self) -> XTextItem16 {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XChar2b>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union XEDataObject {
                pub display: *mut Display,
                pub gc: GC,
                pub visual: *mut Visual,
                pub screen: *mut Screen,
                pub pixmap_format: *mut ScreenFormat,
                pub font: *mut XFontStruct,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XEDataObject {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XEDataObject {
                #[inline]
                fn clone(&self) -> XEDataObject {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontSetExtents {
                pub max_ink_extent: XRectangle,
                pub max_logical_extent: XRectangle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontSetExtents {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontSetExtents {
                            max_ink_extent: ref __self_0_0,
                            max_logical_extent: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontSetExtents");
                            let _ = debug_trait_builder.field("max_ink_extent", &&(*__self_0_0));
                            let _ =
                                debug_trait_builder.field("max_logical_extent", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontSetExtents {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontSetExtents {
                #[inline]
                fn clone(&self) -> XFontSetExtents {
                    {
                        let _: ::core::clone::AssertParamIsClone<XRectangle>;
                        let _: ::core::clone::AssertParamIsClone<XRectangle>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XOM {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XOM {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XOM {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XOM");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XOM {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XOM {
                #[inline]
                fn clone(&self) -> _XOM {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XOM = *mut _XOM;
            #[repr(C)]
            pub struct _XOC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XOC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XOC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XOC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XOC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XOC {
                #[inline]
                fn clone(&self) -> _XOC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XOC = *mut _XOC;
            pub type XFontSet = *mut _XOC;
            #[repr(C)]
            pub struct XmbTextItem {
                pub chars: *mut ::std::os::raw::c_char,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font_set: XFontSet,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XmbTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XmbTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font_set: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XmbTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font_set", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XmbTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XmbTextItem {
                #[inline]
                fn clone(&self) -> XmbTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XFontSet>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XwcTextItem {
                pub chars: *mut wchar_t,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font_set: XFontSet,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XwcTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XwcTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font_set: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XwcTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font_set", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XwcTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XwcTextItem {
                #[inline]
                fn clone(&self) -> XwcTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut wchar_t>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XFontSet>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XOMCharSetList {
                pub charset_count: ::std::os::raw::c_int,
                pub charset_list: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMCharSetList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMCharSetList {
                            charset_count: ref __self_0_0,
                            charset_list: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMCharSetList");
                            let _ = debug_trait_builder.field("charset_count", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("charset_list", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMCharSetList {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMCharSetList {
                #[inline]
                fn clone(&self) -> XOMCharSetList {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            pub const XOrientation_XOMOrientation_LTR_TTB: XOrientation = 0;
            pub const XOrientation_XOMOrientation_RTL_TTB: XOrientation = 1;
            pub const XOrientation_XOMOrientation_TTB_LTR: XOrientation = 2;
            pub const XOrientation_XOMOrientation_TTB_RTL: XOrientation = 3;
            pub const XOrientation_XOMOrientation_Context: XOrientation = 4;
            pub type XOrientation = u32;
            #[repr(C)]
            pub struct XOMOrientation {
                pub num_orientation: ::std::os::raw::c_int,
                pub orientation: *mut XOrientation,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMOrientation {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMOrientation {
                            num_orientation: ref __self_0_0,
                            orientation: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMOrientation");
                            let _ = debug_trait_builder.field("num_orientation", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("orientation", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMOrientation {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMOrientation {
                #[inline]
                fn clone(&self) -> XOMOrientation {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XOrientation>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XOMFontInfo {
                pub num_font: ::std::os::raw::c_int,
                pub font_struct_list: *mut *mut XFontStruct,
                pub font_name_list: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMFontInfo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMFontInfo {
                            num_font: ref __self_0_0,
                            font_struct_list: ref __self_0_1,
                            font_name_list: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMFontInfo");
                            let _ = debug_trait_builder.field("num_font", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("font_struct_list", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("font_name_list", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMFontInfo {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMFontInfo {
                #[inline]
                fn clone(&self) -> XOMFontInfo {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut XFontStruct>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XIM {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIM {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIM {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIM");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIM {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIM {
                #[inline]
                fn clone(&self) -> _XIM {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XIM = *mut _XIM;
            #[repr(C)]
            pub struct _XIC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIC {
                #[inline]
                fn clone(&self) -> _XIC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XIC = *mut _XIC;
            pub type XIMProc = ::std::option::Option<
                unsafe extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer),
            >;
            pub type XICProc = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: XIC,
                    arg2: XPointer,
                    arg3: XPointer,
                ) -> ::std::os::raw::c_int,
            >;
            pub type XIDProc = ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display, arg2: XPointer, arg3: XPointer),
            >;
            pub type XIMStyle = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct XIMStyles {
                pub count_styles: ::std::os::raw::c_ushort,
                pub supported_styles: *mut XIMStyle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMStyles {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMStyles {
                            count_styles: ref __self_0_0,
                            supported_styles: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMStyles");
                            let _ = debug_trait_builder.field("count_styles", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("supported_styles", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMStyles {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMStyles {
                #[inline]
                fn clone(&self) -> XIMStyles {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStyle>;
                        *self
                    }
                }
            }
            pub type XVaNestedList = *mut ::std::os::raw::c_void;
            #[repr(C)]
            pub struct XIMCallback {
                pub client_data: XPointer,
                pub callback: XIMProc,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMCallback {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMCallback {
                            client_data: ref __self_0_0,
                            callback: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMCallback");
                            let _ = debug_trait_builder.field("client_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("callback", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMCallback {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMCallback {
                #[inline]
                fn clone(&self) -> XIMCallback {
                    {
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XIMProc>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XICCallback {
                pub client_data: XPointer,
                pub callback: XICProc,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XICCallback {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XICCallback {
                            client_data: ref __self_0_0,
                            callback: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XICCallback");
                            let _ = debug_trait_builder.field("client_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("callback", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XICCallback {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XICCallback {
                #[inline]
                fn clone(&self) -> XICCallback {
                    {
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XICProc>;
                        *self
                    }
                }
            }
            pub type XIMFeedback = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMText {
                pub length: ::std::os::raw::c_ushort,
                pub feedback: *mut XIMFeedback,
                pub encoding_is_wchar: ::std::os::raw::c_int,
                pub string: _XIMText__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMText {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMText {
                #[inline]
                fn clone(&self) -> _XIMText {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMFeedback>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<_XIMText__bindgen_ty_1>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMText__bindgen_ty_1 {
                pub multi_byte: *mut ::std::os::raw::c_char,
                pub wide_char: *mut wchar_t,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMText__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMText__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMText__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMText = _XIMText;
            pub type XIMPreeditState = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMPreeditStateNotifyCallbackStruct {
                pub state: XIMPreeditState,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditStateNotifyCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditStateNotifyCallbackStruct {
                            state: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditStateNotifyCallbackStruct");
                            let _ = debug_trait_builder.field("state", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditStateNotifyCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditStateNotifyCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditStateNotifyCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMPreeditState>;
                        *self
                    }
                }
            }
            pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct;
            pub type XIMResetState = ::std::os::raw::c_ulong;
            pub type XIMStringConversionFeedback = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMStringConversionText {
                pub length: ::std::os::raw::c_ushort,
                pub feedback: *mut XIMStringConversionFeedback,
                pub encoding_is_wchar: ::std::os::raw::c_int,
                pub string: _XIMStringConversionText__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionText {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionText {
                #[inline]
                fn clone(&self) -> _XIMStringConversionText {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStringConversionFeedback>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            _XIMStringConversionText__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMStringConversionText__bindgen_ty_1 {
                pub mbs: *mut ::std::os::raw::c_char,
                pub wcs: *mut wchar_t,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionText__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionText__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMStringConversionText__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMStringConversionText = _XIMStringConversionText;
            pub type XIMStringConversionPosition = ::std::os::raw::c_ushort;
            pub type XIMStringConversionType = ::std::os::raw::c_ushort;
            pub type XIMStringConversionOperation = ::std::os::raw::c_ushort;
            pub const XIMCaretDirection_XIMForwardChar: XIMCaretDirection = 0;
            pub const XIMCaretDirection_XIMBackwardChar: XIMCaretDirection = 1;
            pub const XIMCaretDirection_XIMForwardWord: XIMCaretDirection = 2;
            pub const XIMCaretDirection_XIMBackwardWord: XIMCaretDirection = 3;
            pub const XIMCaretDirection_XIMCaretUp: XIMCaretDirection = 4;
            pub const XIMCaretDirection_XIMCaretDown: XIMCaretDirection = 5;
            pub const XIMCaretDirection_XIMNextLine: XIMCaretDirection = 6;
            pub const XIMCaretDirection_XIMPreviousLine: XIMCaretDirection = 7;
            pub const XIMCaretDirection_XIMLineStart: XIMCaretDirection = 8;
            pub const XIMCaretDirection_XIMLineEnd: XIMCaretDirection = 9;
            pub const XIMCaretDirection_XIMAbsolutePosition: XIMCaretDirection = 10;
            pub const XIMCaretDirection_XIMDontChange: XIMCaretDirection = 11;
            pub type XIMCaretDirection = u32;
            #[repr(C)]
            pub struct _XIMStringConversionCallbackStruct {
                pub position: XIMStringConversionPosition,
                pub direction: XIMCaretDirection,
                pub operation: XIMStringConversionOperation,
                pub factor: ::std::os::raw::c_ushort,
                pub text: *mut XIMStringConversionText,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMStringConversionCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMStringConversionCallbackStruct {
                            position: ref __self_0_0,
                            direction: ref __self_0_1,
                            operation: ref __self_0_2,
                            factor: ref __self_0_3,
                            text: ref __self_0_4,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMStringConversionCallbackStruct");
                            let _ = debug_trait_builder.field("position", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("operation", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("factor", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("text", &&(*__self_0_4));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMStringConversionCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMStringConversionPosition>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretDirection>;
                        let _: ::core::clone::AssertParamIsClone<XIMStringConversionOperation>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStringConversionText>;
                        *self
                    }
                }
            }
            pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;
            #[repr(C)]
            pub struct _XIMPreeditDrawCallbackStruct {
                pub caret: ::std::os::raw::c_int,
                pub chg_first: ::std::os::raw::c_int,
                pub chg_length: ::std::os::raw::c_int,
                pub text: *mut XIMText,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditDrawCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditDrawCallbackStruct {
                            caret: ref __self_0_0,
                            chg_first: ref __self_0_1,
                            chg_length: ref __self_0_2,
                            text: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditDrawCallbackStruct");
                            let _ = debug_trait_builder.field("caret", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("chg_first", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("chg_length", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("text", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditDrawCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditDrawCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditDrawCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMText>;
                        *self
                    }
                }
            }
            pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;
            pub const XIMCaretStyle_XIMIsInvisible: XIMCaretStyle = 0;
            pub const XIMCaretStyle_XIMIsPrimary: XIMCaretStyle = 1;
            pub const XIMCaretStyle_XIMIsSecondary: XIMCaretStyle = 2;
            pub type XIMCaretStyle = u32;
            #[repr(C)]
            pub struct _XIMPreeditCaretCallbackStruct {
                pub position: ::std::os::raw::c_int,
                pub direction: XIMCaretDirection,
                pub style: XIMCaretStyle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditCaretCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditCaretCallbackStruct {
                            position: ref __self_0_0,
                            direction: ref __self_0_1,
                            style: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditCaretCallbackStruct");
                            let _ = debug_trait_builder.field("position", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("style", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditCaretCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditCaretCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditCaretCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretDirection>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretStyle>;
                        *self
                    }
                }
            }
            pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;
            pub const XIMStatusDataType_XIMTextType: XIMStatusDataType = 0;
            pub const XIMStatusDataType_XIMBitmapType: XIMStatusDataType = 1;
            pub type XIMStatusDataType = u32;
            #[repr(C)]
            pub struct _XIMStatusDrawCallbackStruct {
                pub type_: XIMStatusDataType,
                pub data: _XIMStatusDrawCallbackStruct__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStatusDrawCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStatusDrawCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMStatusDrawCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMStatusDataType>;
                        let _: ::core::clone::AssertParamIsClone<
                            _XIMStatusDrawCallbackStruct__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                pub text: *mut XIMText,
                pub bitmap: Pixmap,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStatusDrawCallbackStruct__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;
            #[repr(C)]
            pub struct _XIMHotKeyTrigger {
                pub keysym: KeySym,
                pub modifier: ::std::os::raw::c_int,
                pub modifier_mask: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMHotKeyTrigger {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMHotKeyTrigger {
                            keysym: ref __self_0_0,
                            modifier: ref __self_0_1,
                            modifier_mask: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIMHotKeyTrigger");
                            let _ = debug_trait_builder.field("keysym", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("modifier", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("modifier_mask", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMHotKeyTrigger {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMHotKeyTrigger {
                #[inline]
                fn clone(&self) -> _XIMHotKeyTrigger {
                    {
                        let _: ::core::clone::AssertParamIsClone<KeySym>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XIMHotKeyTrigger = _XIMHotKeyTrigger;
            #[repr(C)]
            pub struct _XIMHotKeyTriggers {
                pub num_hot_key: ::std::os::raw::c_int,
                pub key: *mut XIMHotKeyTrigger,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMHotKeyTriggers {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMHotKeyTriggers {
                            num_hot_key: ref __self_0_0,
                            key: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIMHotKeyTriggers");
                            let _ = debug_trait_builder.field("num_hot_key", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("key", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMHotKeyTriggers {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMHotKeyTriggers {
                #[inline]
                fn clone(&self) -> _XIMHotKeyTriggers {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMHotKeyTrigger>;
                        *self
                    }
                }
            }
            pub type XIMHotKeyTriggers = _XIMHotKeyTriggers;
            pub type XIMHotKeyState = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct XIMValuesList {
                pub count_values: ::std::os::raw::c_ushort,
                pub supported_values: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMValuesList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMValuesList {
                            count_values: ref __self_0_0,
                            supported_values: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMValuesList");
                            let _ = debug_trait_builder.field("count_values", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("supported_values", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMValuesList {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMValuesList {
                #[inline]
                fn clone(&self) -> XIMValuesList {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            extern "C" {
                pub static mut _Xdebug: ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XLoadQueryFont(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                ) -> *mut XFontStruct;
            }
            extern "C" {
                pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
            }
            extern "C" {
                pub fn XGetMotionEvents(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Time,
                    arg4: Time,
                    arg5: *mut ::std::os::raw::c_int,
                ) -> *mut XTimeCoord;
            }
            extern "C" {
                pub fn XDeleteModifiermapEntry(
                    arg1: *mut XModifierKeymap,
                    arg2: KeyCode,
                    arg3: ::std::os::raw::c_int,
                ) -> *mut XModifierKeymap;
            }
            extern "C" {
                pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
            }
            extern "C" {
                pub fn XInsertModifiermapEntry(
                    arg1: *mut XModifierKeymap,
                    arg2: KeyCode,
                    arg3: ::std::os::raw::c_int,
                ) -> *mut XModifierKeymap;
            }
            extern "C" {
                pub fn XNewModifiermap(arg1: ::std::os::raw::c_int) -> *mut XModifierKeymap;
            }
            extern "C" {
                pub fn XCreateImage(
                    arg1: *mut Display,
                    arg2: *mut Visual,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_char,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_uint,
                    arg9: ::std::os::raw::c_int,
                    arg10: ::std::os::raw::c_int,
                ) -> *mut XImage;
            }
            extern "C" {
                pub fn XInitImage(arg1: *mut XImage) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetImage(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_ulong,
                    arg8: ::std::os::raw::c_int,
                ) -> *mut XImage;
            }
            extern "C" {
                pub fn XGetSubImage(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_ulong,
                    arg8: ::std::os::raw::c_int,
                    arg9: *mut XImage,
                    arg10: ::std::os::raw::c_int,
                    arg11: ::std::os::raw::c_int,
                ) -> *mut XImage;
            }
            extern "C" {
                pub fn XOpenDisplay(arg1: *const ::std::os::raw::c_char) -> *mut Display;
            }
            extern "C" {
                pub fn XrmInitialize();
            }
            extern "C" {
                pub fn XFetchBytes(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XFetchBuffer(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetAtomNames(
                    arg1: *mut Display,
                    arg2: *mut Atom,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetDefault(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDisplayName(
                    arg1: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XKeysymToString(arg1: KeySym) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XSynchronize(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut Display,
                        arg2: ::std::os::raw::c_int,
                    ) -> ::std::os::raw::c_int,
                >;
            }
            extern "C" {
                pub fn XSetAfterFunction(
                    arg1: *mut Display,
                    arg2: ::std::option::Option<
                        unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
                    >,
                ) -> ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut Display,
                        arg2: ::std::option::Option<
                            unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
                        >,
                    ) -> ::std::os::raw::c_int,
                >;
            }
            extern "C" {
                pub fn XInternAtom(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> Atom;
            }
            extern "C" {
                pub fn XInternAtoms(
                    arg1: *mut Display,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut Atom,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) -> Colormap;
            }
            extern "C" {
                pub fn XCreateColormap(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Visual,
                    arg4: ::std::os::raw::c_int,
                ) -> Colormap;
            }
            extern "C" {
                pub fn XCreatePixmapCursor(
                    arg1: *mut Display,
                    arg2: Pixmap,
                    arg3: Pixmap,
                    arg4: *mut XColor,
                    arg5: *mut XColor,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                ) -> Cursor;
            }
            extern "C" {
                pub fn XCreateGlyphCursor(
                    arg1: *mut Display,
                    arg2: Font,
                    arg3: Font,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                    arg6: *const XColor,
                    arg7: *const XColor,
                ) -> Cursor;
            }
            extern "C" {
                pub fn XCreateFontCursor(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_uint,
                ) -> Cursor;
            }
            extern "C" {
                pub fn XLoadFont(arg1: *mut Display, arg2: *const ::std::os::raw::c_char) -> Font;
            }
            extern "C" {
                pub fn XCreateGC(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: *mut XGCValues,
                ) -> GC;
            }
            extern "C" {
                pub fn XGContextFromGC(arg1: GC) -> GContext;
            }
            extern "C" {
                pub fn XFlushGC(arg1: *mut Display, arg2: GC);
            }
            extern "C" {
                pub fn XCreatePixmap(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                ) -> Pixmap;
            }
            extern "C" {
                pub fn XCreateBitmapFromData(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                ) -> Pixmap;
            }
            extern "C" {
                pub fn XCreatePixmapFromBitmapData(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_ulong,
                    arg7: ::std::os::raw::c_ulong,
                    arg8: ::std::os::raw::c_uint,
                ) -> Pixmap;
            }
            extern "C" {
                pub fn XCreateSimpleWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_ulong,
                    arg9: ::std::os::raw::c_ulong,
                ) -> Window;
            }
            extern "C" {
                pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
            }
            extern "C" {
                pub fn XCreateWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_uint,
                    arg10: *mut Visual,
                    arg11: ::std::os::raw::c_ulong,
                    arg12: *mut XSetWindowAttributes,
                ) -> Window;
            }
            extern "C" {
                pub fn XListInstalledColormaps(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> *mut Colormap;
            }
            extern "C" {
                pub fn XListFonts(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> *mut *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XListFontsWithInfo(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut *mut XFontStruct,
                ) -> *mut *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetFontPath(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                ) -> *mut *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XListExtensions(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                ) -> *mut *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XListProperties(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> *mut Atom;
            }
            extern "C" {
                pub fn XListHosts(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> *mut XHostAddress;
            }
            extern "C" {
                pub fn XKeycodeToKeysym(
                    arg1: *mut Display,
                    arg2: KeyCode,
                    arg3: ::std::os::raw::c_int,
                ) -> KeySym;
            }
            extern "C" {
                pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::std::os::raw::c_int) -> KeySym;
            }
            extern "C" {
                pub fn XGetKeyboardMapping(
                    arg1: *mut Display,
                    arg2: KeyCode,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> *mut KeySym;
            }
            extern "C" {
                pub fn XStringToKeysym(arg1: *const ::std::os::raw::c_char) -> KeySym;
            }
            extern "C" {
                pub fn XMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
            }
            extern "C" {
                pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
            }
            extern "C" {
                pub fn XResourceManagerString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
            }
            extern "C" {
                pub fn XInitThreads() -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XLockDisplay(arg1: *mut Display);
            }
            extern "C" {
                pub fn XUnlockDisplay(arg1: *mut Display);
            }
            extern "C" {
                pub fn XInitExtension(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                ) -> *mut XExtCodes;
            }
            extern "C" {
                pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
            }
            extern "C" {
                pub fn XFindOnExtensionList(
                    arg1: *mut *mut XExtData,
                    arg2: ::std::os::raw::c_int,
                ) -> *mut XExtData;
            }
            extern "C" {
                pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
            }
            extern "C" {
                pub fn XRootWindow(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> Window;
            }
            extern "C" {
                pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
            }
            extern "C" {
                pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
            }
            extern "C" {
                pub fn XDefaultVisual(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> *mut Visual;
            }
            extern "C" {
                pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
            }
            extern "C" {
                pub fn XDefaultGC(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> GC;
            }
            extern "C" {
                pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
            }
            extern "C" {
                pub fn XBlackPixel(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XWhitePixel(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XAllPlanes() -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XNextRequest(arg1: *mut Display) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> ::std::os::raw::c_ulong;
            }
            extern "C" {
                pub fn XServerVendor(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDisplayString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDefaultColormap(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> Colormap;
            }
            extern "C" {
                pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
            }
            extern "C" {
                pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
            }
            extern "C" {
                pub fn XScreenOfDisplay(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> *mut Screen;
            }
            extern "C" {
                pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
            }
            extern "C" {
                pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_long;
            }
            extern "C" {
                pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            pub type XErrorHandler = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut Display,
                    arg2: *mut XErrorEvent,
                ) -> ::std::os::raw::c_int,
            >;
            extern "C" {
                pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
            }
            pub type XIOErrorHandler = ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
            >;
            extern "C" {
                pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
            }
            extern "C" {
                pub fn XListPixmapFormats(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                ) -> *mut XPixmapFormatValues;
            }
            extern "C" {
                pub fn XListDepths(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XReconfigureWMWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_uint,
                    arg5: *mut XWindowChanges,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetWMProtocols(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut Atom,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWMProtocols(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Atom,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XIconifyWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWithdrawWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetCommand(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut *mut ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetWMColormapWindows(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut Window,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWMColormapWindows(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Window,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeStringList(arg1: *mut *mut ::std::os::raw::c_char);
            }
            extern "C" {
                pub fn XSetTransientForHint(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XActivateScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAddHost(
                    arg1: *mut Display,
                    arg2: *mut XHostAddress,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAddHosts(
                    arg1: *mut Display,
                    arg2: *mut XHostAddress,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAddToExtensionList(
                    arg1: *mut *mut _XExtData,
                    arg2: *mut XExtData,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAllocColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAllocColorCells(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_ulong,
                    arg5: ::std::os::raw::c_uint,
                    arg6: *mut ::std::os::raw::c_ulong,
                    arg7: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAllocColorPlanes(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_ulong,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                    arg8: ::std::os::raw::c_int,
                    arg9: *mut ::std::os::raw::c_ulong,
                    arg10: *mut ::std::os::raw::c_ulong,
                    arg11: *mut ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAllocNamedColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *mut XColor,
                    arg5: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAllowEvents(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAutoRepeatOff(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XAutoRepeatOn(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XBell(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XBitmapBitOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XBitmapPad(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XBitmapUnit(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCellsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeActivePointerGrab(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_uint,
                    arg3: Cursor,
                    arg4: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeGC(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: *mut XGCValues,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeKeyboardControl(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_ulong,
                    arg3: *mut XKeyboardControl,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeKeyboardMapping(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut KeySym,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangePointerControl(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeProperty(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Atom,
                    arg4: Atom,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const ::std::os::raw::c_uchar,
                    arg8: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeSaveSet(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XChangeWindowAttributes(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: *mut XSetWindowAttributes,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCheckIfEvent(
                    arg1: *mut Display,
                    arg2: *mut XEvent,
                    arg3: ::std::option::Option<
                        unsafe extern "C" fn(
                            arg1: *mut Display,
                            arg2: *mut XEvent,
                            arg3: XPointer,
                        ) -> ::std::os::raw::c_int,
                    >,
                    arg4: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCheckMaskEvent(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_long,
                    arg3: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCheckTypedEvent(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCheckTypedWindowEvent(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCheckWindowEvent(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_long,
                    arg4: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCirculateSubwindows(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCirculateSubwindowsDown(
                    arg1: *mut Display,
                    arg2: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCirculateSubwindowsUp(
                    arg1: *mut Display,
                    arg2: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XClearArea(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCloseDisplay(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XConfigureWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_uint,
                    arg4: *mut XWindowChanges,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XConnectionNumber(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XConvertSelection(
                    arg1: *mut Display,
                    arg2: Atom,
                    arg3: Atom,
                    arg4: Atom,
                    arg5: Window,
                    arg6: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCopyArea(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: Drawable,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_uint,
                    arg9: ::std::os::raw::c_int,
                    arg10: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCopyGC(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: GC,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XCopyPlane(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: Drawable,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_uint,
                    arg9: ::std::os::raw::c_int,
                    arg10: ::std::os::raw::c_int,
                    arg11: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDefaultDepth(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDefaultScreen(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDefineCursor(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Cursor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDeleteProperty(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Atom,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDestroySubwindows(
                    arg1: *mut Display,
                    arg2: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDoesBackingStore(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayCells(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayHeight(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayHeightMM(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayKeycodes(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayPlanes(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayWidth(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDisplayWidthMM(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawArc(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawArcs(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XArc,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawImageString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *const ::std::os::raw::c_char,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawImageString16(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *const XChar2b,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawLine(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawLines(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XPoint,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawPoint(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawPoints(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XPoint,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawRectangle(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawRectangles(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XRectangle,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawSegments(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XSegment,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *const ::std::os::raw::c_char,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawString16(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *const XChar2b,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawText(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut XTextItem,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDrawText16(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut XTextItem16,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XEnableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XEventsQueued(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFetchName(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFillArc(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFillArcs(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XArc,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFillPolygon(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XPoint,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFillRectangle(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFillRectangles(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XRectangle,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFlush(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XForceScreenSaver(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFree(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeColors(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut ::std::os::raw::c_ulong,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeExtensionList(
                    arg1: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeFont(
                    arg1: *mut Display,
                    arg2: *mut XFontStruct,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeFontInfo(
                    arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut XFontStruct,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeFontNames(
                    arg1: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeFontPath(
                    arg1: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGeometry(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_int,
                    arg10: *mut ::std::os::raw::c_int,
                    arg11: *mut ::std::os::raw::c_int,
                    arg12: *mut ::std::os::raw::c_int,
                    arg13: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetErrorDatabaseText(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char,
                    arg5: *mut ::std::os::raw::c_char,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetErrorText(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetFontProperty(
                    arg1: *mut XFontStruct,
                    arg2: Atom,
                    arg3: *mut ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetGCValues(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: *mut XGCValues,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetGeometry(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: *mut Window,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_uint,
                    arg7: *mut ::std::os::raw::c_uint,
                    arg8: *mut ::std::os::raw::c_uint,
                    arg9: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetIconName(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetInputFocus(
                    arg1: *mut Display,
                    arg2: *mut Window,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetKeyboardControl(
                    arg1: *mut Display,
                    arg2: *mut XKeyboardState,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetPointerControl(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetPointerMapping(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_uchar,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetScreenSaver(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetTransientForHint(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetWindowProperty(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Atom,
                    arg4: ::std::os::raw::c_long,
                    arg5: ::std::os::raw::c_long,
                    arg6: ::std::os::raw::c_int,
                    arg7: Atom,
                    arg8: *mut Atom,
                    arg9: *mut ::std::os::raw::c_int,
                    arg10: *mut ::std::os::raw::c_ulong,
                    arg11: *mut ::std::os::raw::c_ulong,
                    arg12: *mut *mut ::std::os::raw::c_uchar,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetWindowAttributes(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut XWindowAttributes,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGrabButton(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_uint,
                    arg3: ::std::os::raw::c_uint,
                    arg4: Window,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_int,
                    arg8: ::std::os::raw::c_int,
                    arg9: Window,
                    arg10: Cursor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGrabKey(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_uint,
                    arg4: Window,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGrabKeyboard(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGrabPointer(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: Window,
                    arg8: Cursor,
                    arg9: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XHeightOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XIfEvent(
                    arg1: *mut Display,
                    arg2: *mut XEvent,
                    arg3: ::std::option::Option<
                        unsafe extern "C" fn(
                            arg1: *mut Display,
                            arg2: *mut XEvent,
                            arg3: XPointer,
                        ) -> ::std::os::raw::c_int,
                    >,
                    arg4: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XImageByteOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XInstallColormap(
                    arg1: *mut Display,
                    arg2: Colormap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
            }
            extern "C" {
                pub fn XKillClient(arg1: *mut Display, arg2: XID) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XLookupColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *mut XColor,
                    arg5: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMaskEvent(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_long,
                    arg3: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMoveResizeWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XMoveWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XNoOp(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XParseColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XParseGeometry(
                    arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_uint,
                    arg5: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPeekIfEvent(
                    arg1: *mut Display,
                    arg2: *mut XEvent,
                    arg3: ::std::option::Option<
                        unsafe extern "C" fn(
                            arg1: *mut Display,
                            arg2: *mut XEvent,
                            arg3: XPointer,
                        ) -> ::std::os::raw::c_int,
                    >,
                    arg4: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPending(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XProtocolRevision(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XProtocolVersion(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPutBackEvent(
                    arg1: *mut Display,
                    arg2: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XPutImage(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: *mut XImage,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_uint,
                    arg10: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQLength(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryBestCursor(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                    arg5: *mut ::std::os::raw::c_uint,
                    arg6: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryBestSize(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: Drawable,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                    arg6: *mut ::std::os::raw::c_uint,
                    arg7: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryBestStipple(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                    arg5: *mut ::std::os::raw::c_uint,
                    arg6: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryBestTile(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                    arg5: *mut ::std::os::raw::c_uint,
                    arg6: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryColors(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut XColor,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryExtension(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryKeymap(
                    arg1: *mut Display,
                    arg2: *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryPointer(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Window,
                    arg4: *mut Window,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut ::std::os::raw::c_int,
                    arg9: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryTextExtents(
                    arg1: *mut Display,
                    arg2: XID,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut XCharStruct,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryTextExtents16(
                    arg1: *mut Display,
                    arg2: XID,
                    arg3: *const XChar2b,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut XCharStruct,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XQueryTree(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Window,
                    arg4: *mut Window,
                    arg5: *mut *mut Window,
                    arg6: *mut ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XReadBitmapFile(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_uint,
                    arg5: *mut ::std::os::raw::c_uint,
                    arg6: *mut Pixmap,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XReadBitmapFileData(
                    arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_uint,
                    arg3: *mut ::std::os::raw::c_uint,
                    arg4: *mut *mut ::std::os::raw::c_uchar,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRebindKeysym(
                    arg1: *mut Display,
                    arg2: KeySym,
                    arg3: *mut KeySym,
                    arg4: ::std::os::raw::c_int,
                    arg5: *const ::std::os::raw::c_uchar,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRecolorCursor(
                    arg1: *mut Display,
                    arg2: Cursor,
                    arg3: *mut XColor,
                    arg4: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRemoveFromSaveSet(
                    arg1: *mut Display,
                    arg2: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRemoveHost(
                    arg1: *mut Display,
                    arg2: *mut XHostAddress,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRemoveHosts(
                    arg1: *mut Display,
                    arg2: *mut XHostAddress,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XReparentWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Window,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XResetScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XResizeWindow(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRestackWindows(
                    arg1: *mut Display,
                    arg2: *mut Window,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRotateBuffers(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRotateWindowProperties(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut Atom,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XScreenCount(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSelectInput(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_long,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSendEvent(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_long,
                    arg5: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetAccessControl(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetArcMode(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetBackground(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetClipMask(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: Pixmap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetClipOrigin(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetClipRectangles(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut XRectangle,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetCloseDownMode(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetCommand(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *mut *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetDashes(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetFillRule(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetFillStyle(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetFontPath(
                    arg1: *mut Display,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetForeground(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetFunction(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetGraphicsExposures(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetIconName(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetInputFocus(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_int,
                    arg4: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetLineAttributes(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetModifierMapping(
                    arg1: *mut Display,
                    arg2: *mut XModifierKeymap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetPlaneMask(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetPointerMapping(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_uchar,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetScreenSaver(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetSelectionOwner(
                    arg1: *mut Display,
                    arg2: Atom,
                    arg3: Window,
                    arg4: Time,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetState(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_ulong,
                    arg4: ::std::os::raw::c_ulong,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetStipple(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: Pixmap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetSubwindowMode(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetTSOrigin(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetTile(
                    arg1: *mut Display,
                    arg2: GC,
                    arg3: Pixmap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowBackground(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowBackgroundPixmap(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Pixmap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowBorder(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_ulong,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowBorderPixmap(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Pixmap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowBorderWidth(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetWindowColormap(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Colormap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreBuffer(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreBytes(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut XColor,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreColors(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *mut XColor,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreName(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XStoreNamedColor(
                    arg1: *mut Display,
                    arg2: Colormap,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_ulong,
                    arg5: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSync(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XTextExtents(
                    arg1: *mut XFontStruct,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut XCharStruct,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XTextExtents16(
                    arg1: *mut XFontStruct,
                    arg2: *const XChar2b,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut XCharStruct,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XTextWidth(
                    arg1: *mut XFontStruct,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XTextWidth16(
                    arg1: *mut XFontStruct,
                    arg2: *const XChar2b,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XTranslateCoordinates(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Window,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUngrabButton(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_uint,
                    arg3: ::std::os::raw::c_uint,
                    arg4: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUngrabKey(
                    arg1: *mut Display,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_uint,
                    arg4: Window,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUngrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUninstallColormap(
                    arg1: *mut Display,
                    arg2: Colormap,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XVendorRelease(arg1: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWarpPointer(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: Window,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_uint,
                    arg7: ::std::os::raw::c_uint,
                    arg8: ::std::os::raw::c_int,
                    arg9: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWidthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWindowEvent(
                    arg1: *mut Display,
                    arg2: Window,
                    arg3: ::std::os::raw::c_long,
                    arg4: *mut XEvent,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XWriteBitmapFile(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: Pixmap,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                    arg6: ::std::os::raw::c_int,
                    arg7: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSupportsLocale() -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetLocaleModifiers(
                    arg1: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XOpenOM(
                    arg1: *mut Display,
                    arg2: *mut _XrmHashBucketRec,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char,
                ) -> XOM;
            }
            extern "C" {
                pub fn XCloseOM(arg1: XOM) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
            }
            extern "C" {
                pub fn XLocaleOfOM(arg1: XOM) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XCreateOC(arg1: XOM, ...) -> XOC;
            }
            extern "C" {
                pub fn XDestroyOC(arg1: XOC);
            }
            extern "C" {
                pub fn XOMOfOC(arg1: XOC) -> XOM;
            }
            extern "C" {
                pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XCreateFontSet(
                    arg1: *mut Display,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut *mut ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_int,
                    arg5: *mut *mut ::std::os::raw::c_char,
                ) -> XFontSet;
            }
            extern "C" {
                pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
            }
            extern "C" {
                pub fn XFontsOfFontSet(
                    arg1: XFontSet,
                    arg2: *mut *mut *mut XFontStruct,
                    arg3: *mut *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XContextDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XContextualDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
            }
            extern "C" {
                pub fn XmbTextEscapement(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XwcTextEscapement(
                    arg1: XFontSet,
                    arg2: *const wchar_t,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn Xutf8TextEscapement(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XmbTextExtents(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XwcTextExtents(
                    arg1: XFontSet,
                    arg2: *const wchar_t,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn Xutf8TextExtents(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XmbTextPerCharExtents(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                    arg6: ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut XRectangle,
                    arg9: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XwcTextPerCharExtents(
                    arg1: XFontSet,
                    arg2: *const wchar_t,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                    arg6: ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut XRectangle,
                    arg9: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn Xutf8TextPerCharExtents(
                    arg1: XFontSet,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *mut XRectangle,
                    arg5: *mut XRectangle,
                    arg6: ::std::os::raw::c_int,
                    arg7: *mut ::std::os::raw::c_int,
                    arg8: *mut XRectangle,
                    arg9: *mut XRectangle,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XmbDrawText(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut XmbTextItem,
                    arg7: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XwcDrawText(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut XwcTextItem,
                    arg7: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn Xutf8DrawText(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: GC,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: *mut XmbTextItem,
                    arg7: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XmbDrawString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const ::std::os::raw::c_char,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XwcDrawString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const wchar_t,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn Xutf8DrawString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const ::std::os::raw::c_char,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XmbDrawImageString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const ::std::os::raw::c_char,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XwcDrawImageString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const wchar_t,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn Xutf8DrawImageString(
                    arg1: *mut Display,
                    arg2: Drawable,
                    arg3: XFontSet,
                    arg4: GC,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                    arg7: *const ::std::os::raw::c_char,
                    arg8: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn XOpenIM(
                    arg1: *mut Display,
                    arg2: *mut _XrmHashBucketRec,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_char,
                ) -> XIM;
            }
            extern "C" {
                pub fn XCloseIM(arg1: XIM) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
            }
            extern "C" {
                pub fn XLocaleOfIM(arg1: XIM) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XCreateIC(arg1: XIM, ...) -> XIC;
            }
            extern "C" {
                pub fn XDestroyIC(arg1: XIC);
            }
            extern "C" {
                pub fn XSetICFocus(arg1: XIC);
            }
            extern "C" {
                pub fn XUnsetICFocus(arg1: XIC);
            }
            extern "C" {
                pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
            }
            extern "C" {
                pub fn XmbResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XSetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XGetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
            }
            extern "C" {
                pub fn XIMOfIC(arg1: XIC) -> XIM;
            }
            extern "C" {
                pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XmbLookupString(
                    arg1: XIC,
                    arg2: *mut XKeyPressedEvent,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut KeySym,
                    arg6: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XwcLookupString(
                    arg1: XIC,
                    arg2: *mut XKeyPressedEvent,
                    arg3: *mut wchar_t,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut KeySym,
                    arg6: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn Xutf8LookupString(
                    arg1: XIC,
                    arg2: *mut XKeyPressedEvent,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut KeySym,
                    arg6: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XVaCreateNestedList(arg1: ::std::os::raw::c_int, ...) -> XVaNestedList;
            }
            extern "C" {
                pub fn XRegisterIMInstantiateCallback(
                    arg1: *mut Display,
                    arg2: *mut _XrmHashBucketRec,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_char,
                    arg5: XIDProc,
                    arg6: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XUnregisterIMInstantiateCallback(
                    arg1: *mut Display,
                    arg2: *mut _XrmHashBucketRec,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: *mut ::std::os::raw::c_char,
                    arg5: XIDProc,
                    arg6: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            pub type XConnectionWatchProc = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut Display,
                    arg2: XPointer,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut XPointer,
                ),
            >;
            extern "C" {
                pub fn XInternalConnectionNumbers(
                    arg1: *mut Display,
                    arg2: *mut *mut ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XProcessInternalConnection(arg1: *mut Display, arg2: ::std::os::raw::c_int);
            }
            extern "C" {
                pub fn XAddConnectionWatch(
                    arg1: *mut Display,
                    arg2: XConnectionWatchProc,
                    arg3: XPointer,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XRemoveConnectionWatch(
                    arg1: *mut Display,
                    arg2: XConnectionWatchProc,
                    arg3: XPointer,
                );
            }
            extern "C" {
                pub fn XSetAuthorization(
                    arg1: *mut ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                );
            }
            extern "C" {
                pub fn _Xmbtowc(
                    arg1: *mut wchar_t,
                    arg2: *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn _Xwctomb(
                    arg1: *mut ::std::os::raw::c_char,
                    arg2: wchar_t,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XGetEventData(
                    arg1: *mut Display,
                    arg2: *mut XGenericEventCookie,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
            }
            #[repr(C)]
            pub struct XineramaScreenInfo {
                pub screen_number: ::std::os::raw::c_int,
                pub x_org: ::std::os::raw::c_short,
                pub y_org: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_short,
                pub height: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XineramaScreenInfo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XineramaScreenInfo {
                            screen_number: ref __self_0_0,
                            x_org: ref __self_0_1,
                            y_org: ref __self_0_2,
                            width: ref __self_0_3,
                            height: ref __self_0_4,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XineramaScreenInfo");
                            let _ = debug_trait_builder.field("screen_number", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("x_org", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("y_org", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_4));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XineramaScreenInfo {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XineramaScreenInfo {
                #[inline]
                fn clone(&self) -> XineramaScreenInfo {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            extern "C" {
                pub fn XineramaQueryExtension(
                    dpy: *mut Display,
                    event_base: *mut ::std::os::raw::c_int,
                    error_base: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XineramaQueryVersion(
                    dpy: *mut Display,
                    major_versionp: *mut ::std::os::raw::c_int,
                    minor_versionp: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XineramaIsActive(dpy: *mut Display) -> ::std::os::raw::c_int;
            }
            extern "C" {
                pub fn XineramaQueryScreens(
                    dpy: *mut Display,
                    number: *mut ::std::os::raw::c_int,
                ) -> *mut XineramaScreenInfo;
            }
            pub type __builtin_va_list = [__va_list_tag; 1usize];
            #[repr(C)]
            pub struct __va_list_tag {
                pub gp_offset: ::std::os::raw::c_uint,
                pub fp_offset: ::std::os::raw::c_uint,
                pub overflow_arg_area: *mut ::std::os::raw::c_void,
                pub reg_save_area: *mut ::std::os::raw::c_void,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __va_list_tag {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __va_list_tag {
                            gp_offset: ref __self_0_0,
                            fp_offset: ref __self_0_1,
                            overflow_arg_area: ref __self_0_2,
                            reg_save_area: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__va_list_tag");
                            let _ = debug_trait_builder.field("gp_offset", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("fp_offset", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("overflow_arg_area", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("reg_save_area", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __va_list_tag {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __va_list_tag {
                #[inline]
                fn clone(&self) -> __va_list_tag {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        *self
                    }
                }
            }
        }
        pub mod xlib {
            #![allow(non_upper_case_globals)]
            #![allow(non_camel_case_types)]
            #![allow(non_snake_case)]
            #![allow(unused)]
            pub const XlibSpecificationRelease: u32 = 6;
            pub const _SYS_TYPES_H: u32 = 1;
            pub const _FEATURES_H: u32 = 1;
            pub const _DEFAULT_SOURCE: u32 = 1;
            pub const __GLIBC_USE_ISOC2X: u32 = 0;
            pub const __USE_ISOC11: u32 = 1;
            pub const __USE_ISOC99: u32 = 1;
            pub const __USE_ISOC95: u32 = 1;
            pub const __USE_POSIX_IMPLICITLY: u32 = 1;
            pub const _POSIX_SOURCE: u32 = 1;
            pub const _POSIX_C_SOURCE: u32 = 200809;
            pub const __USE_POSIX: u32 = 1;
            pub const __USE_POSIX2: u32 = 1;
            pub const __USE_POSIX199309: u32 = 1;
            pub const __USE_POSIX199506: u32 = 1;
            pub const __USE_XOPEN2K: u32 = 1;
            pub const __USE_XOPEN2K8: u32 = 1;
            pub const _ATFILE_SOURCE: u32 = 1;
            pub const __USE_MISC: u32 = 1;
            pub const __USE_ATFILE: u32 = 1;
            pub const __USE_FORTIFY_LEVEL: u32 = 0;
            pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
            pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
            pub const _STDC_PREDEF_H: u32 = 1;
            pub const __STDC_IEC_559__: u32 = 1;
            pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
            pub const __STDC_ISO_10646__: u32 = 201706;
            pub const __GNU_LIBRARY__: u32 = 6;
            pub const __GLIBC__: u32 = 2;
            pub const __GLIBC_MINOR__: u32 = 31;
            pub const _SYS_CDEFS_H: u32 = 1;
            pub const __glibc_c99_flexarr_available: u32 = 1;
            pub const __WORDSIZE: u32 = 64;
            pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
            pub const __SYSCALL_WORDSIZE: u32 = 64;
            pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
            pub const __HAVE_GENERIC_SELECTION: u32 = 1;
            pub const _BITS_TYPES_H: u32 = 1;
            pub const __TIMESIZE: u32 = 64;
            pub const _BITS_TYPESIZES_H: u32 = 1;
            pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
            pub const __INO_T_MATCHES_INO64_T: u32 = 1;
            pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
            pub const __STATFS_MATCHES_STATFS64: u32 = 1;
            pub const __FD_SETSIZE: u32 = 1024;
            pub const _BITS_TIME64_H: u32 = 1;
            pub const __clock_t_defined: u32 = 1;
            pub const __clockid_t_defined: u32 = 1;
            pub const __time_t_defined: u32 = 1;
            pub const __timer_t_defined: u32 = 1;
            pub const _BITS_STDINT_INTN_H: u32 = 1;
            pub const __BIT_TYPES_DEFINED__: u32 = 1;
            pub const _ENDIAN_H: u32 = 1;
            pub const _BITS_ENDIAN_H: u32 = 1;
            pub const __LITTLE_ENDIAN: u32 = 1234;
            pub const __BIG_ENDIAN: u32 = 4321;
            pub const __PDP_ENDIAN: u32 = 3412;
            pub const _BITS_ENDIANNESS_H: u32 = 1;
            pub const __BYTE_ORDER: u32 = 1234;
            pub const __FLOAT_WORD_ORDER: u32 = 1234;
            pub const LITTLE_ENDIAN: u32 = 1234;
            pub const BIG_ENDIAN: u32 = 4321;
            pub const PDP_ENDIAN: u32 = 3412;
            pub const BYTE_ORDER: u32 = 1234;
            pub const _BITS_BYTESWAP_H: u32 = 1;
            pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
            pub const _SYS_SELECT_H: u32 = 1;
            pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
            pub const __sigset_t_defined: u32 = 1;
            pub const __timeval_defined: u32 = 1;
            pub const _STRUCT_TIMESPEC: u32 = 1;
            pub const FD_SETSIZE: u32 = 1024;
            pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
            pub const _THREAD_SHARED_TYPES_H: u32 = 1;
            pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
            pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
            pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
            pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
            pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
            pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
            pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
            pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
            pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
            pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
            pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
            pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
            pub const __have_pthread_attr_t: u32 = 1;
            pub const X_PROTOCOL: u32 = 11;
            pub const X_PROTOCOL_REVISION: u32 = 0;
            pub const None: u32 = 0;
            pub const ParentRelative: u32 = 1;
            pub const CopyFromParent: u32 = 0;
            pub const PointerWindow: u32 = 0;
            pub const InputFocus: u32 = 1;
            pub const PointerRoot: u32 = 1;
            pub const AnyPropertyType: u32 = 0;
            pub const AnyKey: u32 = 0;
            pub const AnyButton: u32 = 0;
            pub const AllTemporary: u32 = 0;
            pub const CurrentTime: u32 = 0;
            pub const NoSymbol: u32 = 0;
            pub const NoEventMask: u32 = 0;
            pub const KeyPressMask: u32 = 1;
            pub const KeyReleaseMask: u32 = 2;
            pub const ButtonPressMask: u32 = 4;
            pub const ButtonReleaseMask: u32 = 8;
            pub const EnterWindowMask: u32 = 16;
            pub const LeaveWindowMask: u32 = 32;
            pub const PointerMotionMask: u32 = 64;
            pub const PointerMotionHintMask: u32 = 128;
            pub const Button1MotionMask: u32 = 256;
            pub const Button2MotionMask: u32 = 512;
            pub const Button3MotionMask: u32 = 1024;
            pub const Button4MotionMask: u32 = 2048;
            pub const Button5MotionMask: u32 = 4096;
            pub const ButtonMotionMask: u32 = 8192;
            pub const KeymapStateMask: u32 = 16384;
            pub const ExposureMask: u32 = 32768;
            pub const VisibilityChangeMask: u32 = 65536;
            pub const StructureNotifyMask: u32 = 131072;
            pub const ResizeRedirectMask: u32 = 262144;
            pub const SubstructureNotifyMask: u32 = 524288;
            pub const SubstructureRedirectMask: u32 = 1048576;
            pub const FocusChangeMask: u32 = 2097152;
            pub const PropertyChangeMask: u32 = 4194304;
            pub const ColormapChangeMask: u32 = 8388608;
            pub const OwnerGrabButtonMask: u32 = 16777216;
            pub const KeyPress: u32 = 2;
            pub const KeyRelease: u32 = 3;
            pub const ButtonPress: u32 = 4;
            pub const ButtonRelease: u32 = 5;
            pub const MotionNotify: u32 = 6;
            pub const EnterNotify: u32 = 7;
            pub const LeaveNotify: u32 = 8;
            pub const FocusIn: u32 = 9;
            pub const FocusOut: u32 = 10;
            pub const KeymapNotify: u32 = 11;
            pub const Expose: u32 = 12;
            pub const GraphicsExpose: u32 = 13;
            pub const NoExpose: u32 = 14;
            pub const VisibilityNotify: u32 = 15;
            pub const CreateNotify: u32 = 16;
            pub const DestroyNotify: u32 = 17;
            pub const UnmapNotify: u32 = 18;
            pub const MapNotify: u32 = 19;
            pub const MapRequest: u32 = 20;
            pub const ReparentNotify: u32 = 21;
            pub const ConfigureNotify: u32 = 22;
            pub const ConfigureRequest: u32 = 23;
            pub const GravityNotify: u32 = 24;
            pub const ResizeRequest: u32 = 25;
            pub const CirculateNotify: u32 = 26;
            pub const CirculateRequest: u32 = 27;
            pub const PropertyNotify: u32 = 28;
            pub const SelectionClear: u32 = 29;
            pub const SelectionRequest: u32 = 30;
            pub const SelectionNotify: u32 = 31;
            pub const ColormapNotify: u32 = 32;
            pub const ClientMessage: u32 = 33;
            pub const MappingNotify: u32 = 34;
            pub const GenericEvent: u32 = 35;
            pub const LASTEvent: u32 = 36;
            pub const ShiftMask: u32 = 1;
            pub const LockMask: u32 = 2;
            pub const ControlMask: u32 = 4;
            pub const Mod1Mask: u32 = 8;
            pub const Mod2Mask: u32 = 16;
            pub const Mod3Mask: u32 = 32;
            pub const Mod4Mask: u32 = 64;
            pub const Mod5Mask: u32 = 128;
            pub const ShiftMapIndex: u32 = 0;
            pub const LockMapIndex: u32 = 1;
            pub const ControlMapIndex: u32 = 2;
            pub const Mod1MapIndex: u32 = 3;
            pub const Mod2MapIndex: u32 = 4;
            pub const Mod3MapIndex: u32 = 5;
            pub const Mod4MapIndex: u32 = 6;
            pub const Mod5MapIndex: u32 = 7;
            pub const Button1Mask: u32 = 256;
            pub const Button2Mask: u32 = 512;
            pub const Button3Mask: u32 = 1024;
            pub const Button4Mask: u32 = 2048;
            pub const Button5Mask: u32 = 4096;
            pub const AnyModifier: u32 = 32768;
            pub const Button1: u32 = 1;
            pub const Button2: u32 = 2;
            pub const Button3: u32 = 3;
            pub const Button4: u32 = 4;
            pub const Button5: u32 = 5;
            pub const NotifyNormal: u32 = 0;
            pub const NotifyGrab: u32 = 1;
            pub const NotifyUngrab: u32 = 2;
            pub const NotifyWhileGrabbed: u32 = 3;
            pub const NotifyHint: u32 = 1;
            pub const NotifyAncestor: u32 = 0;
            pub const NotifyVirtual: u32 = 1;
            pub const NotifyInferior: u32 = 2;
            pub const NotifyNonlinear: u32 = 3;
            pub const NotifyNonlinearVirtual: u32 = 4;
            pub const NotifyPointer: u32 = 5;
            pub const NotifyPointerRoot: u32 = 6;
            pub const NotifyDetailNone: u32 = 7;
            pub const VisibilityUnobscured: u32 = 0;
            pub const VisibilityPartiallyObscured: u32 = 1;
            pub const VisibilityFullyObscured: u32 = 2;
            pub const PlaceOnTop: u32 = 0;
            pub const PlaceOnBottom: u32 = 1;
            pub const FamilyInternet: u32 = 0;
            pub const FamilyDECnet: u32 = 1;
            pub const FamilyChaos: u32 = 2;
            pub const FamilyInternet6: u32 = 6;
            pub const FamilyServerInterpreted: u32 = 5;
            pub const PropertyNewValue: u32 = 0;
            pub const PropertyDelete: u32 = 1;
            pub const ColormapUninstalled: u32 = 0;
            pub const ColormapInstalled: u32 = 1;
            pub const GrabModeSync: u32 = 0;
            pub const GrabModeAsync: u32 = 1;
            pub const GrabSuccess: u32 = 0;
            pub const AlreadyGrabbed: u32 = 1;
            pub const GrabInvalidTime: u32 = 2;
            pub const GrabNotViewable: u32 = 3;
            pub const GrabFrozen: u32 = 4;
            pub const AsyncPointer: u32 = 0;
            pub const SyncPointer: u32 = 1;
            pub const ReplayPointer: u32 = 2;
            pub const AsyncKeyboard: u32 = 3;
            pub const SyncKeyboard: u32 = 4;
            pub const ReplayKeyboard: u32 = 5;
            pub const AsyncBoth: u32 = 6;
            pub const SyncBoth: u32 = 7;
            pub const RevertToParent: u32 = 2;
            pub const Success: u32 = 0;
            pub const BadRequest: u32 = 1;
            pub const BadValue: u32 = 2;
            pub const BadWindow: u32 = 3;
            pub const BadPixmap: u32 = 4;
            pub const BadAtom: u32 = 5;
            pub const BadCursor: u32 = 6;
            pub const BadFont: u32 = 7;
            pub const BadMatch: u32 = 8;
            pub const BadDrawable: u32 = 9;
            pub const BadAccess: u32 = 10;
            pub const BadAlloc: u32 = 11;
            pub const BadColor: u32 = 12;
            pub const BadGC: u32 = 13;
            pub const BadIDChoice: u32 = 14;
            pub const BadName: u32 = 15;
            pub const BadLength: u32 = 16;
            pub const BadImplementation: u32 = 17;
            pub const FirstExtensionError: u32 = 128;
            pub const LastExtensionError: u32 = 255;
            pub const InputOutput: u32 = 1;
            pub const InputOnly: u32 = 2;
            pub const CWBackPixmap: u32 = 1;
            pub const CWBackPixel: u32 = 2;
            pub const CWBorderPixmap: u32 = 4;
            pub const CWBorderPixel: u32 = 8;
            pub const CWBitGravity: u32 = 16;
            pub const CWWinGravity: u32 = 32;
            pub const CWBackingStore: u32 = 64;
            pub const CWBackingPlanes: u32 = 128;
            pub const CWBackingPixel: u32 = 256;
            pub const CWOverrideRedirect: u32 = 512;
            pub const CWSaveUnder: u32 = 1024;
            pub const CWEventMask: u32 = 2048;
            pub const CWDontPropagate: u32 = 4096;
            pub const CWColormap: u32 = 8192;
            pub const CWCursor: u32 = 16384;
            pub const CWX: u32 = 1;
            pub const CWY: u32 = 2;
            pub const CWWidth: u32 = 4;
            pub const CWHeight: u32 = 8;
            pub const CWBorderWidth: u32 = 16;
            pub const CWSibling: u32 = 32;
            pub const CWStackMode: u32 = 64;
            pub const ForgetGravity: u32 = 0;
            pub const NorthWestGravity: u32 = 1;
            pub const NorthGravity: u32 = 2;
            pub const NorthEastGravity: u32 = 3;
            pub const WestGravity: u32 = 4;
            pub const CenterGravity: u32 = 5;
            pub const EastGravity: u32 = 6;
            pub const SouthWestGravity: u32 = 7;
            pub const SouthGravity: u32 = 8;
            pub const SouthEastGravity: u32 = 9;
            pub const StaticGravity: u32 = 10;
            pub const UnmapGravity: u32 = 0;
            pub const NotUseful: u32 = 0;
            pub const WhenMapped: u32 = 1;
            pub const Always: u32 = 2;
            pub const IsUnmapped: u32 = 0;
            pub const IsUnviewable: u32 = 1;
            pub const IsViewable: u32 = 2;
            pub const SetModeInsert: u32 = 0;
            pub const SetModeDelete: u32 = 1;
            pub const DestroyAll: u32 = 0;
            pub const RetainPermanent: u32 = 1;
            pub const RetainTemporary: u32 = 2;
            pub const Above: u32 = 0;
            pub const Below: u32 = 1;
            pub const TopIf: u32 = 2;
            pub const BottomIf: u32 = 3;
            pub const Opposite: u32 = 4;
            pub const RaiseLowest: u32 = 0;
            pub const LowerHighest: u32 = 1;
            pub const PropModeReplace: u32 = 0;
            pub const PropModePrepend: u32 = 1;
            pub const PropModeAppend: u32 = 2;
            pub const GXclear: u32 = 0;
            pub const GXand: u32 = 1;
            pub const GXandReverse: u32 = 2;
            pub const GXcopy: u32 = 3;
            pub const GXandInverted: u32 = 4;
            pub const GXnoop: u32 = 5;
            pub const GXxor: u32 = 6;
            pub const GXor: u32 = 7;
            pub const GXnor: u32 = 8;
            pub const GXequiv: u32 = 9;
            pub const GXinvert: u32 = 10;
            pub const GXorReverse: u32 = 11;
            pub const GXcopyInverted: u32 = 12;
            pub const GXorInverted: u32 = 13;
            pub const GXnand: u32 = 14;
            pub const GXset: u32 = 15;
            pub const LineSolid: u32 = 0;
            pub const LineOnOffDash: u32 = 1;
            pub const LineDoubleDash: u32 = 2;
            pub const CapNotLast: u32 = 0;
            pub const CapButt: u32 = 1;
            pub const CapRound: u32 = 2;
            pub const CapProjecting: u32 = 3;
            pub const JoinMiter: u32 = 0;
            pub const JoinRound: u32 = 1;
            pub const JoinBevel: u32 = 2;
            pub const FillSolid: u32 = 0;
            pub const FillTiled: u32 = 1;
            pub const FillStippled: u32 = 2;
            pub const FillOpaqueStippled: u32 = 3;
            pub const EvenOddRule: u32 = 0;
            pub const WindingRule: u32 = 1;
            pub const ClipByChildren: u32 = 0;
            pub const IncludeInferiors: u32 = 1;
            pub const Unsorted: u32 = 0;
            pub const YSorted: u32 = 1;
            pub const YXSorted: u32 = 2;
            pub const YXBanded: u32 = 3;
            pub const CoordModeOrigin: u32 = 0;
            pub const CoordModePrevious: u32 = 1;
            pub const Complex: u32 = 0;
            pub const Nonconvex: u32 = 1;
            pub const Convex: u32 = 2;
            pub const ArcChord: u32 = 0;
            pub const ArcPieSlice: u32 = 1;
            pub const GCFunction: u32 = 1;
            pub const GCPlaneMask: u32 = 2;
            pub const GCForeground: u32 = 4;
            pub const GCBackground: u32 = 8;
            pub const GCLineWidth: u32 = 16;
            pub const GCLineStyle: u32 = 32;
            pub const GCCapStyle: u32 = 64;
            pub const GCJoinStyle: u32 = 128;
            pub const GCFillStyle: u32 = 256;
            pub const GCFillRule: u32 = 512;
            pub const GCTile: u32 = 1024;
            pub const GCStipple: u32 = 2048;
            pub const GCTileStipXOrigin: u32 = 4096;
            pub const GCTileStipYOrigin: u32 = 8192;
            pub const GCFont: u32 = 16384;
            pub const GCSubwindowMode: u32 = 32768;
            pub const GCGraphicsExposures: u32 = 65536;
            pub const GCClipXOrigin: u32 = 131072;
            pub const GCClipYOrigin: u32 = 262144;
            pub const GCClipMask: u32 = 524288;
            pub const GCDashOffset: u32 = 1048576;
            pub const GCDashList: u32 = 2097152;
            pub const GCArcMode: u32 = 4194304;
            pub const GCLastBit: u32 = 22;
            pub const FontLeftToRight: u32 = 0;
            pub const FontRightToLeft: u32 = 1;
            pub const FontChange: u32 = 255;
            pub const XYBitmap: u32 = 0;
            pub const XYPixmap: u32 = 1;
            pub const ZPixmap: u32 = 2;
            pub const AllocNone: u32 = 0;
            pub const AllocAll: u32 = 1;
            pub const DoRed: u32 = 1;
            pub const DoGreen: u32 = 2;
            pub const DoBlue: u32 = 4;
            pub const CursorShape: u32 = 0;
            pub const TileShape: u32 = 1;
            pub const StippleShape: u32 = 2;
            pub const AutoRepeatModeOff: u32 = 0;
            pub const AutoRepeatModeOn: u32 = 1;
            pub const AutoRepeatModeDefault: u32 = 2;
            pub const LedModeOff: u32 = 0;
            pub const LedModeOn: u32 = 1;
            pub const KBKeyClickPercent: u32 = 1;
            pub const KBBellPercent: u32 = 2;
            pub const KBBellPitch: u32 = 4;
            pub const KBBellDuration: u32 = 8;
            pub const KBLed: u32 = 16;
            pub const KBLedMode: u32 = 32;
            pub const KBKey: u32 = 64;
            pub const KBAutoRepeatMode: u32 = 128;
            pub const MappingSuccess: u32 = 0;
            pub const MappingBusy: u32 = 1;
            pub const MappingFailed: u32 = 2;
            pub const MappingModifier: u32 = 0;
            pub const MappingKeyboard: u32 = 1;
            pub const MappingPointer: u32 = 2;
            pub const DontPreferBlanking: u32 = 0;
            pub const PreferBlanking: u32 = 1;
            pub const DefaultBlanking: u32 = 2;
            pub const DisableScreenSaver: u32 = 0;
            pub const DisableScreenInterval: u32 = 0;
            pub const DontAllowExposures: u32 = 0;
            pub const AllowExposures: u32 = 1;
            pub const DefaultExposures: u32 = 2;
            pub const ScreenSaverReset: u32 = 0;
            pub const ScreenSaverActive: u32 = 1;
            pub const HostInsert: u32 = 0;
            pub const HostDelete: u32 = 1;
            pub const EnableAccess: u32 = 1;
            pub const DisableAccess: u32 = 0;
            pub const StaticGray: u32 = 0;
            pub const GrayScale: u32 = 1;
            pub const StaticColor: u32 = 2;
            pub const PseudoColor: u32 = 3;
            pub const TrueColor: u32 = 4;
            pub const DirectColor: u32 = 5;
            pub const LSBFirst: u32 = 0;
            pub const MSBFirst: u32 = 1;
            pub const NeedFunctionPrototypes: u32 = 1;
            pub const NeedVarargsPrototypes: u32 = 1;
            pub const NeedNestedPrototypes: u32 = 1;
            pub const FUNCPROTO: u32 = 15;
            pub const NeedWidePrototypes: u32 = 0;
            pub const X_HAVE_UTF8_STRING: u32 = 1;
            pub const True: u32 = 1;
            pub const False: u32 = 0;
            pub const QueuedAlready: u32 = 0;
            pub const QueuedAfterReading: u32 = 1;
            pub const QueuedAfterFlush: u32 = 2;
            pub const XNRequiredCharSet: &'static [u8; 16usize] = b"requiredCharSet\0";
            pub const XNQueryOrientation: &'static [u8; 17usize] = b"queryOrientation\0";
            pub const XNBaseFontName: &'static [u8; 13usize] = b"baseFontName\0";
            pub const XNOMAutomatic: &'static [u8; 12usize] = b"omAutomatic\0";
            pub const XNMissingCharSet: &'static [u8; 15usize] = b"missingCharSet\0";
            pub const XNDefaultString: &'static [u8; 14usize] = b"defaultString\0";
            pub const XNOrientation: &'static [u8; 12usize] = b"orientation\0";
            pub const XNDirectionalDependentDrawing: &'static [u8; 28usize] =
                b"directionalDependentDrawing\0";
            pub const XNContextualDrawing: &'static [u8; 18usize] = b"contextualDrawing\0";
            pub const XNFontInfo: &'static [u8; 9usize] = b"fontInfo\0";
            pub const XIMPreeditArea: u32 = 1;
            pub const XIMPreeditCallbacks: u32 = 2;
            pub const XIMPreeditPosition: u32 = 4;
            pub const XIMPreeditNothing: u32 = 8;
            pub const XIMPreeditNone: u32 = 16;
            pub const XIMStatusArea: u32 = 256;
            pub const XIMStatusCallbacks: u32 = 512;
            pub const XIMStatusNothing: u32 = 1024;
            pub const XIMStatusNone: u32 = 2048;
            pub const XNVaNestedList: &'static [u8; 15usize] = b"XNVaNestedList\0";
            pub const XNQueryInputStyle: &'static [u8; 16usize] = b"queryInputStyle\0";
            pub const XNClientWindow: &'static [u8; 13usize] = b"clientWindow\0";
            pub const XNInputStyle: &'static [u8; 11usize] = b"inputStyle\0";
            pub const XNFocusWindow: &'static [u8; 12usize] = b"focusWindow\0";
            pub const XNResourceName: &'static [u8; 13usize] = b"resourceName\0";
            pub const XNResourceClass: &'static [u8; 14usize] = b"resourceClass\0";
            pub const XNGeometryCallback: &'static [u8; 17usize] = b"geometryCallback\0";
            pub const XNDestroyCallback: &'static [u8; 16usize] = b"destroyCallback\0";
            pub const XNFilterEvents: &'static [u8; 13usize] = b"filterEvents\0";
            pub const XNPreeditStartCallback: &'static [u8; 21usize] = b"preeditStartCallback\0";
            pub const XNPreeditDoneCallback: &'static [u8; 20usize] = b"preeditDoneCallback\0";
            pub const XNPreeditDrawCallback: &'static [u8; 20usize] = b"preeditDrawCallback\0";
            pub const XNPreeditCaretCallback: &'static [u8; 21usize] = b"preeditCaretCallback\0";
            pub const XNPreeditStateNotifyCallback: &'static [u8; 27usize] =
                b"preeditStateNotifyCallback\0";
            pub const XNPreeditAttributes: &'static [u8; 18usize] = b"preeditAttributes\0";
            pub const XNStatusStartCallback: &'static [u8; 20usize] = b"statusStartCallback\0";
            pub const XNStatusDoneCallback: &'static [u8; 19usize] = b"statusDoneCallback\0";
            pub const XNStatusDrawCallback: &'static [u8; 19usize] = b"statusDrawCallback\0";
            pub const XNStatusAttributes: &'static [u8; 17usize] = b"statusAttributes\0";
            pub const XNArea: &'static [u8; 5usize] = b"area\0";
            pub const XNAreaNeeded: &'static [u8; 11usize] = b"areaNeeded\0";
            pub const XNSpotLocation: &'static [u8; 13usize] = b"spotLocation\0";
            pub const XNColormap: &'static [u8; 9usize] = b"colorMap\0";
            pub const XNStdColormap: &'static [u8; 12usize] = b"stdColorMap\0";
            pub const XNForeground: &'static [u8; 11usize] = b"foreground\0";
            pub const XNBackground: &'static [u8; 11usize] = b"background\0";
            pub const XNBackgroundPixmap: &'static [u8; 17usize] = b"backgroundPixmap\0";
            pub const XNFontSet: &'static [u8; 8usize] = b"fontSet\0";
            pub const XNLineSpace: &'static [u8; 10usize] = b"lineSpace\0";
            pub const XNCursor: &'static [u8; 7usize] = b"cursor\0";
            pub const XNQueryIMValuesList: &'static [u8; 18usize] = b"queryIMValuesList\0";
            pub const XNQueryICValuesList: &'static [u8; 18usize] = b"queryICValuesList\0";
            pub const XNVisiblePosition: &'static [u8; 16usize] = b"visiblePosition\0";
            pub const XNR6PreeditCallback: &'static [u8; 18usize] = b"r6PreeditCallback\0";
            pub const XNStringConversionCallback: &'static [u8; 25usize] =
                b"stringConversionCallback\0";
            pub const XNStringConversion: &'static [u8; 17usize] = b"stringConversion\0";
            pub const XNResetState: &'static [u8; 11usize] = b"resetState\0";
            pub const XNHotKey: &'static [u8; 7usize] = b"hotKey\0";
            pub const XNHotKeyState: &'static [u8; 12usize] = b"hotKeyState\0";
            pub const XNPreeditState: &'static [u8; 13usize] = b"preeditState\0";
            pub const XNSeparatorofNestedList: &'static [u8; 22usize] = b"separatorofNestedList\0";
            pub const XBufferOverflow: i32 = -1;
            pub const XLookupNone: u32 = 1;
            pub const XLookupChars: u32 = 2;
            pub const XLookupKeySym: u32 = 3;
            pub const XLookupBoth: u32 = 4;
            pub const XIMReverse: u32 = 1;
            pub const XIMUnderline: u32 = 2;
            pub const XIMHighlight: u32 = 4;
            pub const XIMPrimary: u32 = 32;
            pub const XIMSecondary: u32 = 64;
            pub const XIMTertiary: u32 = 128;
            pub const XIMVisibleToForward: u32 = 256;
            pub const XIMVisibleToBackword: u32 = 512;
            pub const XIMVisibleToCenter: u32 = 1024;
            pub const XIMPreeditUnKnown: u32 = 0;
            pub const XIMPreeditEnable: u32 = 1;
            pub const XIMPreeditDisable: u32 = 2;
            pub const XIMInitialState: u32 = 1;
            pub const XIMPreserveState: u32 = 2;
            pub const XIMStringConversionLeftEdge: u32 = 1;
            pub const XIMStringConversionRightEdge: u32 = 2;
            pub const XIMStringConversionTopEdge: u32 = 4;
            pub const XIMStringConversionBottomEdge: u32 = 8;
            pub const XIMStringConversionConcealed: u32 = 16;
            pub const XIMStringConversionWrapped: u32 = 32;
            pub const XIMStringConversionBuffer: u32 = 1;
            pub const XIMStringConversionLine: u32 = 2;
            pub const XIMStringConversionWord: u32 = 3;
            pub const XIMStringConversionChar: u32 = 4;
            pub const XIMStringConversionSubstitution: u32 = 1;
            pub const XIMStringConversionRetrieval: u32 = 2;
            pub const XIMHotKeyStateON: u32 = 1;
            pub const XIMHotKeyStateOFF: u32 = 2;
            pub const __redef_tmp: &'static [u8; 11usize] = b"inputStyle\0";
            pub type __u_char = ::std::os::raw::c_uchar;
            pub type __u_short = ::std::os::raw::c_ushort;
            pub type __u_int = ::std::os::raw::c_uint;
            pub type __u_long = ::std::os::raw::c_ulong;
            pub type __int8_t = ::std::os::raw::c_schar;
            pub type __uint8_t = ::std::os::raw::c_uchar;
            pub type __int16_t = ::std::os::raw::c_short;
            pub type __uint16_t = ::std::os::raw::c_ushort;
            pub type __int32_t = ::std::os::raw::c_int;
            pub type __uint32_t = ::std::os::raw::c_uint;
            pub type __int64_t = ::std::os::raw::c_long;
            pub type __uint64_t = ::std::os::raw::c_ulong;
            pub type __int_least8_t = __int8_t;
            pub type __uint_least8_t = __uint8_t;
            pub type __int_least16_t = __int16_t;
            pub type __uint_least16_t = __uint16_t;
            pub type __int_least32_t = __int32_t;
            pub type __uint_least32_t = __uint32_t;
            pub type __int_least64_t = __int64_t;
            pub type __uint_least64_t = __uint64_t;
            pub type __quad_t = ::std::os::raw::c_long;
            pub type __u_quad_t = ::std::os::raw::c_ulong;
            pub type __intmax_t = ::std::os::raw::c_long;
            pub type __uintmax_t = ::std::os::raw::c_ulong;
            pub type __dev_t = ::std::os::raw::c_ulong;
            pub type __uid_t = ::std::os::raw::c_uint;
            pub type __gid_t = ::std::os::raw::c_uint;
            pub type __ino_t = ::std::os::raw::c_ulong;
            pub type __ino64_t = ::std::os::raw::c_ulong;
            pub type __mode_t = ::std::os::raw::c_uint;
            pub type __nlink_t = ::std::os::raw::c_ulong;
            pub type __off_t = ::std::os::raw::c_long;
            pub type __off64_t = ::std::os::raw::c_long;
            pub type __pid_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub struct __fsid_t {
                pub __val: [::std::os::raw::c_int; 2usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __fsid_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __fsid_t {
                            __val: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__fsid_t");
                            let _ = debug_trait_builder.field("__val", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __fsid_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __fsid_t {
                #[inline]
                fn clone(&self) -> __fsid_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_int; 2usize]>;
                        *self
                    }
                }
            }
            pub type __clock_t = ::std::os::raw::c_long;
            pub type __rlim_t = ::std::os::raw::c_ulong;
            pub type __rlim64_t = ::std::os::raw::c_ulong;
            pub type __id_t = ::std::os::raw::c_uint;
            pub type __time_t = ::std::os::raw::c_long;
            pub type __useconds_t = ::std::os::raw::c_uint;
            pub type __suseconds_t = ::std::os::raw::c_long;
            pub type __daddr_t = ::std::os::raw::c_int;
            pub type __key_t = ::std::os::raw::c_int;
            pub type __clockid_t = ::std::os::raw::c_int;
            pub type __timer_t = *mut ::std::os::raw::c_void;
            pub type __blksize_t = ::std::os::raw::c_long;
            pub type __blkcnt_t = ::std::os::raw::c_long;
            pub type __blkcnt64_t = ::std::os::raw::c_long;
            pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
            pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
            pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
            pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
            pub type __fsword_t = ::std::os::raw::c_long;
            pub type __ssize_t = ::std::os::raw::c_long;
            pub type __syscall_slong_t = ::std::os::raw::c_long;
            pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
            pub type __loff_t = __off64_t;
            pub type __caddr_t = *mut ::std::os::raw::c_char;
            pub type __intptr_t = ::std::os::raw::c_long;
            pub type __socklen_t = ::std::os::raw::c_uint;
            pub type __sig_atomic_t = ::std::os::raw::c_int;
            pub type u_char = __u_char;
            pub type u_short = __u_short;
            pub type u_int = __u_int;
            pub type u_long = __u_long;
            pub type quad_t = __quad_t;
            pub type u_quad_t = __u_quad_t;
            pub type fsid_t = __fsid_t;
            pub type loff_t = __loff_t;
            pub type ino_t = __ino_t;
            pub type dev_t = __dev_t;
            pub type gid_t = __gid_t;
            pub type mode_t = __mode_t;
            pub type nlink_t = __nlink_t;
            pub type uid_t = __uid_t;
            pub type off_t = __off_t;
            pub type pid_t = __pid_t;
            pub type id_t = __id_t;
            pub type ssize_t = __ssize_t;
            pub type daddr_t = __daddr_t;
            pub type caddr_t = __caddr_t;
            pub type key_t = __key_t;
            pub type clock_t = __clock_t;
            pub type clockid_t = __clockid_t;
            pub type time_t = __time_t;
            pub type timer_t = __timer_t;
            pub type size_t = ::std::os::raw::c_ulong;
            pub type ulong = ::std::os::raw::c_ulong;
            pub type ushort = ::std::os::raw::c_ushort;
            pub type uint = ::std::os::raw::c_uint;
            pub type u_int8_t = __uint8_t;
            pub type u_int16_t = __uint16_t;
            pub type u_int32_t = __uint32_t;
            pub type u_int64_t = __uint64_t;
            pub type register_t = ::std::os::raw::c_long;
            #[repr(C)]
            pub struct __sigset_t {
                pub __val: [::std::os::raw::c_ulong; 16usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __sigset_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __sigset_t {
                            __val: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__sigset_t");
                            let _ = debug_trait_builder.field("__val", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __sigset_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __sigset_t {
                #[inline]
                fn clone(&self) -> __sigset_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_ulong; 16usize],
                        >;
                        *self
                    }
                }
            }
            pub type sigset_t = __sigset_t;
            #[repr(C)]
            pub struct timeval {
                pub tv_sec: __time_t,
                pub tv_usec: __suseconds_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for timeval {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        timeval {
                            tv_sec: ref __self_0_0,
                            tv_usec: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("timeval");
                            let _ = debug_trait_builder.field("tv_sec", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("tv_usec", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for timeval {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for timeval {
                #[inline]
                fn clone(&self) -> timeval {
                    {
                        let _: ::core::clone::AssertParamIsClone<__time_t>;
                        let _: ::core::clone::AssertParamIsClone<__suseconds_t>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct timespec {
                pub tv_sec: __time_t,
                pub tv_nsec: __syscall_slong_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for timespec {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        timespec {
                            tv_sec: ref __self_0_0,
                            tv_nsec: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("timespec");
                            let _ = debug_trait_builder.field("tv_sec", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("tv_nsec", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for timespec {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for timespec {
                #[inline]
                fn clone(&self) -> timespec {
                    {
                        let _: ::core::clone::AssertParamIsClone<__time_t>;
                        let _: ::core::clone::AssertParamIsClone<__syscall_slong_t>;
                        *self
                    }
                }
            }
            pub type suseconds_t = __suseconds_t;
            pub type __fd_mask = ::std::os::raw::c_long;
            #[repr(C)]
            pub struct fd_set {
                pub __fds_bits: [__fd_mask; 16usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for fd_set {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        fd_set {
                            __fds_bits: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("fd_set");
                            let _ = debug_trait_builder.field("__fds_bits", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for fd_set {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for fd_set {
                #[inline]
                fn clone(&self) -> fd_set {
                    {
                        let _: ::core::clone::AssertParamIsClone<[__fd_mask; 16usize]>;
                        *self
                    }
                }
            }
            pub type fd_mask = __fd_mask;
            pub type blksize_t = __blksize_t;
            pub type blkcnt_t = __blkcnt_t;
            pub type fsblkcnt_t = __fsblkcnt_t;
            pub type fsfilcnt_t = __fsfilcnt_t;
            #[repr(C)]
            pub struct __pthread_internal_list {
                pub __prev: *mut __pthread_internal_list,
                pub __next: *mut __pthread_internal_list,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_internal_list {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_internal_list {
                            __prev: ref __self_0_0,
                            __next: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_internal_list");
                            let _ = debug_trait_builder.field("__prev", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__next", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_internal_list {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_internal_list {
                #[inline]
                fn clone(&self) -> __pthread_internal_list {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_list>;
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_list>;
                        *self
                    }
                }
            }
            pub type __pthread_list_t = __pthread_internal_list;
            #[repr(C)]
            pub struct __pthread_internal_slist {
                pub __next: *mut __pthread_internal_slist,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_internal_slist {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_internal_slist {
                            __next: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_internal_slist");
                            let _ = debug_trait_builder.field("__next", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_internal_slist {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_internal_slist {
                #[inline]
                fn clone(&self) -> __pthread_internal_slist {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut __pthread_internal_slist>;
                        *self
                    }
                }
            }
            pub type __pthread_slist_t = __pthread_internal_slist;
            #[repr(C)]
            pub struct __pthread_mutex_s {
                pub __lock: ::std::os::raw::c_int,
                pub __count: ::std::os::raw::c_uint,
                pub __owner: ::std::os::raw::c_int,
                pub __nusers: ::std::os::raw::c_uint,
                pub __kind: ::std::os::raw::c_int,
                pub __spins: ::std::os::raw::c_short,
                pub __elision: ::std::os::raw::c_short,
                pub __list: __pthread_list_t,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_mutex_s {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_mutex_s {
                            __lock: ref __self_0_0,
                            __count: ref __self_0_1,
                            __owner: ref __self_0_2,
                            __nusers: ref __self_0_3,
                            __kind: ref __self_0_4,
                            __spins: ref __self_0_5,
                            __elision: ref __self_0_6,
                            __list: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_mutex_s");
                            let _ = debug_trait_builder.field("__lock", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__count", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("__owner", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("__nusers", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("__kind", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("__spins", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("__elision", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("__list", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_mutex_s {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_mutex_s {
                #[inline]
                fn clone(&self) -> __pthread_mutex_s {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<__pthread_list_t>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_rwlock_arch_t {
                pub __readers: ::std::os::raw::c_uint,
                pub __writers: ::std::os::raw::c_uint,
                pub __wrphase_futex: ::std::os::raw::c_uint,
                pub __writers_futex: ::std::os::raw::c_uint,
                pub __pad3: ::std::os::raw::c_uint,
                pub __pad4: ::std::os::raw::c_uint,
                pub __cur_writer: ::std::os::raw::c_int,
                pub __shared: ::std::os::raw::c_int,
                pub __rwelision: ::std::os::raw::c_schar,
                pub __pad1: [::std::os::raw::c_uchar; 7usize],
                pub __pad2: ::std::os::raw::c_ulong,
                pub __flags: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_rwlock_arch_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_rwlock_arch_t {
                            __readers: ref __self_0_0,
                            __writers: ref __self_0_1,
                            __wrphase_futex: ref __self_0_2,
                            __writers_futex: ref __self_0_3,
                            __pad3: ref __self_0_4,
                            __pad4: ref __self_0_5,
                            __cur_writer: ref __self_0_6,
                            __shared: ref __self_0_7,
                            __rwelision: ref __self_0_8,
                            __pad1: ref __self_0_9,
                            __pad2: ref __self_0_10,
                            __flags: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("__pthread_rwlock_arch_t");
                            let _ = debug_trait_builder.field("__readers", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__writers", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("__wrphase_futex", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("__writers_futex", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("__pad3", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("__pad4", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("__cur_writer", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("__shared", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("__rwelision", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("__pad1", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("__pad2", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("__flags", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_rwlock_arch_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_rwlock_arch_t {
                #[inline]
                fn clone(&self) -> __pthread_rwlock_arch_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_schar>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_uchar; 7usize],
                        >;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s {
                pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
                pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
                pub __g_refs: [::std::os::raw::c_uint; 2usize],
                pub __g_size: [::std::os::raw::c_uint; 2usize],
                pub __g1_orig_size: ::std::os::raw::c_uint,
                pub __wrefs: ::std::os::raw::c_uint,
                pub __g_signals: [::std::os::raw::c_uint; 2usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s {
                #[inline]
                fn clone(&self) -> __pthread_cond_s {
                    {
                        let _: ::core::clone::AssertParamIsClone<__pthread_cond_s__bindgen_ty_1>;
                        let _: ::core::clone::AssertParamIsClone<__pthread_cond_s__bindgen_ty_2>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<[::std::os::raw::c_uint; 2usize]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union __pthread_cond_s__bindgen_ty_1 {
                pub __wseq: ::std::os::raw::c_ulonglong,
                pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                pub __low: ::std::os::raw::c_uint,
                pub __high: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                            __low: ref __self_0_0,
                            __high: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_cond_s__bindgen_ty_1__bindgen_ty_1");
                            let _ = debug_trait_builder.field("__low", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__high", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union __pthread_cond_s__bindgen_ty_2 {
                pub __g1_start: ::std::os::raw::c_ulonglong,
                pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_2 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_2 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_2 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                pub __low: ::std::os::raw::c_uint,
                pub __high: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                            __low: ref __self_0_0,
                            __high: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("__pthread_cond_s__bindgen_ty_2__bindgen_ty_1");
                            let _ = debug_trait_builder.field("__low", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("__high", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            pub type pthread_t = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub union pthread_mutexattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_mutexattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_mutexattr_t {
                #[inline]
                fn clone(&self) -> pthread_mutexattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_condattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_condattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_condattr_t {
                #[inline]
                fn clone(&self) -> pthread_condattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type pthread_key_t = ::std::os::raw::c_uint;
            pub type pthread_once_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub union pthread_attr_t {
                pub __size: [::std::os::raw::c_char; 56usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 7usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_attr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_attr_t {
                #[inline]
                fn clone(&self) -> pthread_attr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_mutex_t {
                pub __data: __pthread_mutex_s,
                pub __size: [::std::os::raw::c_char; 40usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 5usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_mutex_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_mutex_t {
                #[inline]
                fn clone(&self) -> pthread_mutex_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_cond_t {
                pub __data: __pthread_cond_s,
                pub __size: [::std::os::raw::c_char; 48usize],
                pub __align: ::std::os::raw::c_longlong,
                _bindgen_union_align: [u64; 6usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_cond_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_cond_t {
                #[inline]
                fn clone(&self) -> pthread_cond_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_rwlock_t {
                pub __data: __pthread_rwlock_arch_t,
                pub __size: [::std::os::raw::c_char; 56usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 7usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_rwlock_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_rwlock_t {
                #[inline]
                fn clone(&self) -> pthread_rwlock_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_rwlockattr_t {
                pub __size: [::std::os::raw::c_char; 8usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_rwlockattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_rwlockattr_t {
                #[inline]
                fn clone(&self) -> pthread_rwlockattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type pthread_spinlock_t = ::std::os::raw::c_int;
            #[repr(C)]
            pub union pthread_barrier_t {
                pub __size: [::std::os::raw::c_char; 32usize],
                pub __align: ::std::os::raw::c_long,
                _bindgen_union_align: [u64; 4usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_barrier_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_barrier_t {
                #[inline]
                fn clone(&self) -> pthread_barrier_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union pthread_barrierattr_t {
                pub __size: [::std::os::raw::c_char; 4usize],
                pub __align: ::std::os::raw::c_int,
                _bindgen_union_align: u32,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for pthread_barrierattr_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for pthread_barrierattr_t {
                #[inline]
                fn clone(&self) -> pthread_barrierattr_t {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XID = ::std::os::raw::c_ulong;
            pub type Mask = ::std::os::raw::c_ulong;
            pub type Atom = ::std::os::raw::c_ulong;
            pub type VisualID = ::std::os::raw::c_ulong;
            pub type Time = ::std::os::raw::c_ulong;
            pub type Window = XID;
            pub type Drawable = XID;
            pub type Font = XID;
            pub type Pixmap = XID;
            pub type Cursor = XID;
            pub type Colormap = XID;
            pub type GContext = XID;
            pub type KeySym = XID;
            pub type KeyCode = ::std::os::raw::c_uchar;
            pub type wchar_t = ::std::os::raw::c_int;
            #[repr(C)]
            #[repr(align(16))]
            pub struct max_align_t {
                pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
                pub __bindgen_padding_0: u64,
                pub __clang_max_align_nonce2: u128,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for max_align_t {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        max_align_t {
                            __clang_max_align_nonce1: ref __self_0_0,
                            __bindgen_padding_0: ref __self_0_1,
                            __clang_max_align_nonce2: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("max_align_t");
                            let _ = debug_trait_builder
                                .field("__clang_max_align_nonce1", &&(*__self_0_0));
                            let _ =
                                debug_trait_builder.field("__bindgen_padding_0", &&(*__self_0_1));
                            let _ = debug_trait_builder
                                .field("__clang_max_align_nonce2", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for max_align_t {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for max_align_t {
                #[inline]
                fn clone(&self) -> max_align_t {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_longlong>;
                        let _: ::core::clone::AssertParamIsClone<u64>;
                        let _: ::core::clone::AssertParamIsClone<u128>;
                        *self
                    }
                }
            }
            pub type XPointer = *mut ::std::os::raw::c_char;
            #[repr(C)]
            pub struct _XExtData {
                pub number: ::std::os::raw::c_int,
                pub next: *mut _XExtData,
                pub free_private: ::std::option::Option<
                    unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
                >,
                pub private_data: XPointer,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XExtData {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XExtData {
                            number: ref __self_0_0,
                            next: ref __self_0_1,
                            free_private: ref __self_0_2,
                            private_data: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XExtData");
                            let _ = debug_trait_builder.field("number", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("next", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("free_private", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("private_data", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XExtData {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XExtData {
                #[inline]
                fn clone(&self) -> _XExtData {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XExtData>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    extension: *mut _XExtData,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        *self
                    }
                }
            }
            pub type XExtData = _XExtData;
            #[repr(C)]
            pub struct XExtCodes {
                pub extension: ::std::os::raw::c_int,
                pub major_opcode: ::std::os::raw::c_int,
                pub first_event: ::std::os::raw::c_int,
                pub first_error: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XExtCodes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XExtCodes {
                            extension: ref __self_0_0,
                            major_opcode: ref __self_0_1,
                            first_event: ref __self_0_2,
                            first_error: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XExtCodes");
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("major_opcode", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("first_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("first_error", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XExtCodes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XExtCodes {
                #[inline]
                fn clone(&self) -> XExtCodes {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPixmapFormatValues {
                pub depth: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub scanline_pad: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPixmapFormatValues {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPixmapFormatValues {
                            depth: ref __self_0_0,
                            bits_per_pixel: ref __self_0_1,
                            scanline_pad: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPixmapFormatValues");
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("scanline_pad", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPixmapFormatValues {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPixmapFormatValues {
                #[inline]
                fn clone(&self) -> XPixmapFormatValues {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGCValues {
                pub function: ::std::os::raw::c_int,
                pub plane_mask: ::std::os::raw::c_ulong,
                pub foreground: ::std::os::raw::c_ulong,
                pub background: ::std::os::raw::c_ulong,
                pub line_width: ::std::os::raw::c_int,
                pub line_style: ::std::os::raw::c_int,
                pub cap_style: ::std::os::raw::c_int,
                pub join_style: ::std::os::raw::c_int,
                pub fill_style: ::std::os::raw::c_int,
                pub fill_rule: ::std::os::raw::c_int,
                pub arc_mode: ::std::os::raw::c_int,
                pub tile: Pixmap,
                pub stipple: Pixmap,
                pub ts_x_origin: ::std::os::raw::c_int,
                pub ts_y_origin: ::std::os::raw::c_int,
                pub font: Font,
                pub subwindow_mode: ::std::os::raw::c_int,
                pub graphics_exposures: ::std::os::raw::c_int,
                pub clip_x_origin: ::std::os::raw::c_int,
                pub clip_y_origin: ::std::os::raw::c_int,
                pub clip_mask: Pixmap,
                pub dash_offset: ::std::os::raw::c_int,
                pub dashes: ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGCValues {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGCValues {
                            function: ref __self_0_0,
                            plane_mask: ref __self_0_1,
                            foreground: ref __self_0_2,
                            background: ref __self_0_3,
                            line_width: ref __self_0_4,
                            line_style: ref __self_0_5,
                            cap_style: ref __self_0_6,
                            join_style: ref __self_0_7,
                            fill_style: ref __self_0_8,
                            fill_rule: ref __self_0_9,
                            arc_mode: ref __self_0_10,
                            tile: ref __self_0_11,
                            stipple: ref __self_0_12,
                            ts_x_origin: ref __self_0_13,
                            ts_y_origin: ref __self_0_14,
                            font: ref __self_0_15,
                            subwindow_mode: ref __self_0_16,
                            graphics_exposures: ref __self_0_17,
                            clip_x_origin: ref __self_0_18,
                            clip_y_origin: ref __self_0_19,
                            clip_mask: ref __self_0_20,
                            dash_offset: ref __self_0_21,
                            dashes: ref __self_0_22,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGCValues");
                            let _ = debug_trait_builder.field("function", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("plane_mask", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("foreground", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("background", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("line_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("line_style", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("cap_style", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("join_style", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("fill_style", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("fill_rule", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("arc_mode", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("tile", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("stipple", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("ts_x_origin", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("ts_y_origin", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("subwindow_mode", &&(*__self_0_16));
                            let _ =
                                debug_trait_builder.field("graphics_exposures", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("clip_x_origin", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("clip_y_origin", &&(*__self_0_19));
                            let _ = debug_trait_builder.field("clip_mask", &&(*__self_0_20));
                            let _ = debug_trait_builder.field("dash_offset", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("dashes", &&(*__self_0_22));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGCValues {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGCValues {
                #[inline]
                fn clone(&self) -> XGCValues {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XGC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XGC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XGC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XGC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XGC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XGC {
                #[inline]
                fn clone(&self) -> _XGC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type GC = *mut _XGC;
            #[repr(C)]
            pub struct Visual {
                pub ext_data: *mut XExtData,
                pub visualid: VisualID,
                pub class: ::std::os::raw::c_int,
                pub red_mask: ::std::os::raw::c_ulong,
                pub green_mask: ::std::os::raw::c_ulong,
                pub blue_mask: ::std::os::raw::c_ulong,
                pub bits_per_rgb: ::std::os::raw::c_int,
                pub map_entries: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Visual {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Visual {
                            ext_data: ref __self_0_0,
                            visualid: ref __self_0_1,
                            class: ref __self_0_2,
                            red_mask: ref __self_0_3,
                            green_mask: ref __self_0_4,
                            blue_mask: ref __self_0_5,
                            bits_per_rgb: ref __self_0_6,
                            map_entries: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Visual");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("visualid", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("class", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("red_mask", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("green_mask", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("blue_mask", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("bits_per_rgb", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("map_entries", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Visual {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Visual {
                #[inline]
                fn clone(&self) -> Visual {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<VisualID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct Depth {
                pub depth: ::std::os::raw::c_int,
                pub nvisuals: ::std::os::raw::c_int,
                pub visuals: *mut Visual,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Depth {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Depth {
                            depth: ref __self_0_0,
                            nvisuals: ref __self_0_1,
                            visuals: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Depth");
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nvisuals", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("visuals", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Depth {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Depth {
                #[inline]
                fn clone(&self) -> Depth {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XDisplay {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XDisplay {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XDisplay {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XDisplay");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XDisplay {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XDisplay {
                #[inline]
                fn clone(&self) -> _XDisplay {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct Screen {
                pub ext_data: *mut XExtData,
                pub display: *mut _XDisplay,
                pub root: Window,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub mwidth: ::std::os::raw::c_int,
                pub mheight: ::std::os::raw::c_int,
                pub ndepths: ::std::os::raw::c_int,
                pub depths: *mut Depth,
                pub root_depth: ::std::os::raw::c_int,
                pub root_visual: *mut Visual,
                pub default_gc: GC,
                pub cmap: Colormap,
                pub white_pixel: ::std::os::raw::c_ulong,
                pub black_pixel: ::std::os::raw::c_ulong,
                pub max_maps: ::std::os::raw::c_int,
                pub min_maps: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub save_unders: ::std::os::raw::c_int,
                pub root_input_mask: ::std::os::raw::c_long,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for Screen {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        Screen {
                            ext_data: ref __self_0_0,
                            display: ref __self_0_1,
                            root: ref __self_0_2,
                            width: ref __self_0_3,
                            height: ref __self_0_4,
                            mwidth: ref __self_0_5,
                            mheight: ref __self_0_6,
                            ndepths: ref __self_0_7,
                            depths: ref __self_0_8,
                            root_depth: ref __self_0_9,
                            root_visual: ref __self_0_10,
                            default_gc: ref __self_0_11,
                            cmap: ref __self_0_12,
                            white_pixel: ref __self_0_13,
                            black_pixel: ref __self_0_14,
                            max_maps: ref __self_0_15,
                            min_maps: ref __self_0_16,
                            backing_store: ref __self_0_17,
                            save_unders: ref __self_0_18,
                            root_input_mask: ref __self_0_19,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("Screen");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("mwidth", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("mheight", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("ndepths", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("depths", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("root_depth", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("root_visual", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("default_gc", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("cmap", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("white_pixel", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("black_pixel", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("max_maps", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("min_maps", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("save_unders", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("root_input_mask", &&(*__self_0_19));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for Screen {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for Screen {
                #[inline]
                fn clone(&self) -> Screen {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XDisplay>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Depth>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        let _: ::core::clone::AssertParamIsClone<GC>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct ScreenFormat {
                pub ext_data: *mut XExtData,
                pub depth: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub scanline_pad: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for ScreenFormat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        ScreenFormat {
                            ext_data: ref __self_0_0,
                            depth: ref __self_0_1,
                            bits_per_pixel: ref __self_0_2,
                            scanline_pad: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("ScreenFormat");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("scanline_pad", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for ScreenFormat {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for ScreenFormat {
                #[inline]
                fn clone(&self) -> ScreenFormat {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSetWindowAttributes {
                pub background_pixmap: Pixmap,
                pub background_pixel: ::std::os::raw::c_ulong,
                pub border_pixmap: Pixmap,
                pub border_pixel: ::std::os::raw::c_ulong,
                pub bit_gravity: ::std::os::raw::c_int,
                pub win_gravity: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub backing_planes: ::std::os::raw::c_ulong,
                pub backing_pixel: ::std::os::raw::c_ulong,
                pub save_under: ::std::os::raw::c_int,
                pub event_mask: ::std::os::raw::c_long,
                pub do_not_propagate_mask: ::std::os::raw::c_long,
                pub override_redirect: ::std::os::raw::c_int,
                pub colormap: Colormap,
                pub cursor: Cursor,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSetWindowAttributes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSetWindowAttributes {
                            background_pixmap: ref __self_0_0,
                            background_pixel: ref __self_0_1,
                            border_pixmap: ref __self_0_2,
                            border_pixel: ref __self_0_3,
                            bit_gravity: ref __self_0_4,
                            win_gravity: ref __self_0_5,
                            backing_store: ref __self_0_6,
                            backing_planes: ref __self_0_7,
                            backing_pixel: ref __self_0_8,
                            save_under: ref __self_0_9,
                            event_mask: ref __self_0_10,
                            do_not_propagate_mask: ref __self_0_11,
                            override_redirect: ref __self_0_12,
                            colormap: ref __self_0_13,
                            cursor: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSetWindowAttributes");
                            let _ = debug_trait_builder.field("background_pixmap", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("background_pixel", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("border_pixmap", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("border_pixel", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("bit_gravity", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("win_gravity", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("backing_planes", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("backing_pixel", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("save_under", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("event_mask", &&(*__self_0_10));
                            let _ = debug_trait_builder
                                .field("do_not_propagate_mask", &&(*__self_0_11));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("cursor", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSetWindowAttributes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSetWindowAttributes {
                #[inline]
                fn clone(&self) -> XSetWindowAttributes {
                    {
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<Pixmap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<Cursor>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XWindowAttributes {
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub depth: ::std::os::raw::c_int,
                pub visual: *mut Visual,
                pub root: Window,
                pub class: ::std::os::raw::c_int,
                pub bit_gravity: ::std::os::raw::c_int,
                pub win_gravity: ::std::os::raw::c_int,
                pub backing_store: ::std::os::raw::c_int,
                pub backing_planes: ::std::os::raw::c_ulong,
                pub backing_pixel: ::std::os::raw::c_ulong,
                pub save_under: ::std::os::raw::c_int,
                pub colormap: Colormap,
                pub map_installed: ::std::os::raw::c_int,
                pub map_state: ::std::os::raw::c_int,
                pub all_event_masks: ::std::os::raw::c_long,
                pub your_event_mask: ::std::os::raw::c_long,
                pub do_not_propagate_mask: ::std::os::raw::c_long,
                pub override_redirect: ::std::os::raw::c_int,
                pub screen: *mut Screen,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XWindowAttributes {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XWindowAttributes {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            border_width: ref __self_0_4,
                            depth: ref __self_0_5,
                            visual: ref __self_0_6,
                            root: ref __self_0_7,
                            class: ref __self_0_8,
                            bit_gravity: ref __self_0_9,
                            win_gravity: ref __self_0_10,
                            backing_store: ref __self_0_11,
                            backing_planes: ref __self_0_12,
                            backing_pixel: ref __self_0_13,
                            save_under: ref __self_0_14,
                            colormap: ref __self_0_15,
                            map_installed: ref __self_0_16,
                            map_state: ref __self_0_17,
                            all_event_masks: ref __self_0_18,
                            your_event_mask: ref __self_0_19,
                            do_not_propagate_mask: ref __self_0_20,
                            override_redirect: ref __self_0_21,
                            screen: ref __self_0_22,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XWindowAttributes");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("visual", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("class", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("bit_gravity", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("win_gravity", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("backing_store", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("backing_planes", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("backing_pixel", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("save_under", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("map_installed", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("map_state", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("all_event_masks", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("your_event_mask", &&(*__self_0_19));
                            let _ = debug_trait_builder
                                .field("do_not_propagate_mask", &&(*__self_0_20));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("screen", &&(*__self_0_22));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XWindowAttributes {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XWindowAttributes {
                #[inline]
                fn clone(&self) -> XWindowAttributes {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Visual>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_long>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Screen>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XHostAddress {
                pub family: ::std::os::raw::c_int,
                pub length: ::std::os::raw::c_int,
                pub address: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XHostAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XHostAddress {
                            family: ref __self_0_0,
                            length: ref __self_0_1,
                            address: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XHostAddress");
                            let _ = debug_trait_builder.field("family", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("length", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("address", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XHostAddress {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XHostAddress {
                #[inline]
                fn clone(&self) -> XHostAddress {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XServerInterpretedAddress {
                pub typelength: ::std::os::raw::c_int,
                pub valuelength: ::std::os::raw::c_int,
                pub type_: *mut ::std::os::raw::c_char,
                pub value: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XServerInterpretedAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XServerInterpretedAddress {
                            typelength: ref __self_0_0,
                            valuelength: ref __self_0_1,
                            type_: ref __self_0_2,
                            value: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("XServerInterpretedAddress");
                            let _ = debug_trait_builder.field("typelength", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("valuelength", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("value", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XServerInterpretedAddress {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XServerInterpretedAddress {
                #[inline]
                fn clone(&self) -> XServerInterpretedAddress {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XImage {
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub xoffset: ::std::os::raw::c_int,
                pub format: ::std::os::raw::c_int,
                pub data: *mut ::std::os::raw::c_char,
                pub byte_order: ::std::os::raw::c_int,
                pub bitmap_unit: ::std::os::raw::c_int,
                pub bitmap_bit_order: ::std::os::raw::c_int,
                pub bitmap_pad: ::std::os::raw::c_int,
                pub depth: ::std::os::raw::c_int,
                pub bytes_per_line: ::std::os::raw::c_int,
                pub bits_per_pixel: ::std::os::raw::c_int,
                pub red_mask: ::std::os::raw::c_ulong,
                pub green_mask: ::std::os::raw::c_ulong,
                pub blue_mask: ::std::os::raw::c_ulong,
                pub obdata: XPointer,
                pub f: _XImage_funcs,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XImage {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XImage {
                            width: ref __self_0_0,
                            height: ref __self_0_1,
                            xoffset: ref __self_0_2,
                            format: ref __self_0_3,
                            data: ref __self_0_4,
                            byte_order: ref __self_0_5,
                            bitmap_unit: ref __self_0_6,
                            bitmap_bit_order: ref __self_0_7,
                            bitmap_pad: ref __self_0_8,
                            depth: ref __self_0_9,
                            bytes_per_line: ref __self_0_10,
                            bits_per_pixel: ref __self_0_11,
                            red_mask: ref __self_0_12,
                            green_mask: ref __self_0_13,
                            blue_mask: ref __self_0_14,
                            obdata: ref __self_0_15,
                            f: ref __self_0_16,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XImage");
                            let _ = debug_trait_builder.field("width", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("xoffset", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("format", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("data", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("byte_order", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("bitmap_unit", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("bitmap_bit_order", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("bitmap_pad", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("depth", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("bytes_per_line", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("bits_per_pixel", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("red_mask", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("green_mask", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("blue_mask", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("obdata", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("f", &&(*__self_0_16));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XImage {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XImage {
                #[inline]
                fn clone(&self) -> _XImage {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<_XImage_funcs>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XImage_funcs {
                pub create_image: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XDisplay,
                        arg2: *mut Visual,
                        arg3: ::std::os::raw::c_uint,
                        arg4: ::std::os::raw::c_int,
                        arg5: ::std::os::raw::c_int,
                        arg6: *mut ::std::os::raw::c_char,
                        arg7: ::std::os::raw::c_uint,
                        arg8: ::std::os::raw::c_uint,
                        arg9: ::std::os::raw::c_int,
                        arg10: ::std::os::raw::c_int,
                    ) -> *mut _XImage,
                >,
                pub destroy_image: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int,
                >,
                pub get_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                    ) -> ::std::os::raw::c_ulong,
                >,
                pub put_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_ulong,
                    ) -> ::std::os::raw::c_int,
                >,
                pub sub_image: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_uint,
                        arg5: ::std::os::raw::c_uint,
                    ) -> *mut _XImage,
                >,
                pub add_pixel: ::std::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut _XImage,
                        arg2: ::std::os::raw::c_long,
                    ) -> ::std::os::raw::c_int,
                >,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XImage_funcs {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XImage_funcs {
                            create_image: ref __self_0_0,
                            destroy_image: ref __self_0_1,
                            get_pixel: ref __self_0_2,
                            put_pixel: ref __self_0_3,
                            sub_image: ref __self_0_4,
                            add_pixel: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XImage_funcs");
                            let _ = debug_trait_builder.field("create_image", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("destroy_image", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("get_pixel", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("put_pixel", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("sub_image", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("add_pixel", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XImage_funcs {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XImage_funcs {
                #[inline]
                fn clone(&self) -> _XImage_funcs {
                    {
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XDisplay,
                                    arg2: *mut Visual,
                                    arg3: ::std::os::raw::c_uint,
                                    arg4: ::std::os::raw::c_int,
                                    arg5: ::std::os::raw::c_int,
                                    arg6: *mut ::std::os::raw::c_char,
                                    arg7: ::std::os::raw::c_uint,
                                    arg8: ::std::os::raw::c_uint,
                                    arg9: ::std::os::raw::c_int,
                                    arg10: ::std::os::raw::c_int,
                                )
                                    -> *mut _XImage,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                )
                                    -> ::std::os::raw::c_ulong,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                    arg4: ::std::os::raw::c_ulong,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int,
                                    arg4: ::std::os::raw::c_uint,
                                    arg5: ::std::os::raw::c_uint,
                                )
                                    -> *mut _XImage,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(
                                    arg1: *mut _XImage,
                                    arg2: ::std::os::raw::c_long,
                                )
                                    -> ::std::os::raw::c_int,
                            >,
                        >;
                        *self
                    }
                }
            }
            pub type XImage = _XImage;
            #[repr(C)]
            pub struct XWindowChanges {
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub sibling: Window,
                pub stack_mode: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XWindowChanges {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XWindowChanges {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            border_width: ref __self_0_4,
                            sibling: ref __self_0_5,
                            stack_mode: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XWindowChanges");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("sibling", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("stack_mode", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XWindowChanges {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XWindowChanges {
                #[inline]
                fn clone(&self) -> XWindowChanges {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XColor {
                pub pixel: ::std::os::raw::c_ulong,
                pub red: ::std::os::raw::c_ushort,
                pub green: ::std::os::raw::c_ushort,
                pub blue: ::std::os::raw::c_ushort,
                pub flags: ::std::os::raw::c_char,
                pub pad: ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XColor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XColor {
                            pixel: ref __self_0_0,
                            red: ref __self_0_1,
                            green: ref __self_0_2,
                            blue: ref __self_0_3,
                            flags: ref __self_0_4,
                            pad: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XColor");
                            let _ = debug_trait_builder.field("pixel", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("red", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("green", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("blue", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("flags", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("pad", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XColor {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XColor {
                #[inline]
                fn clone(&self) -> XColor {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSegment {
                pub x1: ::std::os::raw::c_short,
                pub y1: ::std::os::raw::c_short,
                pub x2: ::std::os::raw::c_short,
                pub y2: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSegment {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSegment {
                            x1: ref __self_0_0,
                            y1: ref __self_0_1,
                            x2: ref __self_0_2,
                            y2: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSegment");
                            let _ = debug_trait_builder.field("x1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y1", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("x2", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("y2", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSegment {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSegment {
                #[inline]
                fn clone(&self) -> XSegment {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPoint {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPoint {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPoint");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPoint {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPoint {
                #[inline]
                fn clone(&self) -> XPoint {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XRectangle {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_ushort,
                pub height: ::std::os::raw::c_ushort,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XRectangle {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XRectangle {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XRectangle");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XRectangle {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XRectangle {
                #[inline]
                fn clone(&self) -> XRectangle {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XArc {
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_ushort,
                pub height: ::std::os::raw::c_ushort,
                pub angle1: ::std::os::raw::c_short,
                pub angle2: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XArc {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XArc {
                            x: ref __self_0_0,
                            y: ref __self_0_1,
                            width: ref __self_0_2,
                            height: ref __self_0_3,
                            angle1: ref __self_0_4,
                            angle2: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XArc");
                            let _ = debug_trait_builder.field("x", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("angle1", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("angle2", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XArc {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XArc {
                #[inline]
                fn clone(&self) -> XArc {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XKeyboardControl {
                pub key_click_percent: ::std::os::raw::c_int,
                pub bell_percent: ::std::os::raw::c_int,
                pub bell_pitch: ::std::os::raw::c_int,
                pub bell_duration: ::std::os::raw::c_int,
                pub led: ::std::os::raw::c_int,
                pub led_mode: ::std::os::raw::c_int,
                pub key: ::std::os::raw::c_int,
                pub auto_repeat_mode: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyboardControl {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyboardControl {
                            key_click_percent: ref __self_0_0,
                            bell_percent: ref __self_0_1,
                            bell_pitch: ref __self_0_2,
                            bell_duration: ref __self_0_3,
                            led: ref __self_0_4,
                            led_mode: ref __self_0_5,
                            key: ref __self_0_6,
                            auto_repeat_mode: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyboardControl");
                            let _ = debug_trait_builder.field("key_click_percent", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bell_percent", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bell_pitch", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("bell_duration", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("led", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("led_mode", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("key", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("auto_repeat_mode", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyboardControl {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyboardControl {
                #[inline]
                fn clone(&self) -> XKeyboardControl {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XKeyboardState {
                pub key_click_percent: ::std::os::raw::c_int,
                pub bell_percent: ::std::os::raw::c_int,
                pub bell_pitch: ::std::os::raw::c_uint,
                pub bell_duration: ::std::os::raw::c_uint,
                pub led_mask: ::std::os::raw::c_ulong,
                pub global_auto_repeat: ::std::os::raw::c_int,
                pub auto_repeats: [::std::os::raw::c_char; 32usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyboardState {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyboardState {
                            key_click_percent: ref __self_0_0,
                            bell_percent: ref __self_0_1,
                            bell_pitch: ref __self_0_2,
                            bell_duration: ref __self_0_3,
                            led_mask: ref __self_0_4,
                            global_auto_repeat: ref __self_0_5,
                            auto_repeats: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyboardState");
                            let _ = debug_trait_builder.field("key_click_percent", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("bell_percent", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("bell_pitch", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("bell_duration", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("led_mask", &&(*__self_0_4));
                            let _ =
                                debug_trait_builder.field("global_auto_repeat", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("auto_repeats", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyboardState {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyboardState {
                #[inline]
                fn clone(&self) -> XKeyboardState {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_char; 32usize],
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTimeCoord {
                pub time: Time,
                pub x: ::std::os::raw::c_short,
                pub y: ::std::os::raw::c_short,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTimeCoord {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTimeCoord {
                            time: ref __self_0_0,
                            x: ref __self_0_1,
                            y: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTimeCoord");
                            let _ = debug_trait_builder.field("time", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTimeCoord {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTimeCoord {
                #[inline]
                fn clone(&self) -> XTimeCoord {
                    {
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XModifierKeymap {
                pub max_keypermod: ::std::os::raw::c_int,
                pub modifiermap: *mut KeyCode,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XModifierKeymap {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XModifierKeymap {
                            max_keypermod: ref __self_0_0,
                            modifiermap: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XModifierKeymap");
                            let _ = debug_trait_builder.field("max_keypermod", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("modifiermap", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XModifierKeymap {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XModifierKeymap {
                #[inline]
                fn clone(&self) -> XModifierKeymap {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut KeyCode>;
                        *self
                    }
                }
            }
            pub type Display = _XDisplay;
            #[repr(C)]
            pub struct _XPrivate {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XPrivate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XPrivate {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XPrivate");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XPrivate {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XPrivate {
                #[inline]
                fn clone(&self) -> _XPrivate {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XrmHashBucketRec {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XrmHashBucketRec {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XrmHashBucketRec {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XrmHashBucketRec");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XrmHashBucketRec {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XrmHashBucketRec {
                #[inline]
                fn clone(&self) -> _XrmHashBucketRec {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _bindgen_ty_1 {
                pub ext_data: *mut XExtData,
                pub private1: *mut _XPrivate,
                pub fd: ::std::os::raw::c_int,
                pub private2: ::std::os::raw::c_int,
                pub proto_major_version: ::std::os::raw::c_int,
                pub proto_minor_version: ::std::os::raw::c_int,
                pub vendor: *mut ::std::os::raw::c_char,
                pub private3: XID,
                pub private4: XID,
                pub private5: XID,
                pub private6: ::std::os::raw::c_int,
                pub resource_alloc:
                    ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID>,
                pub byte_order: ::std::os::raw::c_int,
                pub bitmap_unit: ::std::os::raw::c_int,
                pub bitmap_pad: ::std::os::raw::c_int,
                pub bitmap_bit_order: ::std::os::raw::c_int,
                pub nformats: ::std::os::raw::c_int,
                pub pixmap_format: *mut ScreenFormat,
                pub private8: ::std::os::raw::c_int,
                pub release: ::std::os::raw::c_int,
                pub private9: *mut _XPrivate,
                pub private10: *mut _XPrivate,
                pub qlen: ::std::os::raw::c_int,
                pub last_request_read: ::std::os::raw::c_ulong,
                pub request: ::std::os::raw::c_ulong,
                pub private11: XPointer,
                pub private12: XPointer,
                pub private13: XPointer,
                pub private14: XPointer,
                pub max_request_size: ::std::os::raw::c_uint,
                pub db: *mut _XrmHashBucketRec,
                pub private15: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int,
                >,
                pub display_name: *mut ::std::os::raw::c_char,
                pub default_screen: ::std::os::raw::c_int,
                pub nscreens: ::std::os::raw::c_int,
                pub screens: *mut Screen,
                pub motion_buffer: ::std::os::raw::c_ulong,
                pub private16: ::std::os::raw::c_ulong,
                pub min_keycode: ::std::os::raw::c_int,
                pub max_keycode: ::std::os::raw::c_int,
                pub private17: XPointer,
                pub private18: XPointer,
                pub private19: ::std::os::raw::c_int,
                pub xdefaults: *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _bindgen_ty_1 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _bindgen_ty_1 {
                            ext_data: ref __self_0_0,
                            private1: ref __self_0_1,
                            fd: ref __self_0_2,
                            private2: ref __self_0_3,
                            proto_major_version: ref __self_0_4,
                            proto_minor_version: ref __self_0_5,
                            vendor: ref __self_0_6,
                            private3: ref __self_0_7,
                            private4: ref __self_0_8,
                            private5: ref __self_0_9,
                            private6: ref __self_0_10,
                            resource_alloc: ref __self_0_11,
                            byte_order: ref __self_0_12,
                            bitmap_unit: ref __self_0_13,
                            bitmap_pad: ref __self_0_14,
                            bitmap_bit_order: ref __self_0_15,
                            nformats: ref __self_0_16,
                            pixmap_format: ref __self_0_17,
                            private8: ref __self_0_18,
                            release: ref __self_0_19,
                            private9: ref __self_0_20,
                            private10: ref __self_0_21,
                            qlen: ref __self_0_22,
                            last_request_read: ref __self_0_23,
                            request: ref __self_0_24,
                            private11: ref __self_0_25,
                            private12: ref __self_0_26,
                            private13: ref __self_0_27,
                            private14: ref __self_0_28,
                            max_request_size: ref __self_0_29,
                            db: ref __self_0_30,
                            private15: ref __self_0_31,
                            display_name: ref __self_0_32,
                            default_screen: ref __self_0_33,
                            nscreens: ref __self_0_34,
                            screens: ref __self_0_35,
                            motion_buffer: ref __self_0_36,
                            private16: ref __self_0_37,
                            min_keycode: ref __self_0_38,
                            max_keycode: ref __self_0_39,
                            private17: ref __self_0_40,
                            private18: ref __self_0_41,
                            private19: ref __self_0_42,
                            xdefaults: ref __self_0_43,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_bindgen_ty_1");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("private1", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("fd", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("private2", &&(*__self_0_3));
                            let _ =
                                debug_trait_builder.field("proto_major_version", &&(*__self_0_4));
                            let _ =
                                debug_trait_builder.field("proto_minor_version", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("vendor", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("private3", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("private4", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("private5", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("private6", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("resource_alloc", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("byte_order", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("bitmap_unit", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("bitmap_pad", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("bitmap_bit_order", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("nformats", &&(*__self_0_16));
                            let _ = debug_trait_builder.field("pixmap_format", &&(*__self_0_17));
                            let _ = debug_trait_builder.field("private8", &&(*__self_0_18));
                            let _ = debug_trait_builder.field("release", &&(*__self_0_19));
                            let _ = debug_trait_builder.field("private9", &&(*__self_0_20));
                            let _ = debug_trait_builder.field("private10", &&(*__self_0_21));
                            let _ = debug_trait_builder.field("qlen", &&(*__self_0_22));
                            let _ =
                                debug_trait_builder.field("last_request_read", &&(*__self_0_23));
                            let _ = debug_trait_builder.field("request", &&(*__self_0_24));
                            let _ = debug_trait_builder.field("private11", &&(*__self_0_25));
                            let _ = debug_trait_builder.field("private12", &&(*__self_0_26));
                            let _ = debug_trait_builder.field("private13", &&(*__self_0_27));
                            let _ = debug_trait_builder.field("private14", &&(*__self_0_28));
                            let _ = debug_trait_builder.field("max_request_size", &&(*__self_0_29));
                            let _ = debug_trait_builder.field("db", &&(*__self_0_30));
                            let _ = debug_trait_builder.field("private15", &&(*__self_0_31));
                            let _ = debug_trait_builder.field("display_name", &&(*__self_0_32));
                            let _ = debug_trait_builder.field("default_screen", &&(*__self_0_33));
                            let _ = debug_trait_builder.field("nscreens", &&(*__self_0_34));
                            let _ = debug_trait_builder.field("screens", &&(*__self_0_35));
                            let _ = debug_trait_builder.field("motion_buffer", &&(*__self_0_36));
                            let _ = debug_trait_builder.field("private16", &&(*__self_0_37));
                            let _ = debug_trait_builder.field("min_keycode", &&(*__self_0_38));
                            let _ = debug_trait_builder.field("max_keycode", &&(*__self_0_39));
                            let _ = debug_trait_builder.field("private17", &&(*__self_0_40));
                            let _ = debug_trait_builder.field("private18", &&(*__self_0_41));
                            let _ = debug_trait_builder.field("private19", &&(*__self_0_42));
                            let _ = debug_trait_builder.field("xdefaults", &&(*__self_0_43));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ScreenFormat>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XPrivate>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<*mut _XrmHashBucketRec>;
                        let _: ::core::clone::AssertParamIsClone<
                            ::std::option::Option<
                                unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int,
                            >,
                        >;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Screen>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            pub type _XPrivDisplay = *mut _bindgen_ty_1;
            #[repr(C)]
            pub struct XKeyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub keycode: ::std::os::raw::c_uint,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            keycode: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("keycode", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeyEvent {
                #[inline]
                fn clone(&self) -> XKeyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XKeyPressedEvent = XKeyEvent;
            pub type XKeyReleasedEvent = XKeyEvent;
            #[repr(C)]
            pub struct XButtonEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub button: ::std::os::raw::c_uint,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XButtonEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XButtonEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            button: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XButtonEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("button", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XButtonEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XButtonEvent {
                #[inline]
                fn clone(&self) -> XButtonEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XButtonPressedEvent = XButtonEvent;
            pub type XButtonReleasedEvent = XButtonEvent;
            #[repr(C)]
            pub struct XMotionEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
                pub is_hint: ::std::os::raw::c_char,
                pub same_screen: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMotionEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMotionEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            state: ref __self_0_12,
                            is_hint: ref __self_0_13,
                            same_screen: ref __self_0_14,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMotionEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("is_hint", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMotionEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMotionEvent {
                #[inline]
                fn clone(&self) -> XMotionEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XPointerMovedEvent = XMotionEvent;
            #[repr(C)]
            pub struct XCrossingEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub root: Window,
                pub subwindow: Window,
                pub time: Time,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub x_root: ::std::os::raw::c_int,
                pub y_root: ::std::os::raw::c_int,
                pub mode: ::std::os::raw::c_int,
                pub detail: ::std::os::raw::c_int,
                pub same_screen: ::std::os::raw::c_int,
                pub focus: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_uint,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCrossingEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCrossingEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            root: ref __self_0_5,
                            subwindow: ref __self_0_6,
                            time: ref __self_0_7,
                            x: ref __self_0_8,
                            y: ref __self_0_9,
                            x_root: ref __self_0_10,
                            y_root: ref __self_0_11,
                            mode: ref __self_0_12,
                            detail: ref __self_0_13,
                            same_screen: ref __self_0_14,
                            focus: ref __self_0_15,
                            state: ref __self_0_16,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCrossingEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("root", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("subwindow", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("x_root", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("y_root", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("mode", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("same_screen", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("focus", &&(*__self_0_15));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_16));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCrossingEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCrossingEvent {
                #[inline]
                fn clone(&self) -> XCrossingEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        *self
                    }
                }
            }
            pub type XEnterWindowEvent = XCrossingEvent;
            pub type XLeaveWindowEvent = XCrossingEvent;
            #[repr(C)]
            pub struct XFocusChangeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub mode: ::std::os::raw::c_int,
                pub detail: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFocusChangeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFocusChangeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            mode: ref __self_0_5,
                            detail: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFocusChangeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("mode", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFocusChangeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFocusChangeEvent {
                #[inline]
                fn clone(&self) -> XFocusChangeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XFocusInEvent = XFocusChangeEvent;
            pub type XFocusOutEvent = XFocusChangeEvent;
            #[repr(C)]
            pub struct XKeymapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub key_vector: [::std::os::raw::c_char; 32usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XKeymapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XKeymapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            key_vector: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XKeymapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("key_vector", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XKeymapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XKeymapEvent {
                #[inline]
                fn clone(&self) -> XKeymapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<
                            [::std::os::raw::c_char; 32usize],
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            x: ref __self_0_5,
                            y: ref __self_0_6,
                            width: ref __self_0_7,
                            height: ref __self_0_8,
                            count: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XExposeEvent {
                #[inline]
                fn clone(&self) -> XExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGraphicsExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub drawable: Drawable,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
                pub major_code: ::std::os::raw::c_int,
                pub minor_code: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGraphicsExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGraphicsExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            drawable: ref __self_0_4,
                            x: ref __self_0_5,
                            y: ref __self_0_6,
                            width: ref __self_0_7,
                            height: ref __self_0_8,
                            count: ref __self_0_9,
                            major_code: ref __self_0_10,
                            minor_code: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGraphicsExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("drawable", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("major_code", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGraphicsExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGraphicsExposeEvent {
                #[inline]
                fn clone(&self) -> XGraphicsExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Drawable>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XNoExposeEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub drawable: Drawable,
                pub major_code: ::std::os::raw::c_int,
                pub minor_code: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XNoExposeEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XNoExposeEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            drawable: ref __self_0_4,
                            major_code: ref __self_0_5,
                            minor_code: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XNoExposeEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("drawable", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("major_code", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XNoExposeEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XNoExposeEvent {
                #[inline]
                fn clone(&self) -> XNoExposeEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Drawable>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XVisibilityEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XVisibilityEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XVisibilityEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            state: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XVisibilityEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XVisibilityEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XVisibilityEvent {
                #[inline]
                fn clone(&self) -> XVisibilityEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCreateWindowEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCreateWindowEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCreateWindowEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            override_redirect: ref __self_0_11,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCreateWindowEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_11));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCreateWindowEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCreateWindowEvent {
                #[inline]
                fn clone(&self) -> XCreateWindowEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XDestroyWindowEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XDestroyWindowEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XDestroyWindowEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XDestroyWindowEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XDestroyWindowEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XDestroyWindowEvent {
                #[inline]
                fn clone(&self) -> XDestroyWindowEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XUnmapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub from_configure: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XUnmapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XUnmapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            from_configure: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XUnmapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("from_configure", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XUnmapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XUnmapEvent {
                #[inline]
                fn clone(&self) -> XUnmapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            override_redirect: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("override_redirect", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMapEvent {
                #[inline]
                fn clone(&self) -> XMapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMapRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMapRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMapRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMapRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMapRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMapRequestEvent {
                #[inline]
                fn clone(&self) -> XMapRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XReparentEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub parent: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XReparentEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XReparentEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            parent: ref __self_0_6,
                            x: ref __self_0_7,
                            y: ref __self_0_8,
                            override_redirect: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XReparentEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("override_redirect", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XReparentEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XReparentEvent {
                #[inline]
                fn clone(&self) -> XReparentEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XConfigureEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub above: Window,
                pub override_redirect: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XConfigureEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XConfigureEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            above: ref __self_0_11,
                            override_redirect: ref __self_0_12,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XConfigureEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("above", &&(*__self_0_11));
                            let _ =
                                debug_trait_builder.field("override_redirect", &&(*__self_0_12));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XConfigureEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XConfigureEvent {
                #[inline]
                fn clone(&self) -> XConfigureEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGravityEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGravityEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGravityEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGravityEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGravityEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGravityEvent {
                #[inline]
                fn clone(&self) -> XGravityEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XResizeRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XResizeRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XResizeRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            width: ref __self_0_5,
                            height: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XResizeRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XResizeRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XResizeRequestEvent {
                #[inline]
                fn clone(&self) -> XResizeRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XConfigureRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub x: ::std::os::raw::c_int,
                pub y: ::std::os::raw::c_int,
                pub width: ::std::os::raw::c_int,
                pub height: ::std::os::raw::c_int,
                pub border_width: ::std::os::raw::c_int,
                pub above: Window,
                pub detail: ::std::os::raw::c_int,
                pub value_mask: ::std::os::raw::c_ulong,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XConfigureRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XConfigureRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            x: ref __self_0_6,
                            y: ref __self_0_7,
                            width: ref __self_0_8,
                            height: ref __self_0_9,
                            border_width: ref __self_0_10,
                            above: ref __self_0_11,
                            detail: ref __self_0_12,
                            value_mask: ref __self_0_13,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XConfigureRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("x", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("y", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("height", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("border_width", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("above", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("detail", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("value_mask", &&(*__self_0_13));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XConfigureRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XConfigureRequestEvent {
                #[inline]
                fn clone(&self) -> XConfigureRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCirculateEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub event: Window,
                pub window: Window,
                pub place: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCirculateEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCirculateEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            event: ref __self_0_4,
                            window: ref __self_0_5,
                            place: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCirculateEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("event", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("place", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCirculateEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCirculateEvent {
                #[inline]
                fn clone(&self) -> XCirculateEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XCirculateRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub parent: Window,
                pub window: Window,
                pub place: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCirculateRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCirculateRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            parent: ref __self_0_4,
                            window: ref __self_0_5,
                            place: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCirculateRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("parent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("place", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCirculateRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCirculateRequestEvent {
                #[inline]
                fn clone(&self) -> XCirculateRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XPropertyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub atom: Atom,
                pub time: Time,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XPropertyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XPropertyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            atom: ref __self_0_5,
                            time: ref __self_0_6,
                            state: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XPropertyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("atom", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XPropertyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XPropertyEvent {
                #[inline]
                fn clone(&self) -> XPropertyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionClearEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub selection: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionClearEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionClearEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            selection: ref __self_0_5,
                            time: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionClearEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionClearEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionClearEvent {
                #[inline]
                fn clone(&self) -> XSelectionClearEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionRequestEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub owner: Window,
                pub requestor: Window,
                pub selection: Atom,
                pub target: Atom,
                pub property: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionRequestEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionRequestEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            owner: ref __self_0_4,
                            requestor: ref __self_0_5,
                            selection: ref __self_0_6,
                            target: ref __self_0_7,
                            property: ref __self_0_8,
                            time: ref __self_0_9,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionRequestEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("owner", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("requestor", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("target", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("property", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_9));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionRequestEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionRequestEvent {
                #[inline]
                fn clone(&self) -> XSelectionRequestEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XSelectionEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub requestor: Window,
                pub selection: Atom,
                pub target: Atom,
                pub property: Atom,
                pub time: Time,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XSelectionEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XSelectionEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            requestor: ref __self_0_4,
                            selection: ref __self_0_5,
                            target: ref __self_0_6,
                            property: ref __self_0_7,
                            time: ref __self_0_8,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XSelectionEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("requestor", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("selection", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("target", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("property", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("time", &&(*__self_0_8));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XSelectionEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XSelectionEvent {
                #[inline]
                fn clone(&self) -> XSelectionEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<Time>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XColormapEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub colormap: Colormap,
                pub new: ::std::os::raw::c_int,
                pub state: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XColormapEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XColormapEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            colormap: ref __self_0_5,
                            new: ref __self_0_6,
                            state: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XColormapEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("colormap", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("new", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("state", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XColormapEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XColormapEvent {
                #[inline]
                fn clone(&self) -> XColormapEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Colormap>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XClientMessageEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub message_type: Atom,
                pub format: ::std::os::raw::c_int,
                pub data: XClientMessageEvent__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XClientMessageEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XClientMessageEvent {
                #[inline]
                fn clone(&self) -> XClientMessageEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            XClientMessageEvent__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union XClientMessageEvent__bindgen_ty_1 {
                pub b: [::std::os::raw::c_char; 20usize],
                pub s: [::std::os::raw::c_short; 10usize],
                pub l: [::std::os::raw::c_long; 5usize],
                _bindgen_union_align: [u64; 5usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XClientMessageEvent__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XClientMessageEvent__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> XClientMessageEvent__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XMappingEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
                pub request: ::std::os::raw::c_int,
                pub first_keycode: ::std::os::raw::c_int,
                pub count: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XMappingEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XMappingEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                            request: ref __self_0_5,
                            first_keycode: ref __self_0_6,
                            count: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XMappingEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("request", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("first_keycode", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("count", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XMappingEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XMappingEvent {
                #[inline]
                fn clone(&self) -> XMappingEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XErrorEvent {
                pub type_: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub resourceid: XID,
                pub serial: ::std::os::raw::c_ulong,
                pub error_code: ::std::os::raw::c_uchar,
                pub request_code: ::std::os::raw::c_uchar,
                pub minor_code: ::std::os::raw::c_uchar,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XErrorEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XErrorEvent {
                            type_: ref __self_0_0,
                            display: ref __self_0_1,
                            resourceid: ref __self_0_2,
                            serial: ref __self_0_3,
                            error_code: ref __self_0_4,
                            request_code: ref __self_0_5,
                            minor_code: ref __self_0_6,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XErrorEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("resourceid", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("error_code", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("request_code", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("minor_code", &&(*__self_0_6));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XErrorEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XErrorEvent {
                #[inline]
                fn clone(&self) -> XErrorEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<XID>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XAnyEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub window: Window,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XAnyEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XAnyEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            window: ref __self_0_4,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XAnyEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("window", &&(*__self_0_4));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XAnyEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XAnyEvent {
                #[inline]
                fn clone(&self) -> XAnyEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<Window>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGenericEvent {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub extension: ::std::os::raw::c_int,
                pub evtype: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGenericEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGenericEvent {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            extension: ref __self_0_4,
                            evtype: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGenericEvent");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("evtype", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGenericEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGenericEvent {
                #[inline]
                fn clone(&self) -> XGenericEvent {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XGenericEventCookie {
                pub type_: ::std::os::raw::c_int,
                pub serial: ::std::os::raw::c_ulong,
                pub send_event: ::std::os::raw::c_int,
                pub display: *mut Display,
                pub extension: ::std::os::raw::c_int,
                pub evtype: ::std::os::raw::c_int,
                pub cookie: ::std::os::raw::c_uint,
                pub data: *mut ::std::os::raw::c_void,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XGenericEventCookie {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XGenericEventCookie {
                            type_: ref __self_0_0,
                            serial: ref __self_0_1,
                            send_event: ref __self_0_2,
                            display: ref __self_0_3,
                            extension: ref __self_0_4,
                            evtype: ref __self_0_5,
                            cookie: ref __self_0_6,
                            data: ref __self_0_7,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XGenericEventCookie");
                            let _ = debug_trait_builder.field("type_", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("serial", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("send_event", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("display", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("extension", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("evtype", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("cookie", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("data", &&(*__self_0_7));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XGenericEventCookie {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XGenericEventCookie {
                #[inline]
                fn clone(&self) -> XGenericEventCookie {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut Display>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_void>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XEvent {
                pub type_: ::std::os::raw::c_int,
                pub xany: XAnyEvent,
                pub xkey: XKeyEvent,
                pub xbutton: XButtonEvent,
                pub xmotion: XMotionEvent,
                pub xcrossing: XCrossingEvent,
                pub xfocus: XFocusChangeEvent,
                pub xexpose: XExposeEvent,
                pub xgraphicsexpose: XGraphicsExposeEvent,
                pub xnoexpose: XNoExposeEvent,
                pub xvisibility: XVisibilityEvent,
                pub xcreatewindow: XCreateWindowEvent,
                pub xdestroywindow: XDestroyWindowEvent,
                pub xunmap: XUnmapEvent,
                pub xmap: XMapEvent,
                pub xmaprequest: XMapRequestEvent,
                pub xreparent: XReparentEvent,
                pub xconfigure: XConfigureEvent,
                pub xgravity: XGravityEvent,
                pub xresizerequest: XResizeRequestEvent,
                pub xconfigurerequest: XConfigureRequestEvent,
                pub xcirculate: XCirculateEvent,
                pub xcirculaterequest: XCirculateRequestEvent,
                pub xproperty: XPropertyEvent,
                pub xselectionclear: XSelectionClearEvent,
                pub xselectionrequest: XSelectionRequestEvent,
                pub xselection: XSelectionEvent,
                pub xcolormap: XColormapEvent,
                pub xclient: XClientMessageEvent,
                pub xmapping: XMappingEvent,
                pub xerror: XErrorEvent,
                pub xkeymap: XKeymapEvent,
                pub xgeneric: XGenericEvent,
                pub xcookie: XGenericEventCookie,
                pub pad: [::std::os::raw::c_long; 24usize],
                _bindgen_union_align: [u64; 24usize],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XEvent {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XEvent {
                #[inline]
                fn clone(&self) -> _XEvent {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XEvent = _XEvent;
            #[repr(C)]
            pub struct XCharStruct {
                pub lbearing: ::std::os::raw::c_short,
                pub rbearing: ::std::os::raw::c_short,
                pub width: ::std::os::raw::c_short,
                pub ascent: ::std::os::raw::c_short,
                pub descent: ::std::os::raw::c_short,
                pub attributes: ::std::os::raw::c_ushort,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XCharStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XCharStruct {
                            lbearing: ref __self_0_0,
                            rbearing: ref __self_0_1,
                            width: ref __self_0_2,
                            ascent: ref __self_0_3,
                            descent: ref __self_0_4,
                            attributes: ref __self_0_5,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XCharStruct");
                            let _ = debug_trait_builder.field("lbearing", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("rbearing", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("ascent", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("descent", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("attributes", &&(*__self_0_5));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XCharStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XCharStruct {
                #[inline]
                fn clone(&self) -> XCharStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_short>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontProp {
                pub name: Atom,
                pub card32: ::std::os::raw::c_ulong,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontProp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontProp {
                            name: ref __self_0_0,
                            card32: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontProp");
                            let _ = debug_trait_builder.field("name", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("card32", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontProp {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontProp {
                #[inline]
                fn clone(&self) -> XFontProp {
                    {
                        let _: ::core::clone::AssertParamIsClone<Atom>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ulong>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontStruct {
                pub ext_data: *mut XExtData,
                pub fid: Font,
                pub direction: ::std::os::raw::c_uint,
                pub min_char_or_byte2: ::std::os::raw::c_uint,
                pub max_char_or_byte2: ::std::os::raw::c_uint,
                pub min_byte1: ::std::os::raw::c_uint,
                pub max_byte1: ::std::os::raw::c_uint,
                pub all_chars_exist: ::std::os::raw::c_int,
                pub default_char: ::std::os::raw::c_uint,
                pub n_properties: ::std::os::raw::c_int,
                pub properties: *mut XFontProp,
                pub min_bounds: XCharStruct,
                pub max_bounds: XCharStruct,
                pub per_char: *mut XCharStruct,
                pub ascent: ::std::os::raw::c_int,
                pub descent: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontStruct {
                            ext_data: ref __self_0_0,
                            fid: ref __self_0_1,
                            direction: ref __self_0_2,
                            min_char_or_byte2: ref __self_0_3,
                            max_char_or_byte2: ref __self_0_4,
                            min_byte1: ref __self_0_5,
                            max_byte1: ref __self_0_6,
                            all_chars_exist: ref __self_0_7,
                            default_char: ref __self_0_8,
                            n_properties: ref __self_0_9,
                            properties: ref __self_0_10,
                            min_bounds: ref __self_0_11,
                            max_bounds: ref __self_0_12,
                            per_char: ref __self_0_13,
                            ascent: ref __self_0_14,
                            descent: ref __self_0_15,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontStruct");
                            let _ = debug_trait_builder.field("ext_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("fid", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("min_char_or_byte2", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("max_char_or_byte2", &&(*__self_0_4));
                            let _ = debug_trait_builder.field("min_byte1", &&(*__self_0_5));
                            let _ = debug_trait_builder.field("max_byte1", &&(*__self_0_6));
                            let _ = debug_trait_builder.field("all_chars_exist", &&(*__self_0_7));
                            let _ = debug_trait_builder.field("default_char", &&(*__self_0_8));
                            let _ = debug_trait_builder.field("n_properties", &&(*__self_0_9));
                            let _ = debug_trait_builder.field("properties", &&(*__self_0_10));
                            let _ = debug_trait_builder.field("min_bounds", &&(*__self_0_11));
                            let _ = debug_trait_builder.field("max_bounds", &&(*__self_0_12));
                            let _ = debug_trait_builder.field("per_char", &&(*__self_0_13));
                            let _ = debug_trait_builder.field("ascent", &&(*__self_0_14));
                            let _ = debug_trait_builder.field("descent", &&(*__self_0_15));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontStruct {
                #[inline]
                fn clone(&self) -> XFontStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XExtData>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uint>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XFontProp>;
                        let _: ::core::clone::AssertParamIsClone<XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<*mut XCharStruct>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTextItem {
                pub chars: *mut ::std::os::raw::c_char,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font: Font,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTextItem {
                #[inline]
                fn clone(&self) -> XTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XChar2b {
                pub byte1: ::std::os::raw::c_uchar,
                pub byte2: ::std::os::raw::c_uchar,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XChar2b {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XChar2b {
                            byte1: ref __self_0_0,
                            byte2: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XChar2b");
                            let _ = debug_trait_builder.field("byte1", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("byte2", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XChar2b {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XChar2b {
                #[inline]
                fn clone(&self) -> XChar2b {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_uchar>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XTextItem16 {
                pub chars: *mut XChar2b,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font: Font,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XTextItem16 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XTextItem16 {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XTextItem16");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XTextItem16 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XTextItem16 {
                #[inline]
                fn clone(&self) -> XTextItem16 {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut XChar2b>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<Font>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union XEDataObject {
                pub display: *mut Display,
                pub gc: GC,
                pub visual: *mut Visual,
                pub screen: *mut Screen,
                pub pixmap_format: *mut ScreenFormat,
                pub font: *mut XFontStruct,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XEDataObject {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XEDataObject {
                #[inline]
                fn clone(&self) -> XEDataObject {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XFontSetExtents {
                pub max_ink_extent: XRectangle,
                pub max_logical_extent: XRectangle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XFontSetExtents {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XFontSetExtents {
                            max_ink_extent: ref __self_0_0,
                            max_logical_extent: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XFontSetExtents");
                            let _ = debug_trait_builder.field("max_ink_extent", &&(*__self_0_0));
                            let _ =
                                debug_trait_builder.field("max_logical_extent", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XFontSetExtents {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XFontSetExtents {
                #[inline]
                fn clone(&self) -> XFontSetExtents {
                    {
                        let _: ::core::clone::AssertParamIsClone<XRectangle>;
                        let _: ::core::clone::AssertParamIsClone<XRectangle>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XOM {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XOM {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XOM {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XOM");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XOM {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XOM {
                #[inline]
                fn clone(&self) -> _XOM {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XOM = *mut _XOM;
            #[repr(C)]
            pub struct _XOC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XOC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XOC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XOC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XOC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XOC {
                #[inline]
                fn clone(&self) -> _XOC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XOC = *mut _XOC;
            pub type XFontSet = *mut _XOC;
            #[repr(C)]
            pub struct XmbTextItem {
                pub chars: *mut ::std::os::raw::c_char,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font_set: XFontSet,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XmbTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XmbTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font_set: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XmbTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font_set", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XmbTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XmbTextItem {
                #[inline]
                fn clone(&self) -> XmbTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut ::std::os::raw::c_char>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XFontSet>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XwcTextItem {
                pub chars: *mut wchar_t,
                pub nchars: ::std::os::raw::c_int,
                pub delta: ::std::os::raw::c_int,
                pub font_set: XFontSet,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XwcTextItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XwcTextItem {
                            chars: ref __self_0_0,
                            nchars: ref __self_0_1,
                            delta: ref __self_0_2,
                            font_set: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XwcTextItem");
                            let _ = debug_trait_builder.field("chars", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("nchars", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("delta", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("font_set", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XwcTextItem {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XwcTextItem {
                #[inline]
                fn clone(&self) -> XwcTextItem {
                    {
                        let _: ::core::clone::AssertParamIsClone<*mut wchar_t>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XFontSet>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XOMCharSetList {
                pub charset_count: ::std::os::raw::c_int,
                pub charset_list: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMCharSetList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMCharSetList {
                            charset_count: ref __self_0_0,
                            charset_list: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMCharSetList");
                            let _ = debug_trait_builder.field("charset_count", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("charset_list", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMCharSetList {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMCharSetList {
                #[inline]
                fn clone(&self) -> XOMCharSetList {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            pub const XOrientation_XOMOrientation_LTR_TTB: XOrientation = 0;
            pub const XOrientation_XOMOrientation_RTL_TTB: XOrientation = 1;
            pub const XOrientation_XOMOrientation_TTB_LTR: XOrientation = 2;
            pub const XOrientation_XOMOrientation_TTB_RTL: XOrientation = 3;
            pub const XOrientation_XOMOrientation_Context: XOrientation = 4;
            pub type XOrientation = u32;
            #[repr(C)]
            pub struct XOMOrientation {
                pub num_orientation: ::std::os::raw::c_int,
                pub orientation: *mut XOrientation,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMOrientation {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMOrientation {
                            num_orientation: ref __self_0_0,
                            orientation: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMOrientation");
                            let _ = debug_trait_builder.field("num_orientation", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("orientation", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMOrientation {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMOrientation {
                #[inline]
                fn clone(&self) -> XOMOrientation {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XOrientation>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XOMFontInfo {
                pub num_font: ::std::os::raw::c_int,
                pub font_struct_list: *mut *mut XFontStruct,
                pub font_name_list: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XOMFontInfo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XOMFontInfo {
                            num_font: ref __self_0_0,
                            font_struct_list: ref __self_0_1,
                            font_name_list: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XOMFontInfo");
                            let _ = debug_trait_builder.field("num_font", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("font_struct_list", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("font_name_list", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XOMFontInfo {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XOMFontInfo {
                #[inline]
                fn clone(&self) -> XOMFontInfo {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut XFontStruct>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct _XIM {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIM {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIM {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIM");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIM {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIM {
                #[inline]
                fn clone(&self) -> _XIM {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XIM = *mut _XIM;
            #[repr(C)]
            pub struct _XIC {
                _unused: [u8; 0],
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIC {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIC {
                            _unused: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIC");
                            let _ = debug_trait_builder.field("_unused", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIC {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIC {
                #[inline]
                fn clone(&self) -> _XIC {
                    {
                        let _: ::core::clone::AssertParamIsClone<[u8; 0]>;
                        *self
                    }
                }
            }
            pub type XIC = *mut _XIC;
            pub type XIMProc = ::std::option::Option<
                unsafe extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer),
            >;
            pub type XICProc = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: XIC,
                    arg2: XPointer,
                    arg3: XPointer,
                ) -> ::std::os::raw::c_int,
            >;
            pub type XIDProc = ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display, arg2: XPointer, arg3: XPointer),
            >;
            pub type XIMStyle = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct XIMStyles {
                pub count_styles: ::std::os::raw::c_ushort,
                pub supported_styles: *mut XIMStyle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMStyles {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMStyles {
                            count_styles: ref __self_0_0,
                            supported_styles: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMStyles");
                            let _ = debug_trait_builder.field("count_styles", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("supported_styles", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMStyles {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMStyles {
                #[inline]
                fn clone(&self) -> XIMStyles {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStyle>;
                        *self
                    }
                }
            }
            pub type XVaNestedList = *mut ::std::os::raw::c_void;
            #[repr(C)]
            pub struct XIMCallback {
                pub client_data: XPointer,
                pub callback: XIMProc,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMCallback {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMCallback {
                            client_data: ref __self_0_0,
                            callback: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMCallback");
                            let _ = debug_trait_builder.field("client_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("callback", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMCallback {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMCallback {
                #[inline]
                fn clone(&self) -> XIMCallback {
                    {
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XIMProc>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub struct XICCallback {
                pub client_data: XPointer,
                pub callback: XICProc,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XICCallback {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XICCallback {
                            client_data: ref __self_0_0,
                            callback: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XICCallback");
                            let _ = debug_trait_builder.field("client_data", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("callback", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XICCallback {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XICCallback {
                #[inline]
                fn clone(&self) -> XICCallback {
                    {
                        let _: ::core::clone::AssertParamIsClone<XPointer>;
                        let _: ::core::clone::AssertParamIsClone<XICProc>;
                        *self
                    }
                }
            }
            pub type XIMFeedback = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMText {
                pub length: ::std::os::raw::c_ushort,
                pub feedback: *mut XIMFeedback,
                pub encoding_is_wchar: ::std::os::raw::c_int,
                pub string: _XIMText__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMText {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMText {
                #[inline]
                fn clone(&self) -> _XIMText {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMFeedback>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<_XIMText__bindgen_ty_1>;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMText__bindgen_ty_1 {
                pub multi_byte: *mut ::std::os::raw::c_char,
                pub wide_char: *mut wchar_t,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMText__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMText__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMText__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMText = _XIMText;
            pub type XIMPreeditState = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMPreeditStateNotifyCallbackStruct {
                pub state: XIMPreeditState,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditStateNotifyCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditStateNotifyCallbackStruct {
                            state: ref __self_0_0,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditStateNotifyCallbackStruct");
                            let _ = debug_trait_builder.field("state", &&(*__self_0_0));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditStateNotifyCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditStateNotifyCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditStateNotifyCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMPreeditState>;
                        *self
                    }
                }
            }
            pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct;
            pub type XIMResetState = ::std::os::raw::c_ulong;
            pub type XIMStringConversionFeedback = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct _XIMStringConversionText {
                pub length: ::std::os::raw::c_ushort,
                pub feedback: *mut XIMStringConversionFeedback,
                pub encoding_is_wchar: ::std::os::raw::c_int,
                pub string: _XIMStringConversionText__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionText {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionText {
                #[inline]
                fn clone(&self) -> _XIMStringConversionText {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStringConversionFeedback>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<
                            _XIMStringConversionText__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMStringConversionText__bindgen_ty_1 {
                pub mbs: *mut ::std::os::raw::c_char,
                pub wcs: *mut wchar_t,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionText__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionText__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMStringConversionText__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMStringConversionText = _XIMStringConversionText;
            pub type XIMStringConversionPosition = ::std::os::raw::c_ushort;
            pub type XIMStringConversionType = ::std::os::raw::c_ushort;
            pub type XIMStringConversionOperation = ::std::os::raw::c_ushort;
            pub const XIMCaretDirection_XIMForwardChar: XIMCaretDirection = 0;
            pub const XIMCaretDirection_XIMBackwardChar: XIMCaretDirection = 1;
            pub const XIMCaretDirection_XIMForwardWord: XIMCaretDirection = 2;
            pub const XIMCaretDirection_XIMBackwardWord: XIMCaretDirection = 3;
            pub const XIMCaretDirection_XIMCaretUp: XIMCaretDirection = 4;
            pub const XIMCaretDirection_XIMCaretDown: XIMCaretDirection = 5;
            pub const XIMCaretDirection_XIMNextLine: XIMCaretDirection = 6;
            pub const XIMCaretDirection_XIMPreviousLine: XIMCaretDirection = 7;
            pub const XIMCaretDirection_XIMLineStart: XIMCaretDirection = 8;
            pub const XIMCaretDirection_XIMLineEnd: XIMCaretDirection = 9;
            pub const XIMCaretDirection_XIMAbsolutePosition: XIMCaretDirection = 10;
            pub const XIMCaretDirection_XIMDontChange: XIMCaretDirection = 11;
            pub type XIMCaretDirection = u32;
            #[repr(C)]
            pub struct _XIMStringConversionCallbackStruct {
                pub position: XIMStringConversionPosition,
                pub direction: XIMCaretDirection,
                pub operation: XIMStringConversionOperation,
                pub factor: ::std::os::raw::c_ushort,
                pub text: *mut XIMStringConversionText,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMStringConversionCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMStringConversionCallbackStruct {
                            position: ref __self_0_0,
                            direction: ref __self_0_1,
                            operation: ref __self_0_2,
                            factor: ref __self_0_3,
                            text: ref __self_0_4,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMStringConversionCallbackStruct");
                            let _ = debug_trait_builder.field("position", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("operation", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("factor", &&(*__self_0_3));
                            let _ = debug_trait_builder.field("text", &&(*__self_0_4));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStringConversionCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStringConversionCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMStringConversionCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMStringConversionPosition>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretDirection>;
                        let _: ::core::clone::AssertParamIsClone<XIMStringConversionOperation>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMStringConversionText>;
                        *self
                    }
                }
            }
            pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;
            #[repr(C)]
            pub struct _XIMPreeditDrawCallbackStruct {
                pub caret: ::std::os::raw::c_int,
                pub chg_first: ::std::os::raw::c_int,
                pub chg_length: ::std::os::raw::c_int,
                pub text: *mut XIMText,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditDrawCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditDrawCallbackStruct {
                            caret: ref __self_0_0,
                            chg_first: ref __self_0_1,
                            chg_length: ref __self_0_2,
                            text: ref __self_0_3,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditDrawCallbackStruct");
                            let _ = debug_trait_builder.field("caret", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("chg_first", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("chg_length", &&(*__self_0_2));
                            let _ = debug_trait_builder.field("text", &&(*__self_0_3));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditDrawCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditDrawCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditDrawCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMText>;
                        *self
                    }
                }
            }
            pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;
            pub const XIMCaretStyle_XIMIsInvisible: XIMCaretStyle = 0;
            pub const XIMCaretStyle_XIMIsPrimary: XIMCaretStyle = 1;
            pub const XIMCaretStyle_XIMIsSecondary: XIMCaretStyle = 2;
            pub type XIMCaretStyle = u32;
            #[repr(C)]
            pub struct _XIMPreeditCaretCallbackStruct {
                pub position: ::std::os::raw::c_int,
                pub direction: XIMCaretDirection,
                pub style: XIMCaretStyle,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMPreeditCaretCallbackStruct {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMPreeditCaretCallbackStruct {
                            position: ref __self_0_0,
                            direction: ref __self_0_1,
                            style: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder =
                                f.debug_struct("_XIMPreeditCaretCallbackStruct");
                            let _ = debug_trait_builder.field("position", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("direction", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("style", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMPreeditCaretCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMPreeditCaretCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMPreeditCaretCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretDirection>;
                        let _: ::core::clone::AssertParamIsClone<XIMCaretStyle>;
                        *self
                    }
                }
            }
            pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;
            pub const XIMStatusDataType_XIMTextType: XIMStatusDataType = 0;
            pub const XIMStatusDataType_XIMBitmapType: XIMStatusDataType = 1;
            pub type XIMStatusDataType = u32;
            #[repr(C)]
            pub struct _XIMStatusDrawCallbackStruct {
                pub type_: XIMStatusDataType,
                pub data: _XIMStatusDrawCallbackStruct__bindgen_ty_1,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStatusDrawCallbackStruct {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStatusDrawCallbackStruct {
                #[inline]
                fn clone(&self) -> _XIMStatusDrawCallbackStruct {
                    {
                        let _: ::core::clone::AssertParamIsClone<XIMStatusDataType>;
                        let _: ::core::clone::AssertParamIsClone<
                            _XIMStatusDrawCallbackStruct__bindgen_ty_1,
                        >;
                        *self
                    }
                }
            }
            #[repr(C)]
            pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                pub text: *mut XIMText,
                pub bitmap: Pixmap,
                _bindgen_union_align: u64,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMStatusDrawCallbackStruct__bindgen_ty_1 {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                #[inline]
                fn clone(&self) -> _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
                    {
                        let _: ::core::clone::AssertParamIsCopy<Self>;
                        *self
                    }
                }
            }
            pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;
            #[repr(C)]
            pub struct _XIMHotKeyTrigger {
                pub keysym: KeySym,
                pub modifier: ::std::os::raw::c_int,
                pub modifier_mask: ::std::os::raw::c_int,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMHotKeyTrigger {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMHotKeyTrigger {
                            keysym: ref __self_0_0,
                            modifier: ref __self_0_1,
                            modifier_mask: ref __self_0_2,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIMHotKeyTrigger");
                            let _ = debug_trait_builder.field("keysym", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("modifier", &&(*__self_0_1));
                            let _ = debug_trait_builder.field("modifier_mask", &&(*__self_0_2));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMHotKeyTrigger {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMHotKeyTrigger {
                #[inline]
                fn clone(&self) -> _XIMHotKeyTrigger {
                    {
                        let _: ::core::clone::AssertParamIsClone<KeySym>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        *self
                    }
                }
            }
            pub type XIMHotKeyTrigger = _XIMHotKeyTrigger;
            #[repr(C)]
            pub struct _XIMHotKeyTriggers {
                pub num_hot_key: ::std::os::raw::c_int,
                pub key: *mut XIMHotKeyTrigger,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for _XIMHotKeyTriggers {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        _XIMHotKeyTriggers {
                            num_hot_key: ref __self_0_0,
                            key: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("_XIMHotKeyTriggers");
                            let _ = debug_trait_builder.field("num_hot_key", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("key", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for _XIMHotKeyTriggers {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for _XIMHotKeyTriggers {
                #[inline]
                fn clone(&self) -> _XIMHotKeyTriggers {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_int>;
                        let _: ::core::clone::AssertParamIsClone<*mut XIMHotKeyTrigger>;
                        *self
                    }
                }
            }
            pub type XIMHotKeyTriggers = _XIMHotKeyTriggers;
            pub type XIMHotKeyState = ::std::os::raw::c_ulong;
            #[repr(C)]
            pub struct XIMValuesList {
                pub count_values: ::std::os::raw::c_ushort,
                pub supported_values: *mut *mut ::std::os::raw::c_char,
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for XIMValuesList {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        XIMValuesList {
                            count_values: ref __self_0_0,
                            supported_values: ref __self_0_1,
                        } => {
                            let mut debug_trait_builder = f.debug_struct("XIMValuesList");
                            let _ = debug_trait_builder.field("count_values", &&(*__self_0_0));
                            let _ = debug_trait_builder.field("supported_values", &&(*__self_0_1));
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for XIMValuesList {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for XIMValuesList {
                #[inline]
                fn clone(&self) -> XIMValuesList {
                    {
                        let _: ::core::clone::AssertParamIsClone<::std::os::raw::c_ushort>;
                        let _: ::core::clone::AssertParamIsClone<*mut *mut ::std::os::raw::c_char>;
                        *self
                    }
                }
            }
            extern "C" {
                pub static mut _Xdebug: ::std::os::raw::c_int;
            }
            pub type XErrorHandler = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut Display,
                    arg2: *mut XErrorEvent,
                ) -> ::std::os::raw::c_int,
            >;
            pub type XIOErrorHandler = ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
            >;
            pub type XConnectionWatchProc = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut Display,
                    arg2: XPointer,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: *mut XPointer,
                ),
            >;
        }
    }
    pub mod fontconfig {
        #![allow(non_upper_case_globals)]
        #![allow(non_camel_case_types)]
        #![allow(non_snake_case)]
        use super::raw::main;
        pub const FcTrue: main::FcBool = main::FcTrue as main::FcBool;
        pub const FcFalse: main::FcBool = main::FcFalse as main::FcBool;
        pub const FC_SCALABLE: *const i8 = main::FC_SCALABLE.as_ptr() as *const i8;
        pub const FC_CHARSET: *const i8 = main::FC_CHARSET.as_ptr() as *const i8;
        pub const FC_COLOR: *const i8 = main::FC_COLOR.as_ptr() as *const i8;
    }
    pub mod xlib {
        #![allow(non_upper_case_globals)]
        #![allow(non_camel_case_types)]
        #![allow(non_snake_case)]
        use super::raw::xlib;
        pub use xlib::{XNInputStyle, XNClientWindow, XNFocusWindow};
    }
}
mod item {
    use libc::c_int;
    use regex::{Regex, RegexBuilder};
    use crate::drw::{Drw, TextOption::*};
    use crate::config::Schemes::*;
    pub enum MatchCode {
        Exact,
        Prefix,
        Substring,
        None,
    }
    pub enum Direction {
        Vertical,
        Horizontal,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Direction {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&Direction::Vertical,) => {
                    let mut debug_trait_builder = f.debug_tuple("Vertical");
                    debug_trait_builder.finish()
                }
                (&Direction::Horizontal,) => {
                    let mut debug_trait_builder = f.debug_tuple("Horizontal");
                    debug_trait_builder.finish()
                }
            }
        }
    }
    pub use Direction::*;
    pub struct Item {
        pub text: String,
        pub out: bool,
        pub width: c_int,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Item {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Item {
                    text: ref __self_0_0,
                    out: ref __self_0_1,
                    width: ref __self_0_2,
                } => {
                    let mut debug_trait_builder = f.debug_struct("Item");
                    let _ = debug_trait_builder.field("text", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("out", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("width", &&(*__self_0_2));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl Item {
        pub fn new(text: String, out: bool, drw: &mut Drw) -> Result<Self, String> {
            Ok(Self {
                out,
                width: match drw.textw(Other(&text)) {
                    Ok(w) => w,
                    Err(err) => return Err(err),
                },
                text,
            })
        }
        pub fn draw(&self, x: c_int, y: c_int, w: c_int, drw: &mut Drw) -> Result<c_int, String> {
            drw.text(
                x,
                y,
                w as u32,
                drw.pseudo_globals.bh as u32,
                drw.pseudo_globals.lrpad as u32 / 2,
                Other(&self.text),
                false,
            )
        }
        pub fn matches(&self, re: &Regex) -> MatchCode {
            match re
                .find_iter(&self.text)
                .nth(0)
                .map(|m| (m.start(), m.end()))
                .unwrap_or((1, 0))
            {
                (1, 0) => MatchCode::None,
                (0, end) => {
                    if end == self.text.len() {
                        MatchCode::Exact
                    } else {
                        MatchCode::Prefix
                    }
                }
                _ => MatchCode::Substring,
            }
        }
    }
    pub struct Items {
        pub data: Vec<Item>,
        pub data_matches: Vec<Vec<*const Item>>,
        pub curr: usize,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Items {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Items {
                    data: ref __self_0_0,
                    data_matches: ref __self_0_1,
                    curr: ref __self_0_2,
                } => {
                    let mut debug_trait_builder = f.debug_struct("Items");
                    let _ = debug_trait_builder.field("data", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("data_matches", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("curr", &&(*__self_0_2));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl Items {
        pub fn new(data: Vec<Item>) -> Self {
            Self {
                data,
                data_matches: Vec::new(),
                curr: 0,
            }
        }
        pub fn match_len(&self) -> usize {
            self.data_matches.len()
        }
        pub fn draw(drw: &mut Drw, direction: Direction) -> Result<(), String> {
            unsafe {
                if drw.items.as_mut().unwrap().data_matches.len() == 0 {
                    return Ok(());
                }
                let rangle = ">".to_string();
                let rangle_width = match drw.textw(Other(&rangle)) {
                    Ok(w) => w,
                    Err(err) => return Err(err),
                };
                let langle = "<".to_string();
                let langle_width = match drw.textw(Other(&langle)) {
                    Ok(w) => w,
                    Err(err) => return Err(err),
                };
                let mut coord = match direction {
                    Horizontal => drw.pseudo_globals.promptw + drw.pseudo_globals.inputw,
                    Vertical => drw.pseudo_globals.bh,
                };
                let (partition_i, partition) = {
                    let mut partition_i = drw.items.as_mut().unwrap().curr;
                    let mut partition = 0;
                    for p in &drw.items.as_mut().unwrap().data_matches {
                        if partition_i >= p.len() {
                            partition_i -= p.len();
                            partition += 1;
                        } else {
                            break;
                        }
                    }
                    (partition_i, partition)
                };
                if let Horizontal = direction {
                    if partition > 0 {
                        drw.setscheme(SchemeNorm);
                        match drw.text(
                            coord,
                            0,
                            langle_width as u32,
                            drw.pseudo_globals.bh as u32,
                            drw.pseudo_globals.lrpad as u32 / 2,
                            Other(&langle),
                            false,
                        ) {
                            Ok(computed_width) => coord = computed_width,
                            Err(err) => return Err(err),
                        }
                    } else {
                        coord += langle_width;
                    }
                }
                for index in 0..drw.items.as_mut().unwrap().data_matches[partition].len() {
                    if index == partition_i {
                        drw.setscheme(SchemeSel);
                    } else if (*drw.items.as_mut().unwrap().data_matches[partition][index]).out {
                        drw.setscheme(SchemeOut);
                    } else {
                        drw.setscheme(SchemeNorm);
                    }
                    match direction {
                        Horizontal => {
                            match (*drw.items.as_mut().unwrap().data_matches[partition][index])
                                .draw(
                                    coord,
                                    0,
                                    (*drw.items.as_mut().unwrap().data_matches[partition][index])
                                        .width
                                        .min(drw.w - coord - rangle_width),
                                    drw,
                                ) {
                                Ok(computed_width) => coord = computed_width,
                                Err(err) => return Err(err),
                            }
                            if partition + 1 < drw.items.as_mut().unwrap().data_matches.len() {
                                drw.setscheme(SchemeNorm);
                                if let Err(err) = drw.text(
                                    drw.w - rangle_width,
                                    0,
                                    rangle_width as u32,
                                    drw.pseudo_globals.bh as u32,
                                    drw.pseudo_globals.lrpad as u32 / 2,
                                    Other(&rangle),
                                    false,
                                ) {
                                    return Err(err);
                                }
                            }
                        }
                        Vertical => {
                            match (*drw.items.as_mut().unwrap().data_matches[partition][index])
                                .draw(0, coord, drw.w, drw)
                            {
                                Ok(_) => coord += drw.pseudo_globals.bh,
                                Err(err) => return Err(err),
                            }
                        }
                    }
                }
            }
            Ok(())
        }
        pub fn gen_matches(drw: &mut Drw, direction: Direction) -> Result<(), String> {
            unsafe {
                drw.items.as_mut().unwrap().data_matches.clear();
                let re = match RegexBuilder::new(&regex::escape(&drw.input))
                    .case_insensitive(!drw.config.case_sensitive)
                    .build()
                {
                    Ok(re) => re,
                    Err(_) => {
                        return Err({
                            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                &["Could not build regex"],
                                &match () {
                                    () => [],
                                },
                            ));
                            res
                        })
                    }
                };
                let mut exact: Vec<*const Item> = Vec::new();
                let mut prefix: Vec<*const Item> = Vec::new();
                let mut substring: Vec<*const Item> = Vec::new();
                for item in &drw.items.as_mut().unwrap().data {
                    match item.matches(&re) {
                        MatchCode::Exact => exact.push(item),
                        MatchCode::Prefix => prefix.push(item),
                        MatchCode::Substring => substring.push(item),
                        MatchCode::None => {}
                    }
                }
                drw.items
                    .as_mut()
                    .unwrap()
                    .data_matches
                    .reserve(prefix.len() + substring.len());
                for item in prefix {
                    exact.push(item);
                }
                for item in substring {
                    exact.push(item);
                }
                match direction {
                    Horizontal => {
                        let mut partition = Vec::new();
                        let rangle_width = match drw.textw(Other(&">".to_string())) {
                            Ok(w) => w,
                            Err(err) => return Err(err),
                        };
                        let langle_width = match drw.textw(Other(&"<".to_string())) {
                            Ok(w) => w,
                            Err(err) => return Err(err),
                        };
                        let mut x =
                            drw.pseudo_globals.promptw + drw.pseudo_globals.inputw + langle_width;
                        for i in 0..exact.len() {
                            x += (*exact[i]).width;
                            if x > {
                                if i == exact.len() - 1 {
                                    drw.w
                                } else {
                                    drw.w - rangle_width
                                }
                            } {
                                drw.items.as_mut().unwrap().data_matches.push(partition);
                                partition = Vec::new();
                                x = drw.pseudo_globals.promptw
                                    + drw.pseudo_globals.inputw
                                    + langle_width
                                    + (*exact[i]).width;
                            }
                            partition.push(exact[i]);
                        }
                        if partition.len() > 0 {
                            drw.items.as_mut().unwrap().data_matches.push(partition);
                        }
                    }
                    Vertical => {
                        drw.items.as_mut().unwrap().data_matches = exact
                            .chunks(drw.config.lines as usize)
                            .map(|p| p.into_iter().map(|el| el.clone()).collect())
                            .collect();
                    }
                }
            }
            Ok(())
        }
    }
}
mod fnt {
    use x11::xlib::{Display};
    use x11::xft::{
        XftFontClose, FcPattern, XftFontOpenPattern, XftNameParse, XftFontOpenName, XftFont,
    };
    use fontconfig::fontconfig::{FcPatternDestroy, FcResultMatch, FcPatternGetBool, FcBool};
    use crate::additional_bindings::fontconfig::FC_COLOR;
    use std::ptr;
    use std::ffi::{CStr, c_void};
    use libc::{c_uint, c_char};
    use std::mem::MaybeUninit;
    use crate::drw::Drw;
    pub struct Fnt {
        pub xfont: *mut XftFont,
        pub pattern_pointer: *mut FcPattern,
        pub height: c_uint,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for Fnt {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                Fnt {
                    xfont: ref __self_0_0,
                    pattern_pointer: ref __self_0_1,
                    height: ref __self_0_2,
                } => {
                    let mut debug_trait_builder = f.debug_struct("Fnt");
                    let _ = debug_trait_builder.field("xfont", &&(*__self_0_0));
                    let _ = debug_trait_builder.field("pattern_pointer", &&(*__self_0_1));
                    let _ = debug_trait_builder.field("height", &&(*__self_0_2));
                    debug_trait_builder.finish()
                }
            }
        }
    }
    impl PartialEq for Fnt {
        fn eq(&self, other: &Self) -> bool {
            self.xfont == other.xfont
        }
    }
    impl Fnt {
        pub fn new(drw: &Drw, fontname: *mut c_char, mut pattern: *mut FcPattern) -> Option<Self> {
            unsafe {
                let xfont;
                if fontname != ptr::null_mut() {
                    xfont = XftFontOpenName(drw.dpy, drw.screen, fontname);
                    if xfont == ptr::null_mut() {
                        {
                            ::std::io::_eprint(::core::fmt::Arguments::new_v1(
                                &["error, cannot load font from name: \'%s\'\n\n"],
                                &match () {
                                    () => [],
                                },
                            ));
                        };
                        return None;
                    }
                    pattern = XftNameParse(fontname);
                    if pattern == ptr::null_mut() {
                        let c_str: &CStr = CStr::from_ptr(fontname);
                        let str_slice: &str = c_str.to_str().unwrap();
                        {
                            ::std::io::_eprint(::core::fmt::Arguments::new_v1(
                                &["error, cannot parse font name to pattern: \'", "\'\n"],
                                &match (&str_slice,) {
                                    (arg0,) => [::core::fmt::ArgumentV1::new(
                                        arg0,
                                        ::core::fmt::Display::fmt,
                                    )],
                                },
                            ));
                        };
                        XftFontClose(drw.dpy, xfont);
                        return None;
                    }
                } else if pattern != ptr::null_mut() {
                    xfont = XftFontOpenPattern(drw.dpy, pattern);
                    if xfont == ptr::null_mut() {
                        {
                            ::std::io::_eprint(::core::fmt::Arguments::new_v1(
                                &["error, cannot load font from pattern.\n"],
                                &match () {
                                    () => [],
                                },
                            ));
                        };
                        return None;
                    }
                } else {
                    {
                        ::std::io::_eprint(::core::fmt::Arguments::new_v1(
                            &["No font specified.\n"],
                            &match () {
                                () => [],
                            },
                        ));
                    };
                    return None;
                }
                let mut iscol: FcBool = MaybeUninit::uninit().assume_init();
                if FcPatternGetBool(pattern as *mut c_void, FC_COLOR, 0, &mut iscol)
                    == FcResultMatch
                    && iscol != 0
                {
                    XftFontClose(drw.dpy, xfont);
                    return None;
                }
                let height = (*xfont).ascent + (*xfont).descent;
                return Some(Self {
                    xfont,
                    pattern_pointer: pattern,
                    height: height as c_uint,
                });
            }
        }
        pub fn free(&mut self, dpy: *mut Display) {
            unsafe {
                if self.pattern_pointer != ptr::null_mut() {
                    FcPatternDestroy(self.pattern_pointer as *mut c_void);
                }
                XftFontClose(dpy, self.xfont);
            }
        }
    }
}
mod init {
    use x11::xlib::{
        XCreateGC, XCreatePixmap, XSetLineAttributes, XDefaultDepth, XDefaultColormap,
        XDefaultVisual, JoinMiter, CapButt, LineSolid, XWindowAttributes, Window, Display,
    };
    use x11::xft::{XftColorAllocName, XftColor};
    use libc::{c_char, c_int, isatty};
    use std::{mem::MaybeUninit, ffi::CStr, ptr};
    use crate::drw::Drw;
    use crate::config::{Config, Schemes::*};
    use crate::item::Items;
    use crate::util::*;
    use crate::globals::*;
    use crate::fnt::*;
    impl Drw {
        pub fn new(
            dpy: *mut Display,
            screen: c_int,
            root: Window,
            wa: XWindowAttributes,
            pseudo_globals: PseudoGlobals,
            config: Config,
        ) -> Result<Self, String> {
            unsafe {
                let drawable = XCreatePixmap(
                    dpy,
                    root,
                    wa.width as u32,
                    wa.height as u32,
                    XDefaultDepth(dpy, screen) as u32,
                );
                let gc = XCreateGC(dpy, root, 0, ptr::null_mut());
                XSetLineAttributes(dpy, gc, 1, LineSolid, CapButt, JoinMiter);
                let mut ret = Self {
                    wa,
                    dpy,
                    screen,
                    root,
                    drawable,
                    gc,
                    fonts: Vec::new(),
                    pseudo_globals,
                    config,
                    scheme: MaybeUninit::uninit().assume_init(),
                    w: MaybeUninit::uninit().assume_init(),
                    h: MaybeUninit::uninit().assume_init(),
                    input: "".to_string(),
                    items: None,
                };
                if let Err(err) =
                    ret.fontset_create(<[_]>::into_vec(box [
                        ret.config.default_font.as_ptr() as *mut i8
                    ]))
                {
                    return Err(err);
                }
                ret.pseudo_globals.lrpad = ret.fonts[0].height as i32;
                ret.items = Some(Items::new(if ret.config.fast && isatty(0) == 0 {
                    if let Err(err) = grabkeyboard(ret.dpy, ret.config.embed) {
                        return Err(err);
                    }
                    match readstdin(&mut ret) {
                        Ok(items) => items,
                        Err(err) => return Err(err),
                    }
                } else {
                    let tmp = match readstdin(&mut ret) {
                        Ok(items) => items,
                        Err(err) => return Err(err),
                    };
                    if let Err(err) = grabkeyboard(ret.dpy, ret.config.embed) {
                        return Err(err);
                    }
                    tmp
                }));
                for j in 0..SchemeLast as usize {
                    match ret.scm_create(ret.config.colors[j]) {
                        Ok(scheme) => ret.pseudo_globals.schemeset[j] = scheme,
                        Err(err) => return Err(err),
                    }
                }
                ret.config.lines = ret
                    .config
                    .lines
                    .min(ret.items.as_mut().unwrap().data.len() as u32);
                Ok(ret)
            }
        }
        fn scm_create(&self, clrnames: [[u8; 8]; 2]) -> Result<[*mut XftColor; 2], String> {
            let ret: [*mut XftColor; 2] = unsafe {
                [
                    Box::into_raw(Box::new(MaybeUninit::uninit().assume_init())),
                    Box::into_raw(Box::new(MaybeUninit::uninit().assume_init())),
                ]
            };
            if let Err(err) = self.clr_create(ret[0], clrnames[0].as_ptr() as *const c_char) {
                return Err(err);
            };
            if let Err(err) = self.clr_create(ret[1], clrnames[1].as_ptr() as *const c_char) {
                return Err(err);
            };
            Ok(ret)
        }
        fn clr_create(&self, dest: *mut XftColor, clrname: *const c_char) -> Result<(), String> {
            unsafe {
                if XftColorAllocName(
                    self.dpy,
                    XDefaultVisual(self.dpy, self.screen),
                    XDefaultColormap(self.dpy, self.screen),
                    clrname,
                    dest,
                ) == 0
                {
                    Err({
                        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                            &["error, cannot allocate color "],
                            &match (&CStr::from_ptr(clrname),) {
                                (arg0,) => {
                                    [::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Debug::fmt)]
                                }
                            },
                        ));
                        res
                    })
                } else {
                    Ok(())
                }
            }
        }
        fn fontset_create(&mut self, fonts: Vec<*mut c_char>) -> Result<(), String> {
            for font in fonts.into_iter().rev() {
                let to_push = Fnt::new(self, font, ptr::null_mut());
                if to_push.is_some() {
                    self.fonts.push(to_push.unwrap());
                } else {
                    return Err({
                        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                            &["Could not load font from string"],
                            &match () {
                                () => [],
                            },
                        ));
                        res
                    });
                }
            }
            Ok(())
        }
    }
}
mod setup {
    use x11::xinerama::{XineramaQueryScreens, XineramaScreenInfo};
    use x11::xlib::{
        Window, XGetInputFocus, PointerRoot, XFree, XQueryTree, XQueryPointer,
        XGetWindowAttributes, XClassHint, XSetClassHint, CWEventMask, CWBackPixel,
        CWOverrideRedirect, XCreateWindow, VisibilityChangeMask, KeyPressMask, ExposureMask,
        XSetWindowAttributes, XOpenIM, XIMStatusNothing, XIMPreeditNothing, XCreateIC, XMapRaised,
        FocusChangeMask, XSelectInput, SubstructureNotifyMask,
    };
    use std::ptr;
    use std::mem::MaybeUninit;
    use libc::{c_char, c_int, c_uint, c_void};
    use crate::additional_bindings::xlib::{XNFocusWindow, XNClientWindow, XNInputStyle};
    use crate::util::grabfocus;
    use crate::config::{Schemes::*, Clrs::*};
    use crate::drw::{Drw, TextOption::*};
    #[inline]
    fn intersect(x: c_int, y: c_int, w: c_int, h: c_int, r: *mut XineramaScreenInfo) -> c_int {
        unsafe {
            0.max((x + w).min(((*r).x_org + (*r).width) as c_int) - x.max((*r).x_org as c_int))
                * 0.max(
                    (y + h).min(((*r).y_org + (*r).height) as c_int) - y.max((*r).y_org as c_int),
                )
        }
    }
    impl Drw {
        pub fn setup(&mut self, parentwin: u64, root: u64) -> Result<(), String> {
            unsafe {
                let mut x: c_int = MaybeUninit::uninit().assume_init();
                let mut y: c_int = MaybeUninit::uninit().assume_init();
                let mut ch: XClassHint = XClassHint {
                    res_name: (*b"dmenu\0").as_ptr() as *mut c_char,
                    res_class: (*b"dmenu\0").as_ptr() as *mut c_char,
                };
                self.pseudo_globals.bh = self.fonts[0].height as c_int + 2;
                self.h = (self.config.lines + 1) as i32 * self.pseudo_globals.bh;
                let mut dws: *mut Window = MaybeUninit::uninit().assume_init();
                let mut w: Window = MaybeUninit::uninit().assume_init();
                let mut dw: Window = MaybeUninit::uninit().assume_init();
                let mut du: c_uint = MaybeUninit::uninit().assume_init();
                let mut n: c_int = MaybeUninit::uninit().assume_init();
                let info = if true && parentwin == root {
                    XineramaQueryScreens(self.dpy, &mut n)
                } else {
                    ptr::null_mut()
                };
                if true && info != ptr::null_mut() {
                    let mut i = 0;
                    let mut area = 0;
                    let mut di: c_int = MaybeUninit::uninit().assume_init();
                    let mut a;
                    let mut pw;
                    XGetInputFocus(self.dpy, &mut w, &mut di);
                    if self.config.mon >= 0 && self.config.mon < n {
                        i = self.config.mon;
                    } else if w != root && w != PointerRoot as u64 && w != 0 {
                        while {
                            pw = w;
                            if XQueryTree(self.dpy, pw, &mut dw, &mut w, &mut dws, &mut du) != 0
                                && dws != ptr::null_mut()
                            {
                                XFree(dws as *mut c_void);
                            }
                            w != root && w != pw
                        } {}
                        if XGetWindowAttributes(self.dpy, pw, &mut self.wa) != 0 {
                            for j in 0..n {
                                a = intersect(
                                    self.wa.x,
                                    self.wa.y,
                                    self.wa.width,
                                    self.wa.height,
                                    info.offset(j as isize),
                                );
                                if a > area {
                                    area = a;
                                    i = j;
                                }
                            }
                        }
                    }
                    if self.config.mon < 0
                        && area == 0
                        && XQueryPointer(
                            self.dpy, root, &mut dw, &mut dw, &mut x, &mut y, &mut di, &mut di,
                            &mut du,
                        ) != 0
                    {
                        for i in 0..n {
                            if intersect(x, y, 1, 1, info.offset(i as isize)) != 0 {
                                break;
                            }
                        }
                    }
                    x = (*info.offset(i as isize)).x_org as c_int;
                    y = (*info.offset(i as isize)).y_org as c_int
                        + (if self.config.topbar {
                            0
                        } else {
                            (*info.offset(i as isize)).height as c_int - self.h as c_int
                        });
                    self.w = (*info.offset(i as isize)).width as c_int;
                    XFree(info as *mut c_void);
                } else {
                    if XGetWindowAttributes(self.dpy, parentwin, &mut self.wa) == 0 {
                        return Err({
                            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                &["could not get embedding window attributes: 0x"],
                                &match (&parentwin,) {
                                    (arg0,) => [::core::fmt::ArgumentV1::new(
                                        arg0,
                                        ::core::fmt::Debug::fmt,
                                    )],
                                },
                            ));
                            res
                        });
                    }
                    x = 0;
                    y = if self.config.topbar {
                        0
                    } else {
                        self.wa.height - self.h as c_int
                    };
                    self.w = self.wa.width;
                }
                self.pseudo_globals.promptw = if self.config.prompt.len() != 0 {
                    match self.textw(Prompt) {
                        Ok(computed_width) => computed_width - self.pseudo_globals.lrpad / 4,
                        Err(err) => return Err(err),
                    }
                } else {
                    0
                };
                self.pseudo_globals.inputw = self.pseudo_globals.inputw.min(self.w / 3);
                let mut swa: XSetWindowAttributes = MaybeUninit::uninit().assume_init();
                swa.override_redirect = true as i32;
                swa.background_pixel =
                    (*self.pseudo_globals.schemeset[SchemeNorm as usize][ColBg as usize]).pixel;
                swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
                self.pseudo_globals.win = XCreateWindow(
                    self.dpy,
                    parentwin,
                    x,
                    y,
                    self.w as u32,
                    self.h as u32,
                    0,
                    0,
                    0,
                    ptr::null_mut(),
                    CWOverrideRedirect | CWBackPixel | CWEventMask,
                    &mut swa,
                );
                XSetClassHint(self.dpy, self.pseudo_globals.win, &mut ch);
                let xim = XOpenIM(self.dpy, ptr::null_mut(), ptr::null_mut(), ptr::null_mut());
                if xim == ptr::null_mut() {
                    return Err({
                        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                            &["XOpenIM failed: could not open input device"],
                            &match () {
                                () => [],
                            },
                        ));
                        res
                    });
                }
                self.pseudo_globals.xic = XCreateIC(
                    xim,
                    XNInputStyle,
                    XIMPreeditNothing | XIMStatusNothing,
                    XNClientWindow,
                    self.pseudo_globals.win,
                    XNFocusWindow,
                    self.pseudo_globals.win,
                    ptr::null_mut::<c_void>(),
                );
                XMapRaised(self.dpy, self.pseudo_globals.win);
                if self.config.embed != 0 {
                    XSelectInput(
                        self.dpy,
                        parentwin,
                        FocusChangeMask | SubstructureNotifyMask,
                    );
                    if XQueryTree(self.dpy, parentwin, &mut dw, &mut w, &mut dws, &mut du) != 0
                        && dws != ptr::null_mut()
                    {
                        for i in 0..du {
                            if *dws.offset(i as isize) == self.pseudo_globals.win {
                                break;
                            }
                            XSelectInput(self.dpy, *dws.offset(i as isize), FocusChangeMask);
                        }
                        XFree(dws as *mut c_void);
                    }
                    if let Err(err) = grabfocus(self) {
                        return Err(err);
                    }
                }
                self.draw()
            }
        }
    }
}
mod run {
    use x11::xlib::{
        XRaiseWindow, XmbLookupString, VisibilityUnobscured, VisibilityNotify, SelectionNotify,
        DestroyNotify, FocusIn, Expose, False, XInternAtom, XEvent, XKeyEvent, XFilterEvent,
        XNextEvent, KeySym, KeyPress, Mod1Mask, ControlMask, ShiftMask, XLookupChars,
        XLookupKeySym, XLookupBoth,
    };
    use libc::{iscntrl, c_char};
    use std::mem::MaybeUninit;
    use clipboard::{ClipboardProvider, ClipboardContext};
    use regex::Regex;
    use crate::util::grabfocus;
    use crate::drw::Drw;
    #[allow(non_upper_case_globals)]
    impl Drw {
        pub fn run(&mut self) -> Result<(), String> {
            unsafe {
                let utf8 = XInternAtom(self.dpy, "UTF8_STRING\0".as_ptr() as *mut c_char, False);
                let mut ev: XEvent = MaybeUninit::uninit().assume_init();
                while XNextEvent(self.dpy, &mut ev) == 0 {
                    if XFilterEvent(&mut ev, self.pseudo_globals.win) != 0 {
                        continue;
                    }
                    match ev.type_ {
                        DestroyNotify => {
                            if ev.destroy_window.window != self.pseudo_globals.win {
                                break;
                            }
                        }
                        Expose => {
                            if ev.expose.count == 0 {
                                self.map(self.pseudo_globals.win, 0, 0, self.w, self.h);
                            }
                        }
                        FocusIn => {
                            if let Err(err) = grabfocus(self) {
                                return Err(err);
                            }
                        }
                        KeyPress => match self.keypress(ev.key) {
                            Ok(true) => break,
                            Ok(false) => {}
                            Err(err) => return Err(err),
                        },
                        SelectionNotify => {
                            if ev.selection.property == utf8 {
                                if let Err(err) = self.paste() {
                                    return Err(err);
                                }
                            }
                        }
                        VisibilityNotify => {
                            if ev.visibility.state != VisibilityUnobscured {
                                XRaiseWindow(self.dpy, self.pseudo_globals.win);
                            }
                        }
                        _ => {}
                    }
                }
            }
            Ok(())
        }
        fn keypress(&mut self, mut ev: XKeyEvent) -> Result<bool, String> {
            use x11::keysym::*;
            unsafe {
                let buf: [u8; 32] = [0; 32];
                let mut __ksym: KeySym = MaybeUninit::uninit().assume_init();
                let mut status = MaybeUninit::uninit().assume_init();
                let len = XmbLookupString(
                    self.pseudo_globals.xic,
                    &mut ev,
                    buf.as_ptr() as *mut i8,
                    buf.len() as i32,
                    &mut __ksym,
                    &mut status,
                );
                let mut ksym = __ksym as u32;
                match status {
                    XLookupChars => {
                        if iscntrl(*(buf.as_ptr() as *mut i32)) == 0 {
                            if let Err(err) = self.keyprocess(ksym, buf, len, ev.state) {
                                return Err(err);
                            }
                        }
                    }
                    XLookupKeySym | XLookupBoth => {}
                    _ => return Ok(false),
                }
                const control: bool = true;
                const mod1: bool = false;
                if (ev.state & ControlMask) != 0 || (ev.state & Mod1Mask) != 0 {
                    match (ksym, (ev.state & ControlMask) != 0) {
                        (XK_a, control) | (XK_g, mod1) => ksym = XK_Home,
                        (XK_b, control) => ksym = XK_Left,
                        (XK_c, control) => ksym = XK_Escape,
                        (XK_d, control) => ksym = XK_Delete,
                        (XK_e, control) | (XK_G, mod1) => ksym = XK_End,
                        (XK_f, control) => ksym = XK_Right,
                        (XK_g, control) | (XK_bracketleft, control) => ksym = XK_Escape,
                        (XK_h, control) => ksym = XK_BackSpace,
                        (XK_i, control) => ksym = XK_Tab,
                        (XK_j, mod1) => ksym = XK_Next,
                        (XK_k, mod1) => ksym = XK_Prior,
                        (XK_n, control) | (XK_l, mod1) => ksym = XK_Down,
                        (XK_p, control) | (XK_h, mod1) => ksym = XK_Up,
                        (XK_j, control) | (XK_J, control) | (XK_m, control) | (XK_M, control) => {
                            ksym = XK_Return;
                            ev.state &= !ControlMask;
                        }
                        (XK_k, control) => {
                            self.input = self
                                .input
                                .chars()
                                .take(self.pseudo_globals.cursor)
                                .collect();
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_u, control) => {
                            self.input = self
                                .input
                                .chars()
                                .skip(self.pseudo_globals.cursor)
                                .collect();
                            self.pseudo_globals.cursor = 0;
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_w, control) | (XK_BackSpace, control) => {
                            let mut state = 0;
                            let mut found = 0;
                            self.input = self
                                .input
                                .char_indices()
                                .rev()
                                .filter_map(|(i, c)| {
                                    if state == 0 && i < self.pseudo_globals.cursor {
                                        state = 1;
                                    }
                                    if state == 1 && c != ' ' {
                                        state = 2;
                                    }
                                    if state == 2 && c == ' ' {
                                        state = 3;
                                    }
                                    if state == 0 || state == 4 {
                                        Some(c)
                                    } else if state == 3 {
                                        found = i + 1;
                                        state = 4;
                                        Some(c)
                                    } else {
                                        None
                                    }
                                })
                                .collect::<Vec<char>>()
                                .into_iter()
                                .rev()
                                .collect();
                            self.pseudo_globals.cursor = found;
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_Delete, control) => {
                            let mut state = 0;
                            self.input = self
                                .input
                                .char_indices()
                                .filter_map(|(i, c)| {
                                    if state == 0 && i >= self.pseudo_globals.cursor {
                                        state = 1;
                                    }
                                    if state == 1 && c != ' ' {
                                        state = 2;
                                    }
                                    if state == 2 && c == ' ' {
                                        state = 3;
                                    }
                                    if state == 0 || state == 4 {
                                        Some(c)
                                    } else if state == 3 {
                                        state = 4;
                                        Some(c)
                                    } else {
                                        None
                                    }
                                })
                                .collect();
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_y, control) | (XK_Y, control) => {
                            return match self.paste() {
                                Ok(_) => Ok(false),
                                Err(err) => Err(err),
                            }
                        }
                        (XK_Left, control) | (XK_b, mod1) => {
                            self.pseudo_globals.cursor = self
                                .input
                                .char_indices()
                                .rev()
                                .skip(self.input.len() - self.pseudo_globals.cursor)
                                .skip_while(|(_, c)| *c == ' ')
                                .skip_while(|(_, c)| *c != ' ')
                                .next()
                                .map(|(i, _)| i + 1)
                                .unwrap_or(0);
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_Right, control) | (XK_f, mod1) => {
                            self.pseudo_globals.cursor = self
                                .input
                                .char_indices()
                                .skip(self.pseudo_globals.cursor + 1)
                                .skip_while(|(_, c)| *c == ' ')
                                .skip_while(|(_, c)| *c != ' ')
                                .next()
                                .map(|(i, _)| i)
                                .unwrap_or(self.input.len());
                            return match self.draw() {
                                Ok(_) => Ok(true),
                                Err(err) => Err(err),
                            };
                        }
                        (XK_Return, control) | (XK_KP_Enter, control) => {}
                        _ => return Ok(false),
                    }
                }
                self.keyprocess(ksym, buf, len, ev.state)
            }
        }
        fn keyprocess(
            &mut self,
            ksym: u32,
            buf: [u8; 32],
            len: i32,
            state: u32,
        ) -> Result<bool, String> {
            use x11::keysym::*;
            unsafe {
                match ksym {
                    XK_Escape => return Err("".to_string()),
                    XK_Return | XK_KP_Enter => {
                        if (state & ShiftMask) == 0
                            && self.items.as_mut().unwrap().data_matches.len() > 0
                        {
                            let (partition_i, partition) = {
                                let mut partition_i = self.items.as_mut().unwrap().curr;
                                let mut partition = 0;
                                for p in &self.items.as_mut().unwrap().data_matches {
                                    if partition_i >= p.len() {
                                        partition_i -= p.len();
                                        partition += 1;
                                    } else {
                                        break;
                                    }
                                }
                                (partition_i, partition)
                            };
                            {
                                ::std::io::_print(::core::fmt::Arguments::new_v1(
                                    &["", "\n"],
                                    &match (&(*self.items.as_mut().unwrap().data_matches
                                        [partition][partition_i])
                                        .text,)
                                    {
                                        (arg0,) => [::core::fmt::ArgumentV1::new(
                                            arg0,
                                            ::core::fmt::Display::fmt,
                                        )],
                                    },
                                ));
                            };
                        } else {
                            {
                                ::std::io::_print(::core::fmt::Arguments::new_v1(
                                    &["", "\n"],
                                    &match (&self.input,) {
                                        (arg0,) => [::core::fmt::ArgumentV1::new(
                                            arg0,
                                            ::core::fmt::Display::fmt,
                                        )],
                                    },
                                ));
                            };
                        }
                        return Ok((state & ControlMask) == 0);
                    }
                    XK_Tab => {
                        if self.items.as_mut().unwrap().data_matches.len() > 0 {
                            let (partition_i, partition) = {
                                let mut partition_i = self.items.as_mut().unwrap().curr;
                                let mut partition = 0;
                                for p in &self.items.as_mut().unwrap().data_matches {
                                    if partition_i >= p.len() {
                                        partition_i -= p.len();
                                        partition += 1;
                                    } else {
                                        break;
                                    }
                                }
                                (partition_i, partition)
                            };
                            self.input = (*self.items.as_mut().unwrap().data_matches[partition]
                                [partition_i])
                                .text
                                .clone();
                            self.pseudo_globals.cursor = self.input.len();
                            self.items.as_mut().unwrap().curr = 0;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Home => {
                        if self.items.as_mut().unwrap().data_matches.len() > 0 {
                            self.items.as_mut().unwrap().curr = 0;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_End => {
                        if self.items.as_mut().unwrap().data_matches.len() > 0 {
                            self.items.as_mut().unwrap().curr = self
                                .items
                                .as_mut()
                                .unwrap()
                                .data_matches
                                .iter()
                                .fold(0, |acc, cur| acc + cur.len())
                                - 1;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Next => {
                        let mut partition_i = self.items.as_mut().unwrap().curr;
                        let mut partition = 0;
                        for p in &self.items.as_mut().unwrap().data_matches {
                            if partition_i >= p.len() {
                                partition_i -= p.len();
                                partition += 1;
                            } else {
                                break;
                            }
                        }
                        if partition + 1 < self.items.as_mut().unwrap().data_matches.len() {
                            self.items.as_mut().unwrap().curr +=
                                self.items.as_mut().unwrap().data_matches[partition].len()
                                    - partition_i;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Prior => {
                        let mut partition_i = self.items.as_mut().unwrap().curr;
                        let mut partition = 0;
                        for p in &self.items.as_mut().unwrap().data_matches {
                            if partition_i >= p.len() {
                                partition_i -= p.len();
                                partition += 1;
                            } else {
                                break;
                            }
                        }
                        if partition > 0 {
                            self.items.as_mut().unwrap().curr -=
                                self.items.as_mut().unwrap().data_matches[partition - 1].len()
                                    + partition_i;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Left => {
                        if self.config.lines == 0
                            && self.pseudo_globals.cursor == self.input.len()
                            && self.items.as_mut().unwrap().curr > 0
                        {
                            self.items.as_mut().unwrap().curr -= 1;
                        } else {
                            if self.pseudo_globals.cursor > 0 {
                                self.pseudo_globals.cursor -= 1;
                            } else {
                                return Ok(false);
                            }
                        }
                    }
                    XK_Right => {
                        if self.config.lines == 0 && self.pseudo_globals.cursor == self.input.len()
                        {
                            if self.items.as_mut().unwrap().curr + 1
                                < self
                                    .items
                                    .as_mut()
                                    .unwrap()
                                    .data_matches
                                    .iter()
                                    .fold(0, |acc, cur| acc + cur.len())
                            {
                                self.items.as_mut().unwrap().curr += 1;
                            } else {
                                return Ok(false);
                            }
                        } else {
                            if self.pseudo_globals.cursor < self.input.len() {
                                self.pseudo_globals.cursor += 1;
                            } else {
                                return Ok(false);
                            }
                        }
                    }
                    XK_Up => {
                        if self.items.as_mut().unwrap().curr > 0 {
                            self.items.as_mut().unwrap().curr -= 1;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Down => {
                        if self.items.as_mut().unwrap().curr + 1
                            < self
                                .items
                                .as_mut()
                                .unwrap()
                                .data_matches
                                .iter()
                                .fold(0, |acc, cur| acc + cur.len())
                        {
                            self.items.as_mut().unwrap().curr += 1;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_BackSpace => {
                        if self.pseudo_globals.cursor > 0 {
                            let mut iter = self.input.drain(..).collect::<Vec<char>>().into_iter();
                            self.input.push_str(
                                &(&mut iter)
                                    .take(self.pseudo_globals.cursor - 1)
                                    .collect::<String>(),
                            );
                            iter.next();
                            self.input.push_str(&iter.collect::<String>());
                            self.pseudo_globals.cursor -= 1;
                        } else {
                            return Ok(false);
                        }
                    }
                    XK_Delete => {
                        if self.pseudo_globals.cursor < self.input.len() {
                            let mut iter = self.input.drain(..).collect::<Vec<char>>().into_iter();
                            self.input.push_str(
                                &(&mut iter)
                                    .take(self.pseudo_globals.cursor)
                                    .collect::<String>(),
                            );
                            iter.next();
                            self.input.push_str(&iter.collect::<String>());
                        } else {
                            return Ok(false);
                        }
                    }
                    _ => {
                        if iscntrl(*(buf.as_ptr() as *mut i32)) == 0 {
                            let mut iter = self.input.drain(..).collect::<Vec<char>>().into_iter();
                            self.input = (&mut iter).take(self.pseudo_globals.cursor).collect();
                            self.pseudo_globals.cursor += buf[..len as usize]
                                .iter()
                                .fold(0, |acc, c| acc + if *c > 0 { 1 } else { 0 });
                            self.input
                                .push_str(&String::from_utf8_lossy(&buf[..len as usize]));
                            self.input.push_str(&iter.collect::<String>());
                            self.items.as_mut().unwrap().curr = 0;
                        } else {
                            return Ok(false);
                        }
                    }
                }
                if self.draw().is_err() {
                    return Ok(true);
                }
            }
            Ok(false)
        }
        fn paste(&mut self) -> Result<(), String> {
            let mut ctx: ClipboardContext = match ClipboardProvider::new() {
                Ok(ctx) => ctx,
                Err(_) => {
                    return Err({
                        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                            &["Could not grab clipboard"],
                            &match () {
                                () => [],
                            },
                        ));
                        res
                    })
                }
            };
            match ctx.get_contents() {
                Ok(mut clip) => {
                    clip = match Regex::new(r"[\t]") {
                        Ok(re) => re,
                        Err(_) => {
                            return Err({
                                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                    &["Cannot build regex"],
                                    &match () {
                                        () => [],
                                    },
                                ));
                                res
                            })
                        }
                    }
                    .replace_all(
                        &match Regex::new(r"[\r\n]") {
                            Ok(re) => re,
                            Err(_) => {
                                return Err({
                                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                        &["Cannot build regex"],
                                        &match () {
                                            () => [],
                                        },
                                    ));
                                    res
                                })
                            }
                        }
                        .replace_all(&clip, "")
                        .to_string(),
                        "    ",
                    )
                    .to_string();
                    let mut iter = self.input.drain(..).collect::<Vec<char>>().into_iter();
                    self.input = (&mut iter).take(self.pseudo_globals.cursor).collect();
                    self.input.push_str(&clip);
                    self.input.push_str(&iter.collect::<String>());
                    self.pseudo_globals.cursor += clip.len();
                    self.draw()
                }
                Err(err) => Err(err.to_string()),
            }
        }
    }
}
mod clapflags {
    use clap::{ArgMatches, App};
    use yaml_rust::yaml::Yaml;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    struct YAML {
        __private_field: (),
    }
    #[doc(hidden)]
    static YAML: YAML = YAML {
        __private_field: (),
    };
    impl ::lazy_static::__Deref for YAML {
        type Target = Yaml;
        fn deref(&self) -> &Yaml {
            #[inline(always)]
            fn __static_ref_initialize() -> Yaml {
                {
                    clap :: YamlLoader :: load_from_str ( "---\nabout: dynamic menu\nargs: \n  - \n    bottom: \n      help: Places menu at bottom of the screen\n      long: bottom\n      short: b\n  - \n    fast: \n      help: Grabs keyboard before reading stdin\n      long: fast\n      short: f\n  - \n    insensitive: \n      help: Case insensitive item matching\n      long: insensitive\n      short: i\n  - \n    lines: \n      help: Number of vertical listing lines\n      long: lines\n      short: l\n      takes_value: true\n      value_name: LINES\n  - \n    monitor: \n      help: X monitor to display on\n      long: monitor\n      short: m\n      takes_value: true\n      value_name: MONITOR\n  - \n    prompt: \n      help: Display a prompt\n      long: prompt\n      short: p\n      takes_value: true\n      value_name: PROMPT\n  - \n    font: \n      help: Change menu font\n      long: font\n      takes_value: true\n      value_name: FONT\n  - \n    color_normal_background: \n      help: Normal Background Color\n      long: nb\n      takes_value: true\n      value_name: COLOR\n  - \n    color_normal_foreground: \n      help: Normal Foreground Color\n      long: nf\n      takes_value: true\n      value_name: COLOR\n  - \n    color_selected_background: \n      help: Selected Background Color\n      long: sb\n      takes_value: true\n      value_name: COLOR\n  - \n    color_selected_foreground: \n      help: Selected Foreground Color\n      long: sf\n      takes_value: true\n      value_name: COLOR\n  - \n    window: \n      help: Embed into window ID\n      long: window\n      short: w\n      takes_value: true\n      value_name: ID\n  - \n    password: \n      help: \"Hides input field with ***\"\n      long: password\n      short: P\nname: dmenu\nversion: 5.0.1\nversion_short: v" ) . expect ( "failed to load YAML file" ) . pop ( ) . unwrap ( )
                }
            }
            #[inline(always)]
            fn __stability() -> &'static Yaml {
                static LAZY: ::lazy_static::lazy::Lazy<Yaml> = ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for YAML {
        fn initialize(lazy: &Self) {
            let _ = &**lazy;
        }
    }
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct CLAP_FLAGS {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static CLAP_FLAGS: CLAP_FLAGS = CLAP_FLAGS {
        __private_field: (),
    };
    impl ::lazy_static::__Deref for CLAP_FLAGS {
        type Target = ArgMatches<'static>;
        fn deref(&self) -> &ArgMatches<'static> {
            #[inline(always)]
            fn __static_ref_initialize() -> ArgMatches<'static> {
                App::from_yaml(&YAML).get_matches()
            }
            #[inline(always)]
            fn __stability() -> &'static ArgMatches<'static> {
                static LAZY: ::lazy_static::lazy::Lazy<ArgMatches<'static>> =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for CLAP_FLAGS {
        fn initialize(lazy: &Self) {
            let _ = &**lazy;
        }
    }
}
#[path = "/home/notroot/Desktop/dmenu-rs/src/plugins/password/main.rs"]
mod plugin_password {
    use crate::drw::Drw;
    use overrider::*;
    impl Drw {
        #[cfg(not(__override_priority_1_flag_P_method_Drw_format_input))]
        #[inline(always)]
        pub fn __override_flagext_P_format_input(&self) -> String {
            (0..self.input.len()).map(|_| "*").collect()
        }
    }
}
use x11::xlib::*;
use std::ptr;
use libc::{setlocale, LC_CTYPE};
use std::mem::MaybeUninit;
use regex::RegexBuilder;
use drw::Drw;
use globals::*;
use config::*;
use clapflags::*;
fn main() {
    std::process::exit(match try_main() {
        Ok(_) => 0,
        Err(err) => {
            if err.len() > 0 {
                {
                    ::std::io::_eprint(::core::fmt::Arguments::new_v1(
                        &["", "\n"],
                        &match (&err,) {
                            (arg0,) => [::core::fmt::ArgumentV1::new(
                                arg0,
                                ::core::fmt::Display::fmt,
                            )],
                        },
                    ));
                };
            }
            1
        }
    });
}
fn try_main() -> Result<(), String> {
    let mut config = Config::default();
    let pseudo_globals = PseudoGlobals::default();
    let color_regex = match RegexBuilder::new("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\0$")
        .case_insensitive(true)
        .build()
    {
        Ok(re) => re,
        Err(_) => {
            return Err({
                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                    &["Could not build regex"],
                    &match () {
                        () => [],
                    },
                ));
                res
            })
        }
    };
    if CLAP_FLAGS.occurrences_of("bottom") == 1 {
        config.topbar = false;
    }
    if CLAP_FLAGS.occurrences_of("fast") == 1 {
        config.fast = true;
    }
    if CLAP_FLAGS.occurrences_of("insensitive") == 1 {
        config.case_sensitive = false;
    }
    if let Some(lines) = CLAP_FLAGS.value_of("lines") {
        match lines.parse::<u32>() {
            Ok(lines) => config.lines = lines,
            _ => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-l: Lines must be a non-negaitve integer"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                });
            }
        }
    }
    if let Some(monitor) = CLAP_FLAGS.value_of("monitor") {
        match monitor.parse::<i32>() {
            Ok(monitor) if monitor >= 0 => config.mon = monitor,
            _ => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-m: Monitor must be a non-negaitve integer"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                });
            }
        }
    }
    if let Some(prompt) = CLAP_FLAGS.value_of("prompt") {
        config.prompt = prompt.to_string();
    }
    if let Some(font) = CLAP_FLAGS.value_of("font") {
        config.default_font = font.to_string();
    }
    if let Some(color) = CLAP_FLAGS.value_of("color_normal_background") {
        let mut color = color.to_string();
        color.push('\0');
        match color_regex.find_iter(&color).nth(0) {
            Some(_) => {
                config.colors[SchemeNorm as usize][ColBg as usize].copy_from_slice(color.as_bytes())
            }
            None => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-nb: Color must be in hex format (#123456 or #123)"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                })
            }
        }
    }
    if let Some(color) = CLAP_FLAGS.value_of("color_normal_foreground") {
        let mut color = color.to_string();
        color.push('\0');
        match color_regex.find_iter(&color).nth(0) {
            Some(_) => {
                config.colors[SchemeNorm as usize][ColFg as usize].copy_from_slice(color.as_bytes())
            }
            None => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-nb: Color must be in hex format (#123456 or #123)"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                })
            }
        }
    }
    if let Some(color) = CLAP_FLAGS.value_of("color_selected_background") {
        let mut color = color.to_string();
        color.push('\0');
        match color_regex.find_iter(&color).nth(0) {
            Some(_) => {
                config.colors[SchemeSel as usize][ColBg as usize].copy_from_slice(color.as_bytes())
            }
            None => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-nb: Color must be in hex format (#123456 or #123)"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                })
            }
        }
    }
    if let Some(color) = CLAP_FLAGS.value_of("color_selected_foreground") {
        let mut color = color.to_string();
        color.push('\0');
        match color_regex.find_iter(&color).nth(0) {
            Some(_) => {
                config.colors[SchemeSel as usize][ColFg as usize].copy_from_slice(color.as_bytes())
            }
            None => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-nb: Color must be in hex format (#123456 or #123)"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                })
            }
        }
    }
    if let Some(window) = CLAP_FLAGS.value_of("window") {
        match window.parse::<u64>() {
            Ok(id) => config.embed = id,
            _ => {
                return Err({
                    let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                        &["-w: Window ID must be a valid X window ID string"],
                        &match () {
                            () => [],
                        },
                    ));
                    res
                });
            }
        }
    }
    unsafe {
        if setlocale(LC_CTYPE, ptr::null()) == ptr::null_mut() || XSupportsLocale() == 0 {
            return Err({
                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                    &["warning: no locale support"],
                    &match () {
                        () => [],
                    },
                ));
                res
            });
        }
        let dpy = XOpenDisplay(ptr::null_mut());
        if dpy == ptr::null_mut() {
            return Err({
                let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                    &["cannot open display"],
                    &match () {
                        () => [],
                    },
                ));
                res
            });
        }
        let screen = XDefaultScreen(dpy);
        let root = XRootWindow(dpy, screen);
        let parentwin = root.max(config.embed);
        let mut wa: XWindowAttributes = MaybeUninit::uninit().assume_init();
        XGetWindowAttributes(dpy, parentwin, &mut wa);
        return match Drw::new(dpy, screen, root, wa, pseudo_globals, config) {
            Ok(mut drw) => {
                if false {
                    if let Err(_) = pledge::pledge("stdio rpath", None) {
                        return Err({
                            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
                                &["Could not pledge"],
                                &match () {
                                    () => [],
                                },
                            ));
                            res
                        });
                    }
                }
                if let Err(err) = drw.setup(parentwin, root) {
                    return Err(err);
                }
                drw.run()
            }
            Err(err) => Err(err),
        };
    }
}
