use std::env;
use std::path::PathBuf;


fn main() {
    // We need access to several of the #defines in fontconfig.h, so generate bindings for them here
    // The rest of the autogenerated bindings aren't suitable, so we use the servo-fontconfig crate
    let mut bindings_builder = bindgen::Builder::default();
    bindings_builder = bindings_builder.header("headers/fontconfig.h");

    if cfg!(feature = "Xinerama") {
	println!("cargo:rustc-link-lib=Xinerama");
	bindings_builder = bindings_builder.header("headers/xinerama.h");
    }
    println!("cargo:rustc-link-lib=X11");
    //println!("cargo:rustc-link-lib=Xrender");
    println!("cargo:rustc-link-lib=Xft");

    let bindings = bindings_builder
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        .generate()
        .expect("Unable to generate bindings");
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");

    

    let mut bindings_builder2 = bindgen::Builder::default();
    bindings_builder2 = bindings_builder2.header("headers/xlib.h");
    let bindings2 = bindings_builder2
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        .generate()
        .expect("Unable to generate bindings");
    let out_path2 = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings2
        .write_to_file(out_path2.join("xlib.rs"))
        .expect("Couldn't write bindings!");
}
